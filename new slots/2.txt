String.prototype.startsWith = function (a)
{
    return 0 == this.indexOf(a);
};
String.prototype.endsWith = function (a, b)
{
    var c = this.toString();
    if (void 0 === b || b > c.length) {
        b = c.length;
    }
    b -= a.length;
    c = c.indexOf(a, b);
    return - 1 !== c && c === b;
};
function Logger() {}
Logger.ERROR = 1;
Logger.WARN = 2;
Logger.INFO = 3;
Logger.REQUEST = 4;
Logger.RESPONSE = 5;
Logger.prototype.log = function (a, b)
{
    if (gameConfig.debug && (a = a || "", b = b || Logger.INFO, window.console))
    {
        switch (b) 
        {
            case Logger.REQUEST:
            case Logger.RESPONSE:
                window.console.dirxml($(a)[0]);
                break;
            case Logger.ERROR:
                window.console.error(a);
                break;
            case Logger.WARN:
                window.console.warn(a);
                break;
            case Logger.INFO:
                window.console.info(a) 
        }
    }
};
Logger.prototype.warn = function (a)
{
    this.log(a, Logger.WARN)
};
Logger.prototype.info = function (a)
{
    this.log(a, Logger.INFO)
};
var logger = new Logger;
function AbstractConfig()
{
    this._data = {};
    this._name = "GameConfig"
}
AbstractConfig.prototype.constructor = AbstractConfig;
AbstractConfig.prototype.properties = {};
AbstractConfig.ONE_OF = function (a)
{
    for (var b = [], c = 0; c < arguments.length; c++) {
        b[c] = arguments[c];
    }
    return function (a)
    {
        return 0 <= b.indexOf(a);
    }
};
AbstractConfig.IS_BOOLEAN = function (a)
{
    return "boolean" === typeof a;
};
AbstractConfig.IS_STRING = function (a)
{
    return "string" == typeof a;
};
AbstractConfig.IS_NUMBER = function (a)
{
    return "number" == typeof a;
};
AbstractConfig.prototype.loadConfig = function (a, b, c)
{
    var d = function (a)
    {
        return void 0 !== this._data[a] ? this._data[a] : this.properties[a];
    },
    e = {}, f;
    for (f in this.properties) {
        this.properties.hasOwnProperty(f) && (e[f] = {
            enumerable :!0, get : d.bind(this, f) 
        });
    }
    Object.defineProperties(this, e);
    this.loadMainConfig(a, b, c);
    this.loadCustomConfig(a, b, c);
    logger.info(this._name + " has been loaded: \n" + JSON.stringify(this._data, null, 4))
};
AbstractConfig.prototype.loadMainConfig = function (a, b, c) {};
AbstractConfig.prototype.loadCustomConfig = function (a, b, c) {};
AbstractConfig.prototype._getValue = function (a, b, c)
{
    return void 0 != a ? c && !c(a) ? (logger.warn("AbstractConfig._getValue: bad config value: " + a), 
    b) : a : b
};
function GameConfig()
{
    AbstractConfig.call(this);
    this._name = "GameConfig"
}
GameConfig.prototype = Object.create(AbstractConfig.prototype);
GameConfig.prototype.constructor = GameConfig;
GameConfig.prototype.properties = 
{
    environment : "playson", debug :!1, decimal_separator : ".", grouping_separator : ",", denum : 100, 
    cutMoneyFractional :!1, cutMoneyZeroFractional :!1, guid : "", intro :!0, lang : "en", name : "", 
    perform_retry :!0, report_url : "", rtp : "", server_url : "", session : "", show_copyright :!0, show_gamble_info :!0, 
    show_rtp :!0, show_version :!0, timeout : 1E4, timeout_attempts : 5, use_currency_name :!1, use_currency_symbol :!1, 
    wl : "", pause_on_hide :!1, toolbar : 
    {
        nofullscreen : ["animation", "quickspin", "autoplay", "sound"], fullscreen : ["animation", "quickspin", 
        "autoplay", "time", "sound"]
    }
};
GameConfig.prototype.loadMainConfig = function (a, b, c)
{
    this._data.environment = this._getValue(a.environment, this.properties.environment, AbstractConfig.ONE_OF("playson", 
    "lega"));
    this._data.name = c[b.game].name;
    this._data.server_url = (b.server_url || window.location.origin + "/ih_proxy.php") + "?server_id=" + b.server_id;
    this._data.report_url = this._getValue(a.report_url, this.properties.report_url, AbstractConfig.IS_STRING);
    this._data.guid = this._getValue(b.key, this.properties.guid);
    this._data.session = this._getValue(b.session, this.properties.session);
    this._data.denum = Number(b.denum || a.denum || this.properties.denum);
    this._data.cutMoneyFractional = this._getValue(a.cutMoneyFractional, this.properties.cutMoneyFractional, 
    AbstractConfig.IS_BOOLEAN);
    this._data.cutMoneyZeroFractional = this._getValue(a.cutMoneyZeroFractional, this.properties.cutMoneyZeroFractional, 
    AbstractConfig.IS_BOOLEAN);
    this._data.wl = this._getValue(b.wl, this.properties.wl);
    this._data.lang = this._getValue(b.lang, this._getValue(a.lang, this.properties.lang));
    this._data.debug = this._getValue(a.debug, this.properties.debug, AbstractConfig.IS_BOOLEAN);
    this._data.intro = this._getValue(b.intro ? "false" != b.intro : a.intro, this.properties.intro, AbstractConfig.IS_BOOLEAN);
    this._data.use_currency_symbol = this._getValue(a.use_currency_symbol, this.properties.use_currency_symbol, 
    AbstractConfig.IS_BOOLEAN);
    this._data.use_currency_name = this._getValue(a.use_currency_name, this.properties.use_currency_name, 
    AbstractConfig.IS_BOOLEAN);
    this._data.decimal_separator = this._getValue(a.decimal_separator, this.properties.decimal_separator, 
    AbstractConfig.IS_STRING);
    this._data.grouping_separator = this._getValue(a.grouping_separator, this.properties.grouping_separator, 
    AbstractConfig.IS_STRING);
    this._data.timeout = this._getValue(a.timeout, this.properties.timeout, AbstractConfig.IS_NUMBER);
    this._data.timeout_attempts = this._getValue(a.timeout_attempts, this.properties.timeout_attempts, 
    AbstractConfig.IS_NUMBER);
    this._data.rtp = this._getValue(c[b.game].rtp, this.properties.rtp);
    this._data.show_rtp = this._getValue(a.show_rtp, this.properties.show_rtp, AbstractConfig.IS_BOOLEAN);
    this._data.show_version = this._getValue(a.show_version, this.properties.show_version, AbstractConfig.IS_BOOLEAN);
    this._data.show_gamble_info = this._getValue(a.show_gamble_info, this.properties.show_gamble_info, 
    AbstractConfig.IS_BOOLEAN);
    this._data.show_copyright = this._getValue(a.show_copyright, this.properties.show_copyright, AbstractConfig.IS_BOOLEAN);
    this._data.perform_retry = this._getValue(a.perform_retry, this.properties.perform_retry, AbstractConfig.IS_BOOLEAN);
    this._data.pause_on_hide = this._getValue(a.pause_on_hide, this.properties.pause_on_hide, AbstractConfig.IS_BOOLEAN);
    this._data.toolbar = this._getValue(a.toolbar, this.properties.toolbar);
};
GameConfig.prototype.loadCustomConfig = function (a, b, c) {};
var gameConfig = new GameConfig;
function UserConfig()
{
    this._data = {}
}
UserConfig.prototype.properties = 
{
    shifter_config : {
        savable :!0, "default" : []
    },
    music_on : {
        savable :!0, "default" :!0
    },
    music_level : {
        savable :!0, "default" : 100
    },
    sfx_on : {
        savable :!0, "default" :!0
    },
    sfx_level : {
        savable :!0, "default" : 100
    },
    quick_spin_enabled : {
        savable :!0, "default" :!1
    },
    skip_intro : {
        savable :!0, "default" :!1
    },
    close_feature_list_on_load : {
        savable :!0, "default" :!1
    },
    skip_animations : {
        savable :!0, "default" :!1
    }
};
UserConfig.prototype.constructor = UserConfig;
UserConfig.prototype.isLocalStorageAvailable = function ()
{
    try
    {
        return localStorage.setItem("testItem", "1"), localStorage.removeItem("testItem"), "localStorage"in window && null !== window.localStorage
    }
    catch (a) {
        return!1
    }
};
UserConfig.prototype.loadConfig = function ()
{
    var a = function (a)
    {
        return void 0 !== this._data[a] ? this._data[a] : this.properties[a]["default"];
    },
    b = function (a, b)
    {
        this._data[a] = b;
        this.properties[a].savable && this.saveConfig()
    },
    c = {}, d;
    for (d in this.properties)
    {
        this.properties.hasOwnProperty(d) && (c[d] = {
            enumerable :!0, get : a.bind(this, d), set : b.bind(this, d) 
        });
    }
    Object.defineProperties(this, c);
    if (this.isLocalStorageAvailable())
    {
        a = JSON.parse(localStorage.getItem(gameConfig.name) || "{}");
        for (d in a) {
            this.properties.hasOwnProperty(d) && (this._data[d] = a[d]);
        }
        logger.info("UserConfig has been loaded: \n" + JSON.stringify(this._data, null, 4))
    }
};
UserConfig.prototype.saveConfig = function ()
{
    if (this.isLocalStorageAvailable())
    {
        var a = {};
        Object.keys(this._data).filter(function (a)
        {
            return this.properties[a].savable
        }
        .bind(this)).forEach(function (b)
        {
            a[b] = this._data[b]
        }
        .bind(this));
        localStorage.setItem(gameConfig.name, JSON.stringify(a))
    }
};
UserConfig.prototype.resetConfig = function ()
{
    Object.keys(this._data).forEach(function (a)
    {
        this._data[a] = this.properties[a]["default"]
    }
    .bind(this));
    this.saveConfig()
};
var userConfig = new UserConfig;
function Locker()
{
    this._locked = !1
}
Locker.prototype.constructor = Locker;
Locker.prototype.enter = function ()
{
    if (this.isLocked()) {
        throw Error("Locker.enter: already locked");
    }
    this._locked = !0
};
Locker.prototype.exit = function ()
{
    this._locked = !1
};
Locker.prototype.isLocked = function ()
{
    return this._locked;
};
function GameEvent(a)
{
    this.type = a;
    this._isPropagating = !1
}
GameEvent.START = "start";
GameEvent.PROGRESS = "progress";
GameEvent.COMPLETE = "complete";
GameEvent.ENTER_FRAME = "enterFrame";
GameEvent.UPDATE = "update";
GameEvent.CONNECT = "connect";
GameEvent.ERROR = "error";
GameEvent.SESSION_LOST = "sessionlost";
GameEvent.REQUEST = "request";
GameEvent.RESPONSE = "response";
GameEvent.ENTER_STATE = "enterState";
GameEvent.EXIT_STATE = "exitState";
GameEvent.CLICK = "click";
GameEvent.RESIZE = "resize";
GameEvent.prototype.stopPropagation = function ()
{
    this._isPropagating = !1
};
function EventDispatcher()
{
    this._listeners = {};
    this._eventsToDispatch = [];
    this._inProgress = !1
}
EventDispatcher.prototype.addEventListener = function (a, b, c, d)
{
    this.removeEventListener(a, b, c) && logger.warn("EventDispatcher.addEventListener: duplicated listeners: type=" + a + ", listener=" + b + ".");
    c = c || window;
    if (void 0 === d || isNaN(d)) {
        d = 0;
    }
    this._listeners[a] || (this._listeners[a] = []);
    a = this._listeners[a];
    a.push({
        listener : b, context : c, priority : d
    });
    a.sort(function (a, b)
    {
        return a.priority - b.priority;
    })
};
EventDispatcher.prototype.addEventListenerOnce = function (a, b, c, d)
{
    var e = function (d)
    {
        this.removeEventListener(a, e, this);
        b.call(c, d)
    };
    this.addEventListener(a, e, this, d)
};
EventDispatcher.prototype.removeEventListener = function (a, b, c)
{
    if (!a || !b)
    {
        throw Error("EventDispatcher.removeEventListener: Wrong arguments: type=" + a + ", listener=" + b + ".");
    }
    c = c || window;
    if (a = this._listeners[a])
    {
        for (var d = 0; d < a.length; d++) {
            var e = a[d];
            if (e.listener == b && e.context == c) {
                return a.splice(d, 1), !0 ;
            }
        }
        return!1;
    }
};
EventDispatcher.prototype.dispatchEvent = function (a)
{
    if (!a) {
        throw Error("Wrong event");
    }
    this._eventsToDispatch.push(a);
    this._inProgress ? logger.warn("EventDispatcher.dispatchEvent: dispatch two events on one object") : this._doDispatch()
};
EventDispatcher.prototype._doDispatch = function ()
{
    for (this._inProgress = !0; 0 < this._eventsToDispatch.length; )
    {
        var a = this._eventsToDispatch[0], b = this._listeners[a.type];
        if (b)
        {
            b = b.slice();
            a.target = this;
            a._isPropagating = !0;
            for (var c = 0; c < b.length && a._isPropagating; c++) {
                var d = b[c];
                d.listener.call(d.context, a)
            }
        }
        this._eventsToDispatch.shift()
    }
    this._inProgress = !1
};
PIXI.DisplayObject.prototype.onClientUpdate = function (a)
{
    this._clientUpdateCallback && clientData.removeEventListener(GameEvent.UPDATE, this._clientUpdateCallback, 
    this);
    this._clientUpdateCallback = a;
    clientData.addEventListener(GameEvent.UPDATE, this._clientUpdateCallback, this)
};
PIXI.DisplayObject.prototype.getStage = function ()
{
    return this.parent ? this.parent.getStage() : null;
};
function CurrencyFormatter()
{
    this.currency = ""
}
CurrencyFormatter.prototype.constructor = CurrencyFormatter;
CurrencyFormatter.CURRENCIES = 
{
    EUR : {
        symbol : "\u20ac", name : "\u20ac"
    },
    USD : {
        symbol : "$", name : "$"
    },
    GBP : {
        symbol : "\u00a3", name : "P"
    },
    CHF : {
        symbol : "\u20a3", name : "\u20a3"
    },
    CAD : {
        symbol : "$", name : "$"
    },
    AUD : {
        symbol : "$", name : "$"
    },
    PLN : {
        symbol : "z\u0142", name : "z\u0142"
    },
    NOK : {
        symbol : "kr", name : "kr"
    },
    CZK : {
        symbol : "K\u010d", name : "K\u010d"
    },
    SEK : {
        symbol : "kr", name : "kr"
    },
    UAH : {
        symbol : "\u20b4", name : "H"
    },
    RUB : {
        symbol : "\u20bd", name : "R"
    },
    TRY : {
        symbol : "\u20ba", name : "\u20ba"
    },
    NGN : {
        symbol : "\u20a6", name : "\u20a6"
    },
    LBP : {
        symbol : "\u00a3", name : "P"
    },
    AMD : {
        symbol : "\u058f", name : "\u058f"
    },
    AZN : {
        symbol : "\u20bc", name : "\u20bc"
    },
    BRL : {
        symbol : "$", name : "$"
    },
    CNY : {
        symbol : "\u00a5", name : "Y"
    },
    GHS : {
        symbol : "\u20b5", name : "\u20b5"
    },
    IRR : {
        symbol : "\ufdfc", name : "\ufdfc"
    },
    JPY : {
        symbol : "\u00a5", name : "Y"
    },
    KRW : {
        symbol : "\uc6d0", name : "\uc6d0"
    },
    KZT : {
        symbol : "\u20b8", name : "\u20b8"
    },
    VND : {
        symbol : "\u20ab", name : "\u20ab"
    },
    BYR : {
        symbol : "Br", name : "Br"
    },
    LVL : {
        symbol : "Ls", name : "Ls"
    },
    LTL : {
        symbol : "Lt", name : "Lt"
    },
    MDL : {
        symbol : "L", name : "L"
    },
    MYR : {
        symbol : "RM", name : "RM"
    },
    RSD : {
        symbol : "din.", name : "din."
    },
    VEF : {
        symbol : "Bs", name : "Bs"
    },
    CFA : {
        symbol : "FCFA", name : "FCFA"
    },
    GEL : {
        symbol : "\u10da", name : "G"
    },
    IDR : {
        symbol : "Rp", name : "Rp"
    },
    KGS : {
        symbol : "Som", name : "Som"
    },
    SGD : {
        symbol : "S$", name : "S$"
    },
    TJS : {
        symbol : "S", name : "S"
    },
    TMT : {
        symbol : "m", name : "m"
    },
    UGX : {
        symbol : "USh", name : "USh"
    },
    SIT : {
        symbol : "SIT", name : "SIT"
    },
    BTC : {
        symbol : "\u0243", name : "\u0243"
    },
    HUF : {
        symbol : "\u0192", name : "\u0192"
    },
    TL : {
        symbol : "\u20ba", name : "L"
    }
};
CurrencyFormatter.ABBREVIATIONS = {
    thousand : "k", million : "M", billion : "B"
};
CurrencyFormatter.prototype.init = function ()
{
    var a = CurrencyFormatter.CURRENCIES[serverData.currency || "USD"];
    this.currency = gameConfig.use_currency_symbol ? a.symbol : gameConfig.use_currency_name ? a.name : "";
};
CurrencyFormatter.prototype.format = function (a)
{
    var b;
    if (100 == gameConfig.denum)
    {
        return b = this.formatNumber(a  / 100, "0,0.00"), !gameConfig.cutMoneyFractional || 0 != a % 100 && gameConfig.cutMoneyZeroFractional ? this.currency + " " + b.intPart + b.delimiter + b.fracPart : this.currency + " " + b.intPart;
    }
    b = this.formatNumber(a, "0,0");
    return this.currency + " " + b.intPart;
};
CurrencyFormatter.prototype.formatNumber = function (a, b)
{
    var c = !1, d = "", e = Math.abs(a), f, g = "", h = "";
     - 1 < b.indexOf("a") && (e < Math.pow(10, 12) && e >= Math.pow(10, 9) ? (d += CurrencyFormatter.ABBREVIATIONS.billion, 
    a /= Math.pow(10, 9)) : e < Math.pow(10, 9) && e >= Math.pow(10, 6) ? (d += CurrencyFormatter.ABBREVIATIONS.million, 
    a /= Math.pow(10, 6)) : e < Math.pow(10, 6) && e >= Math.pow(10, 3) && (d += CurrencyFormatter.ABBREVIATIONS.thousand, 
    a /= Math.pow(10, 3)));
     - 1 < b.indexOf("[.]") && (c = !0, b = b.replace("[.]", gameConfig.decimal_separator));
    a.toString().split(".");
    f = b.split(".")[1];
    e = b.indexOf(",");
    f ? (-1 < f.indexOf("[") ? (f = f.replace("]", ""), f = f.split("["), h = this.toFixed(a, f[0].length + f[1].length, 
    f[1].length)) : h = this.toFixed(a, f.length), f = h.split(".")[0], h.split(".")[1].length ? (g = gameConfig.decimal_separator, 
    h = h.split(".")[1]) : h = "", c && 0 === Number(h.slice(1)) && (h = "")) : f = this.toFixed(a, 0);
     - 1 < e && (f = f.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + gameConfig.grouping_separator));
    0 === b.indexOf(".") && (f = "");
    return {
        intPart : f, fracPart : h, abbr : d || "", delimiter : g
    }
};
CurrencyFormatter.prototype.toFixed = function (a, b, c)
{
    var d = Math.pow(10, b);
    a = (Math.round(a * d) / d).toFixed(b);
    c && (c = new RegExp("0{1," + c + "}$"), a = a.replace(c, ""));
    return a;
};
var currencyFormatter = new CurrencyFormatter;
function Stage(a)
{
    EventDispatcher.call(this);
    this.root = new PIXI.Container;
    this.root.getStage = function ()
    {
        return this
    }
    .bind(this);
    this.deltaTime = this.time = 0;
    this.playbackRate = 1;
    this.onPause = !1;
    void 0 !== a ? Stage._root.addChildAt(this.root, a) : Stage._root.addChild(this.root);
    Stage._instances.push(this)
}
Stage.prototype = Object.create(EventDispatcher.prototype);
Stage.prototype.constructor = Stage;
Stage.prototype.pause = function ()
{
    this.onPause = !0;
    this.root.interactiveChildren = !1
};
Stage.prototype.resume = function ()
{
    this.onPause = !1;
    this.root.interactiveChildren = !0
};
Stage.prototype.newFrame = function (a)
{
    if (!this.onPause)
    {
        a = Math.ceil(a * this.playbackRate);
        var b = new GameEvent(GameEvent.ENTER_FRAME);
        this.deltaTime = b.deltaTime = a;
        this.time += a;
        this.dispatchEvent(b)
    }
};
Stage.prototype.getViewPort = function ()
{
    var a = $(window).width(), b = $(window).height(), c = Math.min(b / 768, a / 1024), d = {};
    d.scale = c;
    d.width = Math.min(a / c, 1400);
    d.height = Math.min(b / c, 800);
    d.x = (1400 - d.width) / 2;
    d.y = (800 - d.height) / 2;
    return d;
};
Stage._instances = [];
Stage._root = new PIXI.Container;
Stage._renderer = PIXI.autoDetectRenderer(1400, 800, {
    view : $("#canvas_container > canvas")[0]
},
null != navigator.userAgent.match(/Trident/));
Stage._requestAnimationFrame = Stage._requestAnimationFrame_original = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || window.webkitRequestAnimationFrame;
Stage._cancelAnimationFrame = Stage._cancelAnimationFrame_original = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || window.webkitCancelAnimationFrame;
Stage._requestAnimationFrame_timeout = function (a)
{
    return setTimeout(a, 20);
};
Stage._cancelAnimationFrame_timeout = clearTimeout;
Stage._animationFrameId = 0;
Stage._realTime = (new Date).getTime();
Stage.MAIN = new Stage;
Stage.pause = !1;
$(window).click(function (a)
{
    for (var b = 0; b < Stage._instances.length; b++)
    {
        var c = new GameEvent(GameEvent.CLICK);
        Stage._renderer.plugins.interaction.mapPositionToPoint(c, a.clientX, a.clientY);
        Stage._instances[b].dispatchEvent(c)
    }
});
Stage._newFrame = function ()
{
    var a = (new Date).getTime() - Stage._realTime;
    Stage._realTime += a;
    if (!(gameConfig.pause_on_hide && document.hidden || Stage.pause))
    {
        do
        {
            for (var b = 0; b < Stage._instances.length; b++) {
                Stage._instances[b].newFrame(Math.min(a, 100));
            }
            a -= 100
        }
        while (100 < a) {;
        }
    }
    Stage._renderer.render(Stage._root);
    Stage._animationFrameId = Stage._requestAnimationFrame.call(window, Stage._newFrame);
};
Stage._newFrame();
Stage._handleVisibilityChange = function ()
{
    Stage._cancelAnimationFrame.call(window, Stage._animationFrameId);
    Stage._requestAnimationFrame = document.hidden ? Stage._requestAnimationFrame_timeout : Stage._requestAnimationFrame_original;
    Stage._cancelAnimationFrame = document.hidden ? Stage._cancelAnimationFrame_timeout : Stage._cancelAnimationFrame_original;
    Stage._newFrame()
};
document.addEventListener("visibilitychange", Stage._handleVisibilityChange);
Stage._handleResize = function ()
{
    for (var a = 0; a < Stage._instances.length; a++) {
        Stage._instances[a].dispatchEvent(new GameEvent(GameEvent.RESIZE));
    }
};
$(window).on("resize", Stage._handleResize);
function Button()
{
    PIXI.Container.call(this);
    this.states = {};
    this.states[Button.UP] = new PIXI.Container;
    this.addChild(this.states[Button.UP]);
    this.states[Button.OVER] = new PIXI.Container;
    this.addChild(this.states[Button.OVER]);
    this.states[Button.DOWN] = new PIXI.Container;
    this.addChild(this.states[Button.DOWN]);
    this.states[Button.DISABLED] = new PIXI.Container;
    this.addChild(this.states[Button.DISABLED]);
    this.hitArea = PIXI.Rectangle.EMPTY;
    this._pressed = !1;
    this._tooltip = null;
    this.clickSound = "main.buttons.click";
    this.overSound = "main.buttons.over";
    this.buttonMode = this.enabled = !0
}
Button.UP = "up";
Button.OVER = "over";
Button.DOWN = "down";
Button.DISABLED = "disabled";
Button.createStandartButton = function (a, b)
{
    var c = new Button;
    c.states[Button.UP].addChild(Sprite.fromFile(a + "/up.png"));
    c.states[Button.OVER].addChild(Sprite.fromFile(a + "/over.png"));
    c.states[Button.DOWN].addChild(Sprite.fromFile(a + "/down.png"));
    c.states[Button.DISABLED].addChild(Sprite.fromFile(a + "/disabled.png"));
    b && (c.states[Button.UP].addChild(new TextField(b[Button.UP])), c.states[Button.OVER].addChild(new TextField(b[Button.OVER])), 
    c.states[Button.DOWN].addChild(new TextField(b[Button.DOWN])), c.states[Button.DISABLED].addChild(new TextField(b[Button.DISABLED])));
    c.hitArea = new PIXI.Rectangle(c.states[Button.UP].x, c.states[Button.UP].y, c.states[Button.UP].width, 
    c.states[Button.UP].height);
    return c;
};
Button.createStandartCommonButton = function (a, b)
{
    var c = new Button;
    c.states[Button.UP].addChild(Sprite.fromCommonFile(a + "/up.png"));
    c.states[Button.OVER].addChild(Sprite.fromCommonFile(a + "/over.png"));
    c.states[Button.DOWN].addChild(Sprite.fromCommonFile(a + "/down.png"));
    c.states[Button.DISABLED].addChild(Sprite.fromCommonFile(a + "/disabled.png"));
    b && (c.states[Button.UP].addChild(new TextField(b[Button.UP])), c.states[Button.OVER].addChild(new TextField(b[Button.OVER])), 
    c.states[Button.DOWN].addChild(new TextField(b[Button.DOWN])), c.states[Button.DISABLED].addChild(new TextField(b[Button.DISABLED])));
    c.hitArea = new PIXI.Rectangle(c.states[Button.UP].x, c.states[Button.UP].y, c.states[Button.UP].width, 
    c.states[Button.UP].height);
    return c;
};
Button.prototype = Object.create(PIXI.Container.prototype);
Button.prototype.constructor = Button;
Button.prototype.handleMouse = function ()
{
    if (this.getStage())
    {
        var a = Stage._renderer.plugins.interaction.mouse.getLocalPosition(this);
        return this.hitArea.contains(a.x, a.y)
    }
    return!1
};
Button.prototype.mousedown = function (a)
{
    this.state = Button.DOWN;
    this._pressed = !0;
    this._tooltip && (this._tooltip.visible = !1)
};
Button.prototype.mouseout = function (a)
{
    this.state = this._pressed ? Button.OVER : Button.UP;
    this._tooltip && (this._tooltip.visible = !1)
};
Button.prototype.mouseover = function (a)
{
    a.data.originalEvent ? (a = void 0 !== a.data.originalEvent.buttons ? a.data.originalEvent.buttons : 0 === a.data.originalEvent.which ? 0 : 1 << a.data.originalEvent.which - 1, 
    this.state = this._pressed ? Button.DOWN : 0 < a ? Button.UP : Button.OVER) : (this.state = this._pressed ? Button.DOWN : Button.UP, 
    logger.warn("Button.mouseover: Original Event context undefined !"));
    this.state == Button.OVER && sound.play(this.overSound);
    this._tooltip && (this._tooltip.visible = !0, this._tooltip.movie.play(0))
};
Button.prototype.mouseup = function (a)
{
    this._pressed = !1;
    this.state = Button.OVER;
    sound.play(this.clickSound);
    this._tooltip && (this._tooltip.visible = !1)
};
Button.prototype.mouseupoutside = function (a)
{
    this._pressed = !1;
    this.state = Button.UP;
    this._tooltip && (this._tooltip.visible = !1)
};
Button.prototype.setTooltip = function (a, b, c, d)
{
    this._tooltip = new Tooltip(this, a, b, c, d);
    this.addChild(this._tooltip);
    this._tooltip.onClientUpdate(function (a)
    {
        this._button && !this._button.visible && (this.visible = !1)
    })
};
Button.prototype.addHotkey = function (a)
{
    keyboardListener.addHotkey(a, this)
};
Object.defineProperties(Button.prototype, 
{
    enabled : 
    {
        get : function ()
        {
            return this.interactive;
        },
        set : function (a)
        {
            this.interactive != a && ((this.interactive = a) ? this.handleMouse() ? (this.state = Button.OVER, 
            this._tooltip && (this._tooltip.visible = !0, this._tooltip.movie.play(0))) : this.state = Button.UP : (this.state = Button.DISABLED, 
            this._pressed = !1, this._tooltip && (this._tooltip.visible = !1)));
        }
    },
    state : 
    {
        set : function (a)
        {
            this.states[Button.UP].visible = a == Button.UP;
            this.states[Button.OVER].visible = a == Button.OVER;
            this.states[Button.DOWN].visible = a == Button.DOWN;
            this.states[Button.DISABLED].visible = a == Button.DISABLED;
        },
        get : function ()
        {
            return this.states[Button.UP].visible ? Button.UP : this.states[Button.OVER].visible ? Button.OVER : this.states[Button.DOWN].visible ? Button.DOWN : this.states[Button.DISABLED].visible ? Button.DISABLED : "";
        }
    }
});
function SpinnerButton()
{
    Button.call(this);
    this._changes = this._pressTime = 0
}
SpinnerButton.createStandartButton = function (a, b)
{
    var c = new SpinnerButton;
    c.states[Button.UP].addChild(Sprite.fromFile(a + "/up.png"));
    c.states[Button.OVER].addChild(Sprite.fromFile(a + "/over.png"));
    c.states[Button.DOWN].addChild(Sprite.fromFile(a + "/down.png"));
    c.states[Button.DISABLED].addChild(Sprite.fromFile(a + "/disabled.png"));
    b && (c.states[Button.UP].addChild(new TextField(b[Button.UP])), c.states[Button.OVER].addChild(new TextField(b[Button.OVER])), 
    c.states[Button.DOWN].addChild(new TextField(b[Button.DOWN])), c.states[Button.DISABLED].addChild(new TextField(b[Button.DISABLED])));
    c.hitArea = new PIXI.Rectangle(c.states[Button.UP].x, c.states[Button.UP].y, c.states[Button.UP].width, 
    c.states[Button.UP].height);
    return c;
};
SpinnerButton.prototype = Object.create(Button.prototype);
SpinnerButton.prototype.constructor = SpinnerButton;
SpinnerButton.prototype._pressIterate = function ()
{
    var a = this.getStage();
    this.enabled ? (a = a.time - this._pressTime, (1050 > a && a >= 300 * (this._changes + 1) || 1050 <= a && a - 900 >= 150 * (this._changes - 2)) && this._doChange()) : a.removeEventListener(GameEvent.ENTER_FRAME, 
    this._pressIterate, this);
};
SpinnerButton.prototype._doChange = function ()
{
    this._changes++;
    this.change(this._changes);
    sound.play(this.clickSound)
};
SpinnerButton.prototype.change = function (a) {};
SpinnerButton.prototype.mousedown = function (a)
{
    Button.prototype.mousedown.call(this, a);
    a = this.getStage();
    a.addEventListener(GameEvent.ENTER_FRAME, this._pressIterate, this);
    this._pressTime = a.time;
    this._changes = 0;
};
SpinnerButton.prototype.mouseout = function (a)
{
    Button.prototype.mouseout.call(this, a);
    this.getStage().removeEventListener(GameEvent.ENTER_FRAME, this._pressIterate, this)
};
SpinnerButton.prototype.mouseup = function (a)
{
    Button.prototype.mouseup.call(this, a);
    sound.get(this.clickSound).stop();
    a = this.getStage();
    a.removeEventListener(GameEvent.ENTER_FRAME, this._pressIterate, this);
    300 > a.time - this._pressTime && this._doChange()
};
SpinnerButton.prototype.addHotkey = function (a)
{
    keyboardListener.addHotkey(a, this)
};
function SimpleText(a, b)
{
    PIXI.Text.call(this, a, 
    {
        font : (b.bold ? "bold " : "") + (b.italic ? "italic " : "") + b.size + "px " + b.font, fill : b.color, 
        stroke : b.stroke.split(" ")[0], strokeThickness : Number(b.stroke.split(" ")[1]), lineJoin : "round"
    })
}
SimpleText.loadFonts = function (a, b, c)
{
    for (var d = 0; d < a.length; d++)
    {
        var e = String($(a[d]).attr("name")), f = systemLoader.addRevision(b + String($(a[d]).attr("src")));
        String($(a[d]).attr("src")).endsWith("fnt", 100) || $("head").prepend("<style type='text/css'>\t@font-face{\tfont-family:'" + e + "';\tsrc: url('" + f + "');}</style>")
    }
    0 < a.length ? window.WebFont.load(
    {
        timeout : 6E5,
        active : function ()
        {
            c()
        },
        inactive : function (a)
        {
            throw Error("Font " + a + " loading failed");
        },
        custom : 
        {
            families : a.map(function (a, b)
            {
                if (!$(b).attr("src").endsWith("fnt", 100)) {
                    return String($(b).attr("name"));
                }
            })
        }
    }) : c()
};
SimpleText.prototype = Object.create(PIXI.Text.prototype);
SimpleText.prototype.constructor = SimpleText;
SimpleText.prototype.getSize = function ()
{
    return {
        width : this.width, height : this.height
    }
};
function BitmapText(a, b, c)
{
    PIXI.extras.BitmapText.call(this, a, {
        font : "TODO"
    })
}
BitmapText.fonts = {};
BitmapText.parseFont = function (a, b)
{
    return{}
};
BitmapText.loadFonts = function (a, b, c)
{
    for (var d = 0, e = 0; e < a.length; e++)
    {
        var f = String($(a[e]).attr("name")), g = b + String($(a[e]).attr("src"));
        !String($(a[e]).attr("src")).endsWith("fnt", 100) || f in BitmapText.fonts || (BitmapText.fonts[f] = {},
        d++, $.ajax(
        {
            url : g, dataType : "xml", context : {
                name : f
            },
            beforeSend : function (a)
            {
                a.overrideMimeType("application/xml")
            }
        }).done(function (a)
        {
            BitmapText.fonts[this.name] = BitmapText.parseFont(a, b);
            d--;
            0 == d && c()
        }))
    }
    0 == d && c()
};
BitmapText.prototype = Object.create(PIXI.extras.BitmapText.prototype);
BitmapText.prototype.constructor = BitmapText;
BitmapText.prototype.getSize = function ()
{
    return {
        width : this.width, height : this.height
    }
};
function TextField(a)
{
    PIXI.Container.call(this);
    this.id = null;
    this._tokens = {};
    this._lines = [];
    a && this.setId(a)
}
TextField.config = $("<strings><common/><game/></strings>");
TextField.configLoader = {};
TextField.configLoader.loadFonts = function (a, b, c)
{
    BitmapText.loadFonts(a, b, function ()
    {
        SimpleText.loadFonts(a, b, c)
    })
};
TextField.configLoader.loadGameStrings = function (a, b)
{
    var c = systemLoader.addRevision(systemLoader.gamePath("local/strings-" + a + ".xml"));
    $.ajax({
        url : c, dataType : "text"
    }).done(function (a)
    {
        TextField.config.find("game").append($(a));
        a = TextField.config.find("game font");
        this.loadFonts(a, systemLoader.commonPath("res/fonts/"), function ()
        {
            b()
        }
        .bind(this))
    }
    .bind(this)).fail(function ()
    {
        throw Error("String resources + " + c + " loading failed");
    })
};
TextField.configLoader._load = function (a, b)
{
    var c = systemLoader.addRevision(systemLoader.commonPath("local/strings-" + a + ".xml"));
    $.ajax({
        url : c, dataType : "text"
    }).done(function (c)
    {
        TextField.config.find("common").append($(c));
        c = TextField.config.find("common font");
        this.loadFonts(c, systemLoader.commonPath("res/fonts/"), function ()
        {
            this.loadGameStrings(a, b)
        }
        .bind(this))
    }
    .bind(this)).fail(function ()
    {
        throw Error("Common string resources + " + c + " loading failed");
    })
};
TextField.configLoader.load = function (a)
{
    var b = gameConfig.lang || "en", c = systemLoader.addRevision(systemLoader.gamePath("local/strings-" + b + ".xml"));
    $.ajax({
        url : c, dataType : "text"
    }).done(function ()
    {
        this._load(b, a)
    }
    .bind(this)).fail(function ()
    {
        this._load("en", a)
    }
    .bind(this))
};
TextField.prototype = Object.create(PIXI.Container.prototype);
TextField.prototype.constructor = TextField;
TextField.prototype.setId = function (a)
{
    this.id = a;
    var b = TextField.config.find("string[id='" + this.id + "']");
    if (0 == b.length) {
        throw Error("String with id " + a + " not found.");
    }
    this._parseXML(b[0])
};
TextField.prototype.token = function (a, b)
{
    this._tokens[a] != b && (this._tokens[a] = b, this.formatText());
};
TextField.prototype.formatText = function ()
{
    for (var a = 0, b = 0; b < this._lines.length; b++) for (var c = this._lines[b], a = a + (this.getLineHeight(c) + c.n), 
    d = 0;
    d < c.length;
    d++) for (var e = c[d], f = this.getAlignedLineWidth(e), f = "left" == e[0].align ? e[0].lSide : "right" == e[0].align ? e[0].rSide - f : (e[0].lSide + e[0].rSide - f) / 2, 
    g = 0;
    g < e.length;
    g++) {
        var h = e[g];
        h.object.x = f;
        h.object.y = a - h.object.getSize().height;
        f += h.width
    }
};
TextField.prototype.getRect = function ()
{
    for (var a = 0, b = 0, c = 0, d = 0, e = 0; e < this._lines.length; e++)
    {
        for (var f = this._lines[e], g = 0; g < f.length; g++)
        {
            for (var h = f[g], l = 0; l < h.length; l++)
            {
                b = Math.min(b, h[l].object.y), d = Math.max(d, h[l].object.y + h[l].object.getSize().height);
            }
        }
        for (g = 0; g < f.length; g++)
        {
            h = f[g], l = this.getAlignedLineWidth(h), h = "left" == h[0].align ? h[0].lSide : "right" == h[0].align ? h[0].rSide - l : (h[0].lSide + h[0].rSide - l)  / 2, 
            a = Math.min(a, h), c = Math.max(c, h + l);
        }
    }
    return {
        x : a, y : b, width : c - a, height : d - b
    }
};
TextField.prototype.getLineHeight = function (a)
{
    for (var b = 0, c = 0; c < a.length; c++) {
        for (var d = a[c], e = 0; e < d.length; e++) {
            b = Math.max(d[e].size, b);
        }
    }
    return b;
};
TextField.prototype.getAlignedLineWidth = function (a)
{
    for (var b = 0, c = 0; c < a.length; c++) {
        var d = a[c];
        d.object.text = d.text.replace(/\${([^}]*)}/g, this._replaceToken.bind(this));
        d.width = d.object.getSize().width;
        b += d.width
    }
    return b;
};
TextField.prototype._replaceToken = function (a, b)
{
    return b in this._tokens ? this._tokens[b] : a;
};
TextField.prototype.setAttributes = function (a, b)
{
    function c(a)
    {
        return!0 === a ?!0 :!1 === a ?!1 : "true" === a
    }
    a.font = b.attr("font") || a.font;
    a.bold = c(b.attr("bold") || a.bold);
    a.italic = c(b.attr("italic") || a.italic);
    a.color = b.attr("color") || a.color;
    a.stroke = b.attr("stroke") || a.stroke;
    a.size = parseInt(b.attr("size") || a.size, 10);
    a.align = b.attr("align") || a.align;
    a.lSide = parseInt(b[0].getAttribute("lSide") || a.lSide, 10);
    a.rSide = parseInt(b[0].getAttribute("rSide") || a.rSide, 10);
    a.lineSpacing = parseInt(b[0].getAttribute("lineSpacing") || a.lineSpacing, 10);
    a.dx = parseInt(b.attr("dx") || a.dx, 10);
    a.dy = parseInt(b.attr("dy") || a.dy, 10);
    a.underline = parseInt(b.attr("underline") || a.underline, 10);
    a._static = c(b.attr("static") || a._static);
};
TextField.prototype._parseXML = function (a)
{
    this._lines = [];
    this.removeChildren();
    var b = 
    {
        font : "Arial", bold :!1, italic :!1, color : "#000000", stroke : "", size : 10, align : "left", 
        rSide : 0, lSide : 0, lineSpacing : 0, dx : 0, dy : 0, underline : 0, _static :!1
    };
    "true" == $(a).attr("static") && (b._static = !0);
    this._parseNode(a, b);
    isNaN(parseInt($(a).attr("x"), 10)) || (this.x = parseInt($(a).attr("x"), 10));
    isNaN(parseInt($(a).attr("y"), 10)) || (this.y = parseInt($(a).attr("y"), 10));
    this.formatText()
};
TextField.prototype._parseNode = function (a, b)
{
    if (3 == a.nodeType)
    {
        for (var c = $(a).text().split("\n"), d = 0; d < c.length; d++) {
            this._addFormatLine(c[d], b), d != c.length - 1 && this._addLine(b.lineSpacing);
        }
    }
    else if (1 == a.nodeType && "n" == a.nodeName.toLowerCase()) {
        this._addLine(parseInt($(a).attr("y") || 0, 10) + b.lineSpacing);
    }
    else if (1 == a.nodeType && "string" == a.nodeName.toLowerCase())
    {
        for (b = $.extend({}, b), this.setAttributes(b, $(a)), c = 0; c < $(a).contents().length; c++) d = $(a).contents()[c], 
        this._parseNode(d, b);
    }
};
TextField.prototype._addFormatLine = function (a, b)
{
    0 == this._lines.length && this._addLine();
    var c = this._lines[this._lines.length - 1], d = c[c.length - 1];
    if (0 == c.length || d[0].align != b.align || d[0].lSide != b.lSide || d[0].rSide != b.rSide) {
        d = [], c.push(d);
    }
    c = null;
    c = b.font in BitmapText.fonts ? new BitmapText(a, BitmapText.fonts[b.font], b.size) : new SimpleText(a, 
    b);
    this.addChild(c);
    d.push($.extend({
        text : a, object : c
    }, b))
};
TextField.prototype._addLine = function (a)
{
    var b = [];
    b.n = a || 0;
    this._lines.push(b)
};
TextField.getText = function (a)
{
    var b = TextField.config.find("string[id='" + a + "']");
    if (0 == b.length) {
        throw Error("String with id " + a + " not found.");
    }
    return b.text();
};
function Sprite(a)
{
    PIXI.Sprite.call(this, a[0]);
    this._textures = a;
    this._frame = 0
}
Sprite.prototype = Object.create(PIXI.Sprite.prototype);
Sprite.prototype.constructor = Sprite;
Sprite.texturesCache = {};
Sprite.fromFile = function (a)
{
    return Sprite.fromFiles([a]);
};
Sprite.fromFiles = function (a)
{
    for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c], d = systemLoader.gamePath("res/" + d);
        b.push(PIXI.Texture.fromImage(d))
    }
    return new Sprite(b);
};
Sprite.fromCommonFile = function (a)
{
    return Sprite.fromCommonFiles([a]);
};
Sprite.fromCommonFiles = function (a)
{
    for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c], d = systemLoader.commonPath("res/" + d);
        b.push(PIXI.Texture.fromImage(d))
    }
    return new Sprite(b);
};
Sprite.fromFolder = function (a, b)
{
    a = systemLoader.gamePath("res/" + a);
    if (!Sprite.texturesCache[a])
    {
        Sprite.texturesCache[a] = [];
        for (var c = 0; c < b; c++)
        {
            Sprite.texturesCache[a].push(PIXI.Texture.fromImage(a + "/" + (10 > c ? 100 <= b ? "00" + c : "0" + c : 100 > c && 100 <= b ? "0" + c : c) + ".png"));
        }
    }
    return new Sprite(Sprite.texturesCache[a]);
};
Sprite.fromCommonFolder = function (a, b)
{
    a = systemLoader.commonPath("res/" + a);
    if (!Sprite.texturesCache[a])
    {
        Sprite.texturesCache[a] = [];
        for (var c = 0; c < b; c++)
        {
            Sprite.texturesCache[a].push(PIXI.Texture.fromImage(a + "/" + (10 > c ? 100 <= b ? "00" + c : "0" + c : 100 > c && 100 <= b ? "0" + c : c) + ".png"));
        }
    }
    return new Sprite(Sprite.texturesCache[a]);
};
Object.defineProperties(Sprite.prototype, 
{
    frame : 
    {
        set : function (a)
        {
            this._frame = a;
            this.texture = this._textures[this._frame];
        },
        get : function ()
        {
            return this._frame;
        }
    }
});
function Connection()
{
    EventDispatcher.call(this);
    this._syncTime = 5E3;
    this._session = this._syncTimeout = null;
    this._queue = [];
    this._message = this._currentRequest = null;
    this._lastRandom = 0
}
Connection.prototype = Object.create(EventDispatcher.prototype);
Connection.prototype.constructor = Connection;
Connection.prototype.init = function ()
{
    this.reset()
};
Connection.prototype.reset = function ()
{
    this._session = String(gameConfig.session || "") || null;
    this._queue = [];
    this._message = null;
    this._currentRequest && (this._currentRequest.abort(), this._currentRequest = null);
    this._syncTimeout && (clearTimeout(this._syncTimeout), this._syncTimeout = null);
};
Connection.prototype.createMessage = function (a)
{
    var b = $("<client/>");
    this._session && b.attr("session", this._session);
    b.attr("rnd", this._getRandom());
    b.attr("command", a);
    return b;
};
Connection.prototype.send = function (a)
{
    this._queue.push(a);
    this._message || this._doSend()
};
Connection.prototype.retry = function ()
{
    this._message || this._doSend()
};
Connection.prototype.sendSync = function ()
{
    var a = this.createMessage("sync");
    this.send(a)
};
Connection.prototype._doSend = function ()
{
    this._message = this._queue.shift();
    logger.log(this._message[0].outerHTML, Logger.REQUEST);
    this.dispatchEvent(new GameEvent(GameEvent.REQUEST));
    this._tryToSend(gameConfig.server_url + "&r=" + this._getRandom(), 1)
};
Connection.prototype._tryToSend = function (a, b)
{
    var c = (new Date).getTime();
    this._currentRequest = $.ajax(
    {
        type : "POST", url : a, data : this._message[0].outerHTML.replace(/<\?XML:NAMESPACE[^>]*\/>/, 
        ""), dataType : "text", timeout : gameConfig.timeout
    }).done(this._done.bind(this)).fail(function (d, e)
    {
        if (b < gameConfig.timeout_attempts)
        {
            var f = gameConfig.timeout - ((new Date).getTime() - c);
            "timeout" != e && 0 < f ? setTimeout(this._tryToSend.bind(this, a, b + 1), f) : this._tryToSend(a, 
            b + 1)
        }
        else {
            this._error();
        }
    }
    .bind(this))
};
Connection.prototype._done = function (a)
{
    if (a)
    {
        logger.log(a, Logger.RESPONSE);
        a = $(a);
        a.attr("command", String(this._message.attr("command")));
        this._message = null;
        "sync" == a.attr("command").toLowerCase() && (this._syncTimeout = setTimeout(this.sendSync.bind(this), 
        this._syncTime));
        "connect" == a.attr("command").toLowerCase() && (connection._session = String(a.attr("session")));
        var b = new GameEvent(GameEvent.RESPONSE);
        b.response = a;
        this.dispatchEvent(b);
        0 < this._queue.length && !this._message && this._doSend()
    }
    else {
        this._error();
    }
};
Connection.prototype._error = function (a)
{
    gameConfig.perform_retry ? (this._queue.unshift(this._message), this._message = null) : this.reset();
    this.dispatchEvent(new GameEvent(GameEvent.ERROR))
};
Connection.prototype._getRandom = function ()
{
    var a = (new Date).getTime();
    return this._lastRandom = a <= this._lastRandom ? this._lastRandom + 1 : a;
};
var connection = new Connection;
function ServerData()
{
    EventDispatcher.call(this);
    this.parsers = []
}
ServerData.prototype = Object.create(EventDispatcher.prototype);
ServerData.prototype.constructor = ServerData;
ServerData.prototype.defaultData = {};
ServerData.prototype.defaultData.currency = null;
ServerData.prototype.defaultData.balance = 0;
ServerData.prototype.defaultData.errorCode = null;
ServerData.prototype.defaultData.status = "bet";
ServerData.prototype.start = function ()
{
    for (var a in this.defaultData)
    {
        this [a] = this.defaultData[a]instanceof Array ? this.defaultData[a].slice() : this.defaultData[a];
    }
    connection.removeEventListener(GameEvent.RESPONSE, this.onResponse, this);
    connection.addEventListener(GameEvent.RESPONSE, this.onResponse, this)
};
ServerData.prototype.addParser = function (a, b)
{
    if ("string" !== typeof a && !(a instanceof RegExp)) {
        throw Error("ServerData::addParser Wrong type of command. Should be String or RegExp.");
    }
    if (!(b instanceof Function)) {
        throw Error("ServerData::addParser Wrong type of parser. Should be Function.");
    }
    this.parsers.push({
        command : a, parser : b, type : "parse"
    })
};
ServerData.prototype.addErrorParser = function (a, b)
{
    if ("string" !== typeof a && !(a instanceof RegExp))
    {
        throw Error("ServerData::addErrorParser Wrong type of command. Should be String or RegExp.");
    }
    if (!(b instanceof Function)) {
        throw Error("ServerData::addErrorParser Wrong type of parser. Should be Function.");
    }
    this.parsers.push({
        command : a, parser : b, type : "error"
    })
};
ServerData.prototype.onResponse = function (a)
{
    a = a.response;
    var b = a.attr("command"), c = a.attr("status");
    switch (b.toLowerCase())
    {
        case "sync":
        case "pool":
        case "shifter":
            break;
        case "test":
            c = "ok";
            break;
        default:
            this.status = c
    }
    try
    {
        for (var d = 0; d < this.parsers.length; d++)
        {
            var e = this.parsers[d].command, f = this.parsers[d].parser, g = this.parsers[d].type;
            if (e instanceof RegExp && e.test(b) || e === b)
            {
                var h = "error" == c || "exit" == c || "fail" == c || "sessionlost" == c || "excess" == c || "wrongbet" == c;
                ("error" == g && h || "parse" == g && !h) && f.call(this, a)
            }
        }
    }
    catch (l) {
        throw Error("Response parsing failed.");
    }
    e = new GameEvent(GameEvent.UPDATE);
    e.response = a;
    this.dispatchEvent(e)
};
ServerData.prototype.parseCurrency = function (a)
{
    this.currency = a.find("[currency-id]").attr("currency-id");
};
ServerData.prototype.parseNewBalance = function (a)
{
    0 < a.find(">user_new").length && (this.balance = Number(a.find(">user_new").attr("cash")));
};
ServerData.prototype.sendShiftCombinations = function (a)
{
    a = this.createShiftMessage(a);
    connection.send(a)
};
ServerData.prototype.createShiftMessage = function (a)
{
    throw Error("Should be implemented");
};
ServerData.prototype.sendTest = function ()
{
    var a = connection.createMessage("test");
    connection.send(a)
};
ServerData.prototype.sendConnect = function ()
{
    connection.send(this.createConnectMessage());
    connection.sendSync()
};
ServerData.prototype.sendReconnect = function ()
{
    var a = connection.createMessage("reconnect");
    connection.send(a)
};
ServerData.prototype.sendLeave = function ()
{
    var a = connection.createMessage("leave");
    connection.send(a)
};
ServerData.prototype.sendStart = function ()
{
    var a = connection.createMessage("start");
    a.append('<game level="1" table="1" privacy="private"/><hc generate="1" game="all" />');
    a.find("game").attr("id", gameConfig.name);
    connection.send(a)
};
ServerData.prototype.createConnectMessage = function ()
{
    var a = connection.createMessage("connect");
    a.attr("playerguid", gameConfig.guid || "TEST1000");
    a.attr("lang", "en");
    a.attr("verid", "WIN 11,7,700,202");
    a.attr("gameid", gameConfig.name);
    gameConfig.wl && a.attr("wl", gameConfig.wl);
    return a;
};
var serverData = new ServerData;
serverData.addParser("connect", function (a)
{
    a = a.find("game");
    this.mode = 0 == a.length ? "start" : gameConfig.name == a.attr("name") ? "reconnect" : "leave";
});
serverData.addParser(/.+/, serverData.parseNewBalance);
serverData.addErrorParser(/.+/, serverData.parseNewBalance);
serverData.addErrorParser(/.+/, function (a)
{
    this.errorCode = a.find("extra>error").attr("code");
});
serverData.addErrorParser(/sync/, function (a)
{
    this.status = a.attr("status");
});
function ClientData()
{
    EventDispatcher.call(this);
    this.data = {};
    this.transitionLocker = new Locker;
    this.diffLocker = new Locker;
    this.delayedTransitions = null;
    this.transitions = {};
    this.transitionCallbacks = [];
    this.haveClientResponse = this.haveServerResponse = !1
}
ClientData.prototype = Object.create(EventDispatcher.prototype);
ClientData.prototype.constructor = ClientData;
ClientData.prototype.defaultData = {};
ClientData.prototype.defaultData.microround = !1;
ClientData.prototype.defaultData.balance = 0;
ClientData.prototype.defaultData.state = "init.launch";
ClientData.prototype.defaultData.actions = {};
ClientData.prototype.defaultData.action = "";
ClientData.prototype.start = function ()
{
    this.data = $.extend(!0, {}, this.defaultData);
    $.extend(!0, this, this.defaultData);
    this.exitState();
    serverData.addEventListener(GameEvent.UPDATE, this.onServerResponse, this);
    Stage.MAIN.addEventListener(GameEvent.ENTER_FRAME, function ()
    {
        this.updateActions();
        this.diff()
    }, this)
};
ClientData.prototype.addTransition = function (a)
{
    var b = a.from;
    this.transitions[b] || (this.transitions[b] = {
        action : [], server : [], auto : []
    });
    if (-1 == ["action", "server", "auto"].indexOf(a.type)) {
        throw Error("Unknown type of transition.");
    }
    b = this.transitions[b][a.type];
    b.push(
    {
        id : a.to, guard : a.guard || function ()
        {
            return!0
        },
        priority : a.priority || 0, action : a.action, type : a.type, mixed : a.mixed || !1, excess : a.excess || "", 
        error : a.error || "error.exit", fail : a.fail || "error.exit", sessionlost : a.sessionlost || "error.exit"
    });
    b.sort(function (a, b)
    {
        return b.priority - a.priority;
    })
};
ClientData.prototype.removeTransition = function (a, b, c, d)
{
    var e = this.transitions[a];
    e && (c ? [c] : ["action", "server", "auto"]).forEach(function (a)
    {
        if (e[a])
        {
            for (var c = 0; c < e[a].length; ) {
                b && e[a][c].id != b || d && e[a][c].action != d ? c++: e[a].splice(c, 1);
            }
        }
    })
};
ClientData.prototype.notifyStateChangeListeners = function (a, b)
{
    for (var c = 0; c < this.transitionCallbacks.length; c++)
    {
        this.transitionCallbacks[c].from.test(a) && this.transitionCallbacks[c].to.test(b) && this.transitionCallbacks[c].callback.call(this.transitionCallbacks[c].context);
    }
};
ClientData.prototype.setTransitionCallback = function (a, b, c, d)
{
    c = {
        from : a, to : b, callback : c, context : d || this
    };
    for (d = 0; d < this.transitionCallbacks.length; d++)
    {
        if (this.transitionCallbacks[d].from.source == a.source && this.transitionCallbacks[d].to.source == b.source) {
            this.transitionCallbacks[d] = c;
            return 
        }
        this.transitionCallbacks.push(c);
    }
};
ClientData.prototype.updateActions = function ()
{
    var a = this.transitions[this.state].action;
    this.actions = {};
    for (var b = 0; b < a.length; b++) {
        a[b].action && a[b].guard() && (this.actions[a[b].action] = !0);
    }
};
ClientData.prototype.sendRequest = function ()
{
    var a = this.transitions[this.state].server;
    a.length && a[0].action.call(serverData)
};
ClientData.prototype.isActionAvailable = function (a)
{
    return!!clientData.actions[a]
};
ClientData.prototype.act = function (a)
{
    this.action = a;
    var b = this.transitions[this.state].action.filter(function (b)
    {
        return b.action == a;
    });
    this.handleTransition(b)
};
ClientData.prototype.exitState = function ()
{
    this.haveClientResponse = !0;
    0 < this.transitions[this.state].server.length && this.haveServerResponse ? this.handleServerTransition() : this.handleTransition(this.transitions[this.state].auto)
};
ClientData.prototype.onServerResponse = function (a)
{
    a = a.response ? a.response.attr("command").toLowerCase() : "stub";
    "sync" == a ? "sessionlost" == serverData.status ? this.handleTransition([ {
        id : "error.exit", type : "server.sessionlost",
        guard : function ()
        {
            return!0
        }
    }]) : clientData.microround || (this.balance = serverData.balance, this.diff()) : "pool" != a && "shifter" != a && (this.haveServerResponse = !0, 
    this.transitions[this.state].server[0] || logger.warn("ClientData.onServerResponse: No server transition."), 
    !this.transitions[this.state].server[0] || this.transitions[this.state].server[0].mixed && !this.haveClientResponse || this.handleServerTransition());
};
ClientData.prototype.handleServerTransition = function ()
{
    var a = this.transitions[this.state].server[0];
    "excess" == serverData.status ? this.handleTransition([ {
        id : a.excess, type : "server.excess",
        guard : function ()
        {
            return!0
        }
    }]) : "error" == serverData.status || "exit" == serverData.status || "wrongbet" == serverData.status ? this.handleTransition([ {
        id : a.error, type : "server.error",
        guard : function ()
        {
            return!0
        }
    }]) : "fail" == serverData.status ? this.handleTransition([ {
        id : a.fail, type : "server.fail",
        guard : function ()
        {
            return!0
        }
    }]) : "sessionlost" == serverData.status ? this.handleTransition([ {
        id : a.sessionlost, type : "server.sessionlost",
        guard : function ()
        {
            return!0
        }
    }]) : this.handleTransition(this.transitions[this.state].server)
};
ClientData.prototype.handleTransition = function (a)
{
    if (this.transitionLocker.isLocked()) {
        this.delayedTransitions = a;
    }
    else for (var b = 0;
    b < a.length;
    b++) if (this.doTransition(a[b]))
    {
        this.delayedTransitions && (a = this.delayedTransitions, this.delayedTransitions = null, this.handleTransition(a));
        break
    }
};
ClientData.prototype.doTransition = function (a)
{
    if (a.guard.call(this))
    {
        this.transitionLocker.enter();
        this.dispatchEvent(new GameEvent(GameEvent.EXIT_STATE));
        var b = this.state, c = a.id;
        this.state = c;
        this.haveServerResponse = this.haveClientResponse = !1;
        this.sendRequest();
        this.notifyStateChangeListeners(b, c);
        this.updateActions();
        logger.info(b + " => " + c + " type=" + a.type);
        this.diff();
        this.dispatchEvent(new GameEvent(GameEvent.ENTER_STATE));
        this.transitionLocker.exit();
        return!0
    }
    return!1
};
ClientData.prototype.diff = function ()
{
    if (this.diffLocker.isLocked()) {
        throw Error("Unexpected call of diff inside other diff");
    }
    var a = {}, b;
    for (b in this.data)
    {
        if (this.data[b]instanceof Array)
        {
            for (var c = this.data[b], d = this [b], e = Math.max(c.length, d.length), f = 0; f < e; f++) {
                if (c[f] != d[f]) {
                    a[b] = c;
                    this.data[b] = d;
                    break 
                }
            }
        }
        else if (this.data[b]instanceof Object)
        {
            for (c = this.data[b], d = this [b], e = Object.keys(c).concat(Object.keys(d)), f = 0; f < e.length; f++) {
                var g = e[f];
                if (c[g] != d[g]) {
                    a[b] = c;
                    this.data[b] = d;
                    break 
                }
            }
        }
        else {
            this.data[b] != this [b] && (a[b] = this.data[b], this.data[b] = this [b]);
        }
        0 < Object.keys(a).length && (this.diffLocker.enter(), b = new GameEvent(GameEvent.UPDATE), b.diff = a, 
        this.dispatchEvent(b), this.diffLocker.exit());
    }
};
var clientData = new ClientData;
clientData.addTransition({
    from : "init.launch", to : "init.test", type : "auto"
});
clientData.addTransition({
    from : "init.test", to : "init.connect", type : "server", action : serverData.sendTest
});
clientData.addTransition({
    from : "init.connect", to : "init.session", type : "server", action : serverData.sendConnect
});
clientData.addTransition(
{
    from : "init.session", to : "init.start", type : "auto",
    guard : function ()
    {
        return "start" == serverData.mode;
    }
});
clientData.addTransition(
{
    from : "init.session", to : "init.reconnect", type : "auto",
    guard : function ()
    {
        return "reconnect" == serverData.mode;
    }
});
clientData.addTransition(
{
    from : "init.session", to : "init.leave", type : "auto",
    guard : function ()
    {
        return "leave" == serverData.mode;
    }
});
clientData.addTransition(
{
    from : "init.reconnect", to : "init.ready", type : "server", action : serverData.sendReconnect
});
clientData.addTransition({
    from : "init.leave", to : "init.start", type : "server", action : serverData.sendLeave
});
clientData.addTransition({
    from : "init.start", to : "init.ready", type : "server", action : serverData.sendStart
});
clientData.addTransition({
    from : "init.ready", to : "init", type : "action", action : "start"
});
clientData.addTransition({
    from : "error.exit", to : "", type : "auto"
});
clientData.addEventListener(GameEvent.ENTER_STATE, function ()
{
    "init.session" == clientData.state && clientData.exitState();
    "error.exit" == clientData.state && connection.reset()
});
function StateController(a)
{
    EventDispatcher.call(this);
    this.startTime = 0;
    this.started = !1;
    this.state = a
}
StateController.prototype = Object.create(EventDispatcher.prototype);
StateController.prototype.constructor = StateController;
StateController.prototype.activate = function ()
{
    clientData.addEventListener(GameEvent.ENTER_STATE, function (a)
    {
        clientData.state == this.state && this.start()
    }, this);
    clientData.addEventListener(GameEvent.EXIT_STATE, function (a)
    {
        if (clientData.state == this.state) {
            this.stop(!0);
        }
        else if ("init" == clientData.state) {
            this.onInit();
        }
    }, this);
    return this;
};
StateController.prototype.start = function ()
{
    var a = Stage.MAIN;
    this.started || (this.startTime = a.time, this.started = !0, a.addEventListener(GameEvent.ENTER_FRAME, 
    this._onEnterFrame, this), this.onStart());
};
StateController.prototype.stop = function (a)
{
    var b = Stage.MAIN;
    this.started && (this.startTime = 0, this.started = !1, b.removeEventListener(GameEvent.ENTER_FRAME, 
    this._onEnterFrame, this), this.onStop(), this.dispatchEvent(new GameEvent(GameEvent.COMPLETE)), a || clientData.exitState());
};
StateController.prototype.hasElapsedTimeStamp = function (a)
{
    var b = Stage.MAIN;
    return Math.max(b.time - b.deltaTime - this.startTime, 0) < a && b.time - this.startTime >= a;
};
StateController.prototype._onEnterFrame = function (a)
{
    if (clientData.state == this.state) {
        this.onEnterFrame(a);
    }
};
StateController.prototype.onInit = function () {};
StateController.prototype.onStart = function () {};
StateController.prototype.onStop = function () {};
StateController.prototype.onEnterFrame = function (a) {};
function Tween(a, b, c)
{
    if (!(a instanceof PIXI.DisplayObject)) {
        throw Error("Tween: object is not specified or has wrong type.");
    }
    this._object = a;
    if ("function" !== typeof b)
    {
        throw Error("Tween: function is not specified or has wrong type.");
    }
    this._setter = b;
    this._motions = [ {
        value : c, time : 0
    }];
    this.timeShift = 0
}
Tween.POW = function (a, b, c, d, e)
{
    a /= d;
    e = e || 1;
    return b + c * (0 <= e ? Math.pow(a, e) : 1 - Math.pow(1 - a, - e));
};
Tween.JUMP = function (a, b, c, d)
{
    return a == d ? b + c : b;
};
Tween.X_FUNC = function (a, b)
{
    a.x = b;
};
Tween.Y_FUNC = function (a, b)
{
    a.y = b;
};
Tween.ALPHA_FUNC = function (a, b)
{
    a.alpha = b;
};
Tween.SCALE_FUNC = function (a, b)
{
    a.scale.x = b;
    a.scale.y = b;
};
Tween.SCALE_X_FUNC = function (a, b)
{
    a.scale.x = b;
};
Tween.SCALE_Y_FUNC = function (a, b)
{
    a.scale.y = b;
};
Tween.SCALE_ALPHA_FUNC = function (a, b)
{
    a.scale.x = b;
    a.scale.y = b;
    a.alpha = b;
};
Tween.ROTATION_FUNC = function (a, b)
{
    a.rotation = b;
};
Tween.prototype.move = function (a, b, c)
{
    for (var d = [], e = 3; e < arguments.length; e++) {
        d.push(arguments[e]);
    }
    this._motions.push({
        value : a, time : b, func : c || Tween.POW, args : d
    });
    return this;
};
Tween.prototype.apply = function (a)
{
    a -= this.timeShift;
    for (var b = this._motions[0].value, c = 1; c < this._motions.length && !(a <= this._motions[c].time); ++c) {
        b += this._motions[c].value, a -= this._motions[c].time;
    }
    c < this._motions.length && (c = this._motions[c], b = c.func.apply(this, [a, b, c.value, c.time].concat(c.args)));
    this._setter.apply(this, [this._object, b])
};
function SpriteTween(a)
{
    this._object = a;
    this._motions = []
}
SpriteTween.prototype._parsePattern = function (a)
{
    var b = [];
    a.split(",").forEach(function (a)
    {
        if (-1 < a.indexOf("-"))
        {
            a = a.split("-").map(function (a)
            {
                return parseInt(a, 10);
            });
            for (var d = a[0] > a[1] ?- 1 : 1, e = 0; e <= Math.abs(a[0] - a[1]); ++e) {
                b.push(a[0] + e * d);
            }
        }
        else {
            b.push(parseInt(a, 10));
        }
    });
    return b;
};
SpriteTween.prototype.move = function (a, b)
{
    for (var c = this._parsePattern(a), d = b / c.length, e = 0; e < c.length; ++e) {
        this._motions.push({
            value : c[e], time : d 
        });
    }
    return this;
};
SpriteTween.prototype.apply = function (a)
{
    for (var b = 0; b < this._motions.length && !(a <= this._motions[b].time); ++b) {
        a -= this._motions[b].time;
    }
    b < this._motions.length && (this._object.frame = this._motions[b].value);
};
function MovieClip(a)
{
    EventDispatcher.call(this);
    this.time = 0;
    this._stage = a || Stage.MAIN;
    this._playing = !1;
    this.attributes = {};
    this._tweens = [];
    this._actions = []
}
MovieClip.prototype = Object.create(EventDispatcher.prototype);
MovieClip.prototype.constructor = MovieClip;
MovieClip.prototype.addTween = function (a)
{
    this._tweens.push(a)
};
MovieClip.prototype.addAction = function (a, b, c)
{
    var d, e = [];
    for (d = 2; d < arguments.length; d++) {
        e.push(arguments[d]);
    }
    for (d = 0; d < this._actions.length; d++)
    {
        if (this._actions[d].time == b) {
            logger.warn("MovieClip.addAction: reassign action.");
            this._actions[d].func = a;
            break 
        }
        d == this._actions.length && this._actions.push({
            func : a, time : b, args : e 
        });
        this._actions.sort(function (a, b) 
        {
            return a.time - b.time;
        });
    }
};
MovieClip.prototype.play = function (a)
{
    var b = !1;
    "undefined" !== typeof a && (b = this.time != a, this.time = a);
    this._playing ? b && this._update() : (this._stage.addEventListener(GameEvent.ENTER_FRAME, this._onEnterFrame, 
    this), this._playing = !0, this._update(), this.dispatchEvent(new GameEvent(GameEvent.START)))
};
MovieClip.prototype.stop = function (a)
{
    this.time = "undefined" === typeof a ? this.time : a;
    this._playing && (this._stage.removeEventListener(GameEvent.ENTER_FRAME, this._onEnterFrame, this), 
    this._playing = !1, this.dispatchEvent(new GameEvent(GameEvent.COMPLETE)));
    this._update()
};
MovieClip.prototype._onEnterFrame = function (a)
{
    this._playing && this._doActions(a.deltaTime);
    this._playing && this._update()
};
MovieClip.prototype._update = function ()
{
    for (var a = 0; a < this._tweens.length; a++) {
        this._tweens[a].apply(Math.max(0, this.time));
    }
};
MovieClip.prototype._doActions = function (a)
{
    for (var b = 0; b < this._actions.length; ++b)
    {
        if (this._actions[b].time > this.time && this._actions[b].time <= this.time + a) 
        {
            var c = this._actions[b].time - this.time;
            a -= c;
            this.time += c;
            if (this._doAction(this._actions[b])) {
                if (!this._playing) {
                    return;
                }
                b =- 1 
            }
        }
        this.time += a;
    }
};
MovieClip.prototype._doAction = function (a)
{
    var b = this.time, c = this._playing;
    a.func.apply(this, a.args);
    return b != this.time || c != this._playing;
};
function MessageBox(a, b, c)
{
    PIXI.Container.call(this);
    this._text = new TextField;
    this._viewWidth = a;
    this._viewHeight = b;
    this._interval = c || 1E3;
    this._movie = null;
    this.addChild(this._text)
}
MessageBox.prototype = Object.create(PIXI.Container.prototype);
MessageBox.prototype.constructor = MessageBox;
MessageBox.prototype.show = function (a, b, c)
{
    this._movie && this._movie.stop();
    var d = b;
    this._text.setId(a);
    this._text.visible = !0;
    for (var e in c) {
        this._text.token(e, c[e]);
    }
    a = this._text.getRect();
    this._text.y = Math.floor((this._viewHeight - a.height) / 2);
    this._movie = new MovieClip(this.getStage());
    this._viewWidth >= a.width ? this._text.x = Math.floor((this._viewWidth - a.width) / 2) : (d += 10 * (a.width - this._viewWidth), 
    this._movie.addTween((new Tween(this._text, Tween.X_FUNC, 0)).move(0, Math.floor(b / 2)).move(this._viewWidth - a.width, 
    d - b)));
    var f = this;
    this._movie.addAction(function ()
    {
        f._text.visible = !1
    }, d);
    this._movie.addAction(function ()
    {
        f._movie.stop();
        f._movie = null;
        f.nextMessage()
    },
    d + f._interval);
    this._movie.play()
};
MessageBox.prototype.nextMessage = function () {};
function Tooltip(a, b, c, d, e)
{
    PIXI.Container.call(this);
    this._button = a;
    this._substrate = new PIXI.Graphics;
    this.addChild(this._substrate);
    this._text = new TextField(b);
    this.addChild(this._text);
    this._dx = c || 0;
    this._dy = d || 0;
    this.performDraw();
    this.createMovie(e);
    this.movie.stop(2500)
}
Tooltip.prototype = Object.create(PIXI.Container.prototype);
Tooltip.prototype.constructor = Tooltip;
Tooltip.prototype._BACK = 0;
Tooltip.prototype._FRAME = 16777215;
Tooltip.prototype.performDraw = function ()
{
    throw Error("Tooltip.performDraw: should be redeclared.");
};
Tooltip.prototype.createMovie = function (a)
{
    a = this.movie = new MovieClip(a);
    a.addTween((new Tween(this, Tween.ALPHA_FUNC, 0)).move(1, 1500, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
    a.addAction(a.stop, 1500);
    a.addAction(a.stop, 2500)
};
function KeyboardListener()
{
    this.hotkeys = [];
    this._blocked = !1;
    $(window).on("keydown", this._onKeyDown.bind(this));
    $(window).on("mousedown", function (a)
    {
        window.focus()
    }
    .bind(this))
}
KeyboardListener.prototype.constructor = KeyboardListener;
KeyboardListener.SPIN_HOTKEY = [13, 32];
KeyboardListener.SKIP_HOTKEY = [13, 32];
KeyboardListener.AUTOPLAY_HOTKEY = [65];
KeyboardListener.PAYTABLE_HOTKEY = [73];
KeyboardListener.BET_DECREASE_HOTKEY = [37];
KeyboardListener.BET_INCREASE_HOTKEY = [39];
KeyboardListener.BACK_HOTKEY = [27];
KeyboardListener.PAGE_PREV_HOTKEY = [37];
KeyboardListener.PAGE_NEXT_HOTKEY = [39];
KeyboardListener.SKIP_POPUP_HOTKEY = [27];
KeyboardListener.prototype.addHotkey = function (a, b, c)
{
    for (var d = 0; d < this.hotkeys.length; d++)
    {
        if (this.hotkeys[d].key == a && this.hotkeys[d].component == b) {
            return;
        }
        this.hotkeys.unshift({
            key : a, component : b, callback : c 
        });
    }
};
KeyboardListener.prototype.deleteHotkey = function (a, b)
{
    if (this.hotkeys)
    {
        for (var c = 0; c < this.hotkeys.length; c++) {
            this.hotkeys[c].key == a && this.hotkeys[c].component == b && this.hotkeys.splice(c, 1);
        }
    }
};
KeyboardListener.prototype.getKeyCode = function (a)
{
    a = a || window.event;
    return a.keyCode || a.which;
};
KeyboardListener.prototype.findHotkey = function (a)
{
    for (var b = 0; b < this.hotkeys.length; b++)
    {
        if (-1 != this.hotkeys[b].key.indexOf(a) && (!this.hotkeys[b].component || this.hotkeys[b].component.interactive && this.hotkeys[b].component.worldVisible)) {
            return b;
        }
        return - 1;
    }
};
KeyboardListener.prototype._onKeyDown = function (a)
{
    a.originalEvent && a.originalEvent.repeat || this._blocked || (a = this.getKeyCode(a), a = this.findHotkey(a), 
     - 1 != a && (a = this.hotkeys[a], !a.component || a.callback ? a.callback() : a.component instanceof SpinnerButton ? a.component.change(1) : a.component instanceof Button && a.component.click()));
};
KeyboardListener.prototype.block = function ()
{
    this._blocked = !0
};
KeyboardListener.prototype.unblock = function ()
{
    this._blocked = !1
};
var keyboardListener = new KeyboardListener;
function Sound(a, b)
{
    this._context = (this._parent = a) ? a._context : new (window.AudioContext || window.webkitAudioContext);
    this._parentNode = a ? a._gainNode : this._context.destination;
    this._gainNode = this._context.createGain();
    this._gain = 1;
    this._id = b;
    this._children = [];
    this._paused = this._muted = !1;
    this._gainNode.connect(this._parentNode)
}
Sound.prototype.constructor = Sound;
Sound.prototype.mute = function ()
{
    this._muted = !0;
    this._gainNode.gain.value = 0;
};
Sound.prototype.unmute = function ()
{
    this._muted = !1;
    this._gainNode.gain.value = this._gain;
};
Sound.prototype.pause = function ()
{
    this._paused = !0;
    this._gainNode.disconnect()
};
Sound.prototype.resume = function ()
{
    this._paused = !1;
    this._gainNode.connect(this._parentNode)
};
Sound.prototype.stop = function ()
{
    this._gainNode.disconnect();
    if (this._parent) {
        var a = this._parent._children, b = a.indexOf(this);
        0 <= b && a.splice(b, 1)
    }
};
Object.defineProperties(Sound.prototype, 
{
    volume : 
    {
        get : function ()
        {
            return this._gain;
        },
        set : function (a)
        {
            this._gain = a;
            this._gainNode.gain.value = a;
        }
    },
    muted : {
        get : function ()
        {
            return this._muted;
        }
    }
});
Sound.map = {};
function Channel(a, b)
{
    Sound.call(this, a, b);
    this._deffered = []
}
Channel.prototype = Object.create(Sound.prototype);
Channel.prototype.constructor = Channel;
Channel.prototype.play = function (a)
{
    this._paused ? this._deffered.push(a) : (a = new Track(this, a, !1), this._children.push(a), a.start());
};
Channel.prototype.resume = function ()
{
    Sound.prototype.resume.call(this);
    for (var a = 0; a < this._deffered.length; a++) {
        this.play(this._deffered[a]);
    }
    this._deffered = [];
};
Channel.prototype.loop = function (a)
{
    a = new Track(this, a, !0);
    this._children.push(a);
    a.start()
};
Channel.prototype.stop = function ()
{
    Sound.prototype.stop.call(this);
    for (var a = 0; a < this._children.length; a++) {
        this._children[a].stop();
    }
};
Channel.prototype.get = function (a)
{
    for (var b = 0; b < this._children.length; b++) {
        var c = this._children[b];
        if (c._id == a) {
            return c;
        }
    }
    return Channel.STUB;
};
Channel.prototype.create = function (a)
{
    a = new Channel(this, a);
    this._children.push(a)
};
Channel.STUB = 
{
    play : function () {}, loop : function () {}, stop : function () {},
    get : function ()
    {
        return sound;
    },
    create : function () {}, mute : function () {}, unmute : function () {}, pause : function () {},
    resume : function () {},
    decodeAllSounds : function (a, b)
    {
        b()
    },
    volume : 1, muted :!1
};
var sound;
window.AudioContext || window.webkitAudioContext ? (sound = new Channel, sound.decodeAllSounds = function (a, 
b) {
    Track.decodeAllSounds(a, sound._context, b)
}) : (logger.warn("WebAudio is not supported. Stub will be used."), sound = Channel.STUB);
function Track(a, b, c)
{
    Sound.call(this, a, b);
    try
    {
        var d = "res/audio/" + ResourceLoader.AUDIO_FORMAT + "/" + Sound.map[b] + "." + ResourceLoader.AUDIO_FORMAT;
        this._source = this._context.createBufferSource();
        this._source.buffer = Track._buffers[systemLoader.gamePath(d)];
        this._source.connect(this._gainNode);
        this._source.onended = this._onended.bind(this);
        this._source.loop = !!c
    }
    catch (e) {
        logger.warn("Track: id=" + b + ", error=" + e)
    }
}
Track.prototype = Object.create(Sound.prototype);
Track.prototype.constructor = Track;
Track._buffers = {};
Track.decodeAllSounds = function (a, b, c)
{
    var d = [], e;
    for (e in a) {
        Track._buffers[e] || d.push(Track.decodeSound(e, a[e], b));
    }
    0 < d.length ? $.when.apply($, d).then(c) : c()
};
Track.decodeSound = function (a, b, c)
{
    var d = $.Deferred();
    c.decodeAudioData(b, function (b)
    {
        Track._buffers[a] = b;
        d.resolve()
    },
    function (b)
    {
        logger.warn("Track.decodeSound: name=" + a + ", error=" + b);
        d.resolve()
    });
    return d.promise();
};
Track.prototype.start = function ()
{
    this._source.start()
};
Track.prototype.stop = function ()
{
    Sound.prototype.stop.call(this);
    this._source.disconnect();
    this._source.stop()
};
Track.prototype._onended = function ()
{
    Sound.prototype.stop.call(this)
};
function IESound(a, b)
{
    this._parent = a;
    this._id = b;
    this._volume = 1;
    this._muted = this._paused = !1;
    this._children = [];
    this._source = null
}
IESound.prototype.constructor = IESound;
IESound.prototype.mute = function ()
{
    this._muted = !0;
    this._mute()
};
IESound.prototype.unmute = function ()
{
    this._muted = !1;
    this._unmute()
};
IESound.prototype.pause = function ()
{
    this._paused = !0;
    this._pause()
};
IESound.prototype.resume = function ()
{
    this._paused = !1;
    this._resume()
};
IESound.prototype.stop = function ()
{
    if (this._parent) {
        var a = this._parent._children, b = a.indexOf(this);
        0 <= b && a.splice(b, 1)
    }
};
IESound.prototype._globalVolume = function ()
{
    for (var a = 1, b = this; b; b = b._parent) {
        if (b._muted) {
            return 0;
        }
        a *= b.volume
    }
    return a;
};
IESound.prototype._globalPaused = function ()
{
    for (var a = this; a; a = a._parent) {
        if (a._paused) {
            return!0;
        }
        return!1;
    }
};
IESound.prototype._mute = function () {};
IESound.prototype._unmute = function () {};
IESound.prototype._pause = function () {};
IESound.prototype._resume = function () {};
IESound.prototype._updateVolume = function () {};
Object.defineProperties(IESound.prototype, 
{
    volume : 
    {
        get : function ()
        {
            return this._volume;
        },
        set : function (a)
        {
            this._volume = a;
            this._updateVolume()
        }
    },
    muted : {
        get : function ()
        {
            return this._muted;
        }
    }
});
function IEChannel(a, b)
{
    IESound.call(this, a, b)
}
IEChannel.prototype = Object.create(IESound.prototype);
IEChannel.prototype.constructor = IEChannel;
IEChannel.prototype._mute = function ()
{
    for (var a = 0; a < this._children.length; a++) {
        this._children[a]._mute();
    }
};
IESound.prototype._unmute = function ()
{
    if (!this._muted) {
        for (var a = 0; a < this._children.length; a++) {
            this._children[a]._unmute();
        }
    }
};
IESound.prototype._pause = function ()
{
    for (var a = 0; a < this._children.length; a++) {
        this._children[a]._pause();
    }
};
IESound.prototype._resume = function ()
{
    if (!this._paused) {
        for (var a = 0; a < this._children.length; a++) {
            this._children[a]._resume();
        }
    }
};
IESound.prototype._updateVolume = function ()
{
    if (!this._muted) {
        for (var a = 0; a < this._children.length; a++) {
            this._children[a]._updateVolume();
        }
    }
};
IEChannel.prototype.play = function (a)
{
    a = new IETrack(this, a, !1);
    this._children.push(a);
    a.start()
};
IEChannel.prototype.loop = function (a)
{
    a = new IETrack(this, a, !0);
    this._children.push(a);
    a.start()
};
IEChannel.prototype.stop = function ()
{
    IESound.prototype.stop.call(this);
    for (var a = 0; a < this._children.length; a++) {
        this._children[a].stop();
    }
};
IEChannel.prototype.get = function (a)
{
    for (var b = 0; b < this._children.length; b++) {
        var c = this._children[b];
        if (c._id == a) {
            return c;
        }
    }
    return Channel.STUB;
};
IEChannel.prototype.create = function (a)
{
    a = new IEChannel(this, a);
    this._children.push(a)
};
window.AudioContext || window.webkitAudioContext || (sound = new IEChannel, sound.decodeAllSounds = function (a, 
b) {
    IETrack.decodeAllSounds(a, b)
});
function IETrack(a, b, c)
{
    IESound.call(this, a, b);
    try
    {
        this._source = document.createElement("audio"), this._source.src = IETrack._urls[systemLoader.gamePath("res/audio/" + ResourceLoader.AUDIO_FORMAT + "/" + Sound.map[b] + "." + ResourceLoader.AUDIO_FORMAT)], 
        this._source.onended = this._onended.bind(this), this._source.volume = this._globalVolume(), this._source.loop = !!c
    }
    catch (d) {
        logger.warn("Track: id=" + b + ", error=" + d)
    }
}
IETrack.prototype = Object.create(IESound.prototype);
IETrack.prototype.constructor = IETrack;
IETrack._urls = {};
IETrack.decodeAllSounds = function (a, b)
{
    for (var c in a)
    {
        if (!IETrack._urls[c]) {
            var d = new Blob([ResourceLoader.sounds[c]]);
            IETrack._urls[c] = URL.createObjectURL(d) 
        }
        b();
    }
};
IETrack.prototype._mute = function ()
{
    this._source.volume = 0;
};
IETrack.prototype._unmute = function ()
{
    this._source.volume = this._globalVolume();
};
IETrack.prototype._pause = function ()
{
    this._source.pause()
};
IETrack.prototype._resume = function ()
{
    this._muted || this._source.play()
};
IETrack.prototype._updateVolume = function ()
{
    this._source.volume = this._globalVolume();
};
IETrack.prototype.start = function ()
{
    this._globalPaused() || this._source.play()
};
IETrack.prototype.stop = function ()
{
    IESound.prototype.stop.call(this);
    this._source.pause()
};
IETrack.prototype._onended = function ()
{
    IESound.prototype.stop.call(this)
};
function InfoPopup(a)
{
    this._view = a;
    this._message = this._view.find(".message")
}
InfoPopup.prototype.show = function (a, b)
{
    this._view.show();
    this._message.html(a);
    this._skip = this.skip.bind(this, b);
    $(window).on("click", this._skip);
    keyboardListener.addHotkey(KeyboardListener.SKIP_POPUP_HOTKEY, null, this._skip)
};
InfoPopup.prototype.showById = function (a, b)
{
    var c = TextField.getText(a);
    this.show(c, b)
};
InfoPopup.prototype.skip = function (a)
{
    this._view.hide();
    a && a();
    $(window).off("click", this._skip);
    keyboardListener.deleteHotkey(KeyboardListener.SKIP_POPUP_HOTKEY, null)
};
function ResourceLoader(a, b)
{
    EventDispatcher.call(this);
    this.id = a;
    this.done = 0 == b.length;
    this.loading = !1;
    this.pixiLoader = new PIXI.loaders.Loader;
    for (var c = this._currentProgress = 0; c < b.length; c++)
    {
        var d = {}, e = b[c];
        if ("object" == typeof b[c])
        {
            if ("video" == b[c].type) 
            {
                if (SystemLoader.isEdge || SystemLoader.isIE11) {
                    continue;
                }
                e = "video/" + ResourceLoader.VIDEO_FORMAT + "/" + b[c].name + "." + ResourceLoader.VIDEO_FORMAT 
            }
            else if ("audio" == b[c].type)
            {
                e = "audio/" + ResourceLoader.AUDIO_FORMAT + "/" + b[c].name + "." + ResourceLoader.AUDIO_FORMAT;
            }
            else {
                continue;
            }
            d.url = "common" == this.id ? systemLoader.commonPath("res/" + e) : systemLoader.gamePath("res/" + e);
            e = d.url.substr(d.url.lastIndexOf("."));
            ".mp3" == e || ".mp4" == e || ".webm" == e || ".ogg" == e ? (d.loadType = PIXI.loaders.Resource.LOAD_TYPE.XHR, 
            d.xhrType = PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER) : ".mc" == e && (d.loadType = PIXI.loaders.Resource.LOAD_TYPE.XHR, 
            d.xhrType = PIXI.loaders.Resource.XHR_RESPONSE_TYPE.TEXT);
            this.pixiLoader.add(d);
        }
    }
}
ResourceLoader.prototype = Object.create(EventDispatcher.prototype);
ResourceLoader.prototype.constructor = ResourceLoader;
ResourceLoader.instances = {};
ResourceLoader.videos = {};
ResourceLoader.sounds = {};
ResourceLoader.movies = {};
ResourceLoader.VIDEO_FORMAT = "probably" == document.createElement("video").canPlayType('video/webm; codecs="vp8, vorbis"') ? "webm" : "mp4";
ResourceLoader.AUDIO_FORMAT = SystemLoader.isFirefox ? "ogg" : "mp3";
ResourceLoader.init = function (a)
{
    for (var b in a) {
        ResourceLoader.instances[b] = new ResourceLoader(b, a[b]);
    }
};
ResourceLoader.get = function (a)
{
    return ResourceLoader.instances[a];
};
ResourceLoader.prototype.start = function ()
{
    this.done || this.loading ? this.done && this.complete() : (this.loading = !0, this.pixiLoader.on("progress", 
    this._progress.bind(this)), this.pixiLoader.on("complete", this._complete.bind(this)), this.pixiLoader.before(function (a, 
    b) {
        a.url = systemLoader.addRevision(a.url);
        b()
    }), this.pixiLoader.after(function (a, b)
    {
        a.data && a.isImage && (PIXI.utils.BaseTextureCache[a.name] = PIXI.utils.BaseTextureCache[a.url], 
        PIXI.utils.TextureCache[a.name] = PIXI.utils.TextureCache[a.url]);
        b()
    }), this.pixiLoader.load(), this.dispatchEvent(new GameEvent(GameEvent.START)))
};
ResourceLoader.prototype._complete = function ()
{
    var a = [], b;
    for (b in this.pixiLoader.resources)
    {
        var c = this.pixiLoader.resources[b];
        if (c.error)
        {
            c.name.endsWith(".json_image") ? a.push(c.name.substr(0, c.name.length - 6)) : a.push({
                name : c.name, url : c.url, loadType : c.loadType, xhrType : c.xhrType 
            });
        }
        else
        {
            var d = b.substr(b.lastIndexOf("."));
            if (c.xhrType == PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER)
            {
                if (".mp4" == d || ".webm" == d) 
                {
                    var d = ".mp4" == d ? "video/mp4" : 'video/webm; codecs="vp8, vorbis"', c = new Blob([c.data], 
                    {
                        type : d 
                    }), c = URL.createObjectURL(c), e = document.createElement("video"), f = document.createElement("source");
                    f.src = c;
                    f.type = d;
                    e.appendChild(f);
                    ResourceLoader.videos[b] = e;
                    $(e).on("playing", e.pause.bind(e)) 
                }
                else {
                    if (".mp3" == d || ".ogg" == d) {
                        ResourceLoader.sounds[b] = c.data ;
                    }
                }
                else
                {
                    c.xhrType == PIXI.loaders.Resource.XHR_RESPONSE_TYPE.TEXT && ".mc" == d && (ResourceLoader.movies[b] = $(this.pixiLoader.resources[b].data));
                }
            }
        }
    }
    if (0 == a.length)
    {
        for (var g in PIXI.utils.TextureCache)
        {
            g.startsWith("common/") && (a = systemLoader.commonPath(g.replace("common/", "")), PIXI.utils.TextureCache[a] = PIXI.utils.TextureCache[g], 
            delete PIXI.utils.TextureCache[g]);
        }
        this.progress(100);
        a = new GameEvent(GameEvent.PROGRESS);
        a.progress = 100;
        this.dispatchEvent(a);
        sound.decodeAllSounds(ResourceLoader.sounds, function ()
        {
            this.done = !0;
            this.loading = !1;
            this.complete();
            if (this != ResourceLoader.instances.common && this != ResourceLoader.instances.preloader) for (var a in ResourceLoader.instances) {
                var b = ResourceLoader.instances[a];
                if (b.loading) {
                    break;
                }
                else {
                    b.done || b.start();
                }
            }
        }
        .bind(this))
    }
    else
    {
        this.pixiLoader.reset();
        for (g = 0; g < a.length; g++) {
            this.pixiLoader.add(a[g]);
        }
        setTimeout(this.pixiLoader.load.bind(this.pixiLoader), 5E3)
    }
};
ResourceLoader.prototype._progress = function (a, b)
{
    if (!b.error && this._currentProgress < a.progress)
    {
        this._currentProgress = a.progress;
        this.progress(this._currentProgress);
        var c = new GameEvent(GameEvent.PROGRESS);
        c.progress = this._currentProgress;
        this.dispatchEvent(c)
    }
};
ResourceLoader.prototype.complete = function () {};
ResourceLoader.prototype.progress = function (a) {};
HTMLVideoElement.prototype.start = function (a, b)
{
    $(this).off("playing timeupdate ended");
    $(this).one("timeupdate", a);
    $(this).one("ended", b);
    try {
        this.currentTime = 0
    }
    catch (c) {}
    this.play()
};
function Preloader()
{
    PIXI.Container.call(this);
    this.loader = ResourceLoader.get("main");
    var a = this;
    Preloader.INTRO_VIDEO || (userConfig.skip_intro = !0);
    if (!userConfig.skip_intro && gameConfig.intro)
    {
        this.intro = new PIXI.Container;
        this.intro.visible = !1;
        this.addChild(this.intro);
        this.intro.background = new PIXI.Container;
        this.intro.addChild(this.intro.background);
        var b = PIXI.Texture.fromVideoUrl(systemLoader.gamePath("res/video/" + ResourceLoader.VIDEO_FORMAT + "/" + Preloader.INTRO_VIDEO + "." + ResourceLoader.VIDEO_FORMAT));
        this.intro.videoSprite = new PIXI.Sprite(b);
        this.intro.videoSource = b.baseTexture.source;
        this.intro.addChild(this.intro.videoSprite);
        b = this.intro.videoSource;
        if (b instanceof HTMLVideoElement) {
            $(b).on("playing", b.pause.bind(b));
        }
        this.intro.checkbox = this.createIntroCheckbox();
        this.intro.checkbox.buttonMode = !0;
        this.intro.checkbox.interactive = !0;
        this.intro.checkbox.click = function ()
        {
            this.frame = 0 == this.frame ? 1 : 0;
            userConfig.skip_intro = 1 == this.frame;
            sound.play("main.checkbox.click")
        };
        this.intro.addChild(this.intro.checkbox);
        this.intro.button = this.createIntroButton();
        this.intro.button.click = function ()
        {
            a.stopIntro()
        };
        this.intro.addChild(this.intro.button)
    }
    this.featureList = new PIXI.Container;
    this.featureList.visible = !1;
    this.addChild(this.featureList);
    this.featureList.background = new PIXI.Container;
    this.featureList.addChild(this.featureList.background);
    this.featureList.progressContent = new PIXI.Container;
    this.featureList.addChild(this.featureList.progressContent);
    this.featureList.checkbox = this.createFeatureListCheckbox();
    this.featureList.checkbox.buttonMode = !0;
    this.featureList.checkbox.interactive = !0;
    this.featureList.checkbox.frame = userConfig.close_feature_list_on_load ? 1 : 0;
    this.featureList.checkbox.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        userConfig.close_feature_list_on_load = 1 == this.frame;
        sound.play("main.checkbox.click")
    };
    this.featureList.addChild(this.featureList.checkbox);
    this.featureList.button = this.createFeatureListButton();
    this.featureList.button.visible = !1;
    this.featureList.button.click = function ()
    {
        a.startGame()
    };
    this.featureList.addChild(this.featureList.button);
    this.init()
}
Preloader.prototype = Object.create(PIXI.Container.prototype);
Preloader.prototype.constructor = Preloader;
Preloader.INTRO_VIDEO = "";
Preloader.AUTOSTART_DELAY = 0;
Preloader.prototype.start = function (a)
{
    if (!userConfig.skip_intro && gameConfig.intro)
    {
        this.intro.visible = !0;
        this.featureList.visible = !1;
        try {
            this.currentTime = 0
        }
        catch (b) {}
        this.intro.videoSource.play();
        $(this.intro.videoSource).one("timeupdate", function ()
        {
            a();
            this.onstart()
        }
        .bind(this));
        $(this.intro.videoSource).off("playing");
        $(this.intro.videoSource).on("progress", this.onIntroProgress.bind(this));
        $(this.intro.videoSource).one("ended", this.stopIntro.bind(this))
    }
    else {
        this.featureList.visible = !0, this.loadMainResources(), a(), this.onstart();
    }
};
Preloader.prototype.onIntroProgress = function ()
{
    var a = Math.max(Math.min(systemLoader.configData.intro_loading_start_coef || 1, 1), 0);
    0 < this.intro.videoSource.buffered.length && this.intro.videoSource.buffered.end(0) >= this.intro.videoSource.duration * a && ($(this.intro.videoSource).off("progress"), 
    this.loadMainResources())
};
Preloader.prototype.stopIntro = function ()
{
    $(this.intro.videoSource).off("progress");
    this.intro.videoSource.pause();
    this.intro.visible = !1;
    this.featureList.visible = !0;
    this.loader.done ? this.connectToServer() : this.loadMainResources()
};
Preloader.prototype.connectToServer = function ()
{
    game.init();
    connection.init();
    serverData.start();
    clientData.start();
    clientData.addEventListener(GameEvent.ENTER_STATE, function ()
    {
        "init.ready" == clientData.state && (userConfig.close_feature_list_on_load ? this.startGame() : (this.featureList.progressContent.visible = !1, 
        this.featureList.button.visible = !0, this.autoStartGame()))
    }, this)
};
Preloader.prototype.startGame = function ()
{
    currencyFormatter.init();
    shifter.init();
    clientData.act("start");
    this.autoStartMovie && this.autoStartMovie.stop()
};
Preloader.prototype.loadMainResources = function ()
{
    var a = this;
    this.loader.complete = function ()
    {
        a.featureList.visible && a.connectToServer()
    };
    this.loader.start()
};
Preloader.prototype.init = function () {};
Preloader.prototype.onstart = function () {};
Preloader.prototype.autoStartGame = function ()
{
    var a = this, b = this.autoStartMovie = new MovieClip;
    b.addAction(function ()
    {
        a.startGame()
    },
    Preloader.AUTOSTART_DELAY);
    b.play(0)
};
Preloader.prototype.createIntroCheckbox = function ()
{
    throw Error("Should be overridden.");
};
Preloader.prototype.createIntroButton = function ()
{
    throw Error("Should be overridden.");
};
Preloader.prototype.createFeatureListCheckbox = function ()
{
    throw Error("Should be overridden.");
};
Preloader.prototype.createFeatureListButton = function ()
{
    throw Error("Should be overridden.");
};
function Postloader()
{
    PIXI.Container.call(this);
    this.background = Sprite.fromCommonFile("img/postloader/bg.png");
    this.background.x = 520;
    this.background.y = 396;
    this.addChild(this.background);
    this.progressBar = new PIXI.Container;
    this.progressBar.x = 519;
    this.progressBar.y = 392;
    this.addChild(this.progressBar);
    this.progressBar.addChild(Sprite.fromCommonFile("img/postloader/line.png"));
    this.progressBar.mask = Sprite.fromCommonFile("img/postloader/mask.png");
    this.progressBar.addChild(this.progressBar.mask);
    this.textReconnect = new TextField("POSTLOADER_RECONNECT");
    this.addChild(this.textReconnect);
    this.textRegular = new TextField("POSTLOADER_REGULAR");
    this.addChild(this.textRegular);
    this.onClientUpdate(function (a)
    {
        a.diff.state && (this.textReconnect.visible = "init" == clientData.state, this.textRegular.visible = !this.textReconnect.visible);
    });
    this.interactive = !0;
    this.hitArea = new PIXI.Rectangle(0, 0, 1400, 800)
}
Postloader.prototype = Object.create(PIXI.Container.prototype);
Postloader.prototype.constructor = Postloader;
Postloader.prototype.check = function (a, b)
{
    var c = ResourceLoader.instances[a];
    c.done ? b() : (Stage.MAIN.pause(), sound.get("sfx").pause(), c.complete = function ()
    {
        Stage.MAIN.resume();
        sound.get("sfx").resume();
        this.hide();
        b()
    }
    .bind(this), c.progress = this.progress.bind(this), c.start(), this.progress(c.pixiLoader.progress), 
    this.show());
};
Postloader.prototype.show = function ()
{
    var a = new PIXI.filters.BlurFilter;
    a.blur = 10;
    a.passes = 5;
    game.filters = systemLoader.preloader.filters = [a];
    this.visible = !0
};
Postloader.prototype.hide = function ()
{
    game.filters = systemLoader.preloader.filters = null;
    this.visible = !1
};
Postloader.prototype.progress = function (a)
{
    this.progressBar.mask.x = (a / 100 - 1) * this.progressBar.mask.width;
    this.textReconnect.token("value", Math.round(a));
    this.textRegular.token("value", Math.round(a))
};
function GameModule()
{
    PIXI.Container.call(this);
    this._initialized = !1
}
GameModule.prototype = Object.create(PIXI.Container.prototype);
GameModule.prototype.constructor = GameModule;
GameModule.prototype.init = function ()
{
    this._initialized ? logger.warn("GameModule.init: the module is already initialized.") : (this.addBaseContent(), 
    this.addCustomContent(), this._initialized = !0)
};
GameModule.prototype.addBaseContent = function () {};
GameModule.prototype.addCustomContent = function () {};
Object.defineProperties(GameModule.prototype, {
    initialized : {
        get : function ()
        {
            return this._initialized;
        }
    }
});
function SkipManager()
{
    this.skipArea = new PIXI.Container;
    this.skipArea.hitArea = new PIXI.Rectangle(0, 0, 1400, 800);
    this.skipArea.interactive = !0;
    this.skipArea.click = this._doSkip.bind(this);
    this._key = this._action = null
}
SkipManager.prototype.constructor = SkipManager;
SkipManager.prototype.set = function (a, b)
{
    this._action = a;
    b && (this._key = b, keyboardListener.addHotkey(b, this.skipArea, this.skipArea.click));
};
SkipManager.prototype.reset = function ()
{
    this._action = null;
    this._key && (keyboardListener.deleteHotkey(this._key, this.skipArea), this._key = null);
};
SkipManager.prototype._doSkip = function ()
{
    var a = this._action;
    a && (this.reset(), a())
};
function Toolbar()
{
    GameModule.call(this);
    this.modules = {};
    this._modulesWidth = {};
    clientData.addEventListener(GameEvent.UPDATE, this._onClientUpdate, this);
    this.stage = new Stage;
    this.stage.root.addChild(this);
    this.stage.addEventListener(GameEvent.RESIZE, this._resize.bind(this));
    $(window).on("webkitfullscreenchange mozfullscreenchange MSFullscreenChange", this._update.bind(this));
    this.visible = !1
}
Toolbar.prototype = Object.create(GameModule.prototype);
Toolbar.prototype.constructor = Toolbar;
Toolbar.prototype.addBaseContent = function ()
{
    this.modules.fullscreen_on = Button.createStandartCommonButton("img/toolbar/fullscreen_on");
    this.modules.fullscreen_on.click = this._fullscreenOn.bind(this);
    this._modulesWidth.fullscreen_on = 26;
    this.addChild(this.modules.fullscreen_on);
    this.modules.fullscreen_off = Button.createStandartCommonButton("img/toolbar/fullscreen_off");
    this.modules.fullscreen_off.click = this._fullscreenOff.bind(this);
    this._modulesWidth.fullscreen_off = 26;
    this.addChild(this.modules.fullscreen_off);
    this.modules.sound_on = Button.createStandartCommonButton("img/toolbar/sound_on");
    this.modules.sound_on.click = this._soundOn.bind(this);
    this._modulesWidth.sound_on = 26;
    this.addChild(this.modules.sound_on);
    this.modules.sound_off = Button.createStandartCommonButton("img/toolbar/sound_off");
    this.modules.sound_off.click = this._soundOff.bind(this);
    this._modulesWidth.sound_off = 26;
    this.addChild(this.modules.sound_off);
    this.modules.exit = Button.createStandartCommonButton("img/toolbar/exit");
    this.modules.exit.click = this._exit.bind(this);
    this._modulesWidth.exit = 26;
    this.addChild(this.modules.exit);
    this.modules.currency = new TextField("TOOLBAR_CURRENCY");
    this._modulesWidth.currency = 1 == currencyFormatter.currency.length ? 16 : 2 == currencyFormatter.currency.length ? 21 : 26;
    this.addChild(this.modules.currency);
    this.modules.time = new TextField("TOOLBAR_TIME");
    this._modulesWidth.time = 46;
    this.addChild(this.modules.time);
    this._addSettings();
    this._addClock()
};
Toolbar.prototype._update = function ()
{
    var a = void 0 != document.webkitIsFullScreen ? document.webkitIsFullScreen : void 0 != document.mozFullScreen ? document.mozFullScreen : void 0 != document.msFullscreenElement, 
    b = gameConfig.toolbar[a ? "fullscreen" : "nofullscreen"];
    b && b instanceof Array || (logger.warn("Toolbar:_update: wrong toolbar config"), b = []);
    for (var c in this.modules) {
        this.modules[c].visible = !1;
    }
    for (var d = [], e = 0, f = b.length - 1; 0 <= f; f--)
    {
        c = b[f];
        switch (c)
        {
            case "sound":
                c = sound.muted ? "sound_on" : "sound_off";
                break;
            case "fullscreen":
                null == navigator.userAgent.match(/MSIE/) && (c = a ? "fullscreen_off" : "fullscreen_on");
                break;
            case "quickspin":
            case "animation":
                d.unshift(c);
                c = "settings";
                break;
            case "time":
            case "currency":
            case "exit":
            case "autoplay":
                break;
            default:
                logger.warn("Toolbar:_update: unexpected module " + c)
        }
        this.modules[c].visible || (e -= this._modulesWidth[c], this.modules[c].visible = !0, this.modules[c].x = e)
    }
    this.modules.settings.decorate(d);
};
Toolbar.prototype._addSettings = function ()
{
    this.modules.settings = Button.createStandartCommonButton("img/toolbar/settings");
    this._modulesWidth.settings = 26;
    this.addChild(this.modules.settings);
    this.modules.settings.panel = new PIXI.Container;
    this.modules.settings.panel.y = 20;
    this.modules.settings.panel.interactive = !0;
    this.modules.settings.panel.visible = !1;
    this.addChild(this.modules.settings.panel);
    var a = new PIXI.Container;
    this.modules.settings.panel.addChild(a);
    var b = new PIXI.Graphics;
    b.beginFill(13158, .6);
    b.drawRect(0, 0, 120, 60);
    a.addChild(b);
    a.addChild(new TextField("TOOLBAR_ANIMATION"));
    var c = Sprite.fromCommonFiles(["img/toolbar/animation/off.png", "img/toolbar/animation/on.png"]);
    c.x = 29;
    c.y = 30;
    c.buttonMode = !0;
    c.interactive = !0;
    c.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        userConfig.skip_animations = !userConfig.skip_animations;
        sound.play("main.checkbox.click")
    };
    a.addChild(c);
    var d = new PIXI.Container;
    this.modules.settings.panel.addChild(d);
    b = new PIXI.Graphics;
    b.beginFill(13158, .6);
    b.drawRect(0, 0, 120, 60);
    d.addChild(b);
    d.addChild(new TextField("TOOLBAR_QUICKSPIN"));
    var e = Sprite.fromCommonFiles(["img/toolbar/quickspin/off.png", "img/toolbar/quickspin/on.png"]);
    e.x = 29;
    e.y = 30;
    e.buttonMode = !0;
    e.interactive = !0;
    e.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        userConfig.quick_spin_enabled = !userConfig.quick_spin_enabled;
        sound.play("main.checkbox.click")
    };
    d.addChild(e);
    this.modules.settings.click = function ()
    {
        e.frame = userConfig.quick_spin_enabled ? 1 : 0;
        c.frame = userConfig.skip_animations ? 0 : 1;
        this.panel.x = Math.min(this.x - 60, - 120);
        this.panel.visible = !this.panel.visible
    };
    this.modules.settings.decorate = function (b)
    {
        d.visible = !1;
        a.visible = !1;
        for (var c = 0; c < b.length; c++) {
            var e = "animation" == b[c] ? a : "quickspin" == b[c] ? d : null;
            e.visible = !0;
            e.y = 60 * c;
        }
    };
    this.stage.addEventListener(GameEvent.CLICK, function (a)
    {
        !this.panel.visible || this.panel.getBounds().contains(a.x, a.y) || this.getBounds().contains(a.x, 
        a.y) || (this.panel.visible = !1)
    },
    this.modules.settings)
};
Toolbar.prototype._addClock = function ()
{
    var a = new PIXI.Container;
    a.x = 700;
    a.y = 392;
    var b = new MovieClip(this.stage);
    b.addTween((new Tween(a, function (a, b)
    {
        a.visible = 1 <= b;
    }, 0)).move(1, 4E3));
    b.addAction(b.play, 14800, 4E3);
    var c = Sprite.fromCommonFile("img/toolbar/clock/dial.png");
    c.pivot.x = 37;
    c.pivot.y = 37;
    a.addChild(c);
    c = Sprite.fromCommonFile("img/toolbar/clock/glow.png");
    c.pivot.x = 37;
    c.pivot.y = 37;
    a.addChild(c);
    b.addTween((new Tween(c, Tween.ROTATION_FUNC, .7 * Math.PI)).move(0, 4E3).move(24 * Math.PI, 10800));
    c = Sprite.fromCommonFile("img/toolbar/clock/arrow_1.png");
    c.pivot.x = 6;
    c.pivot.y = 22;
    a.addChild(c);
    b.addTween((new Tween(c, Tween.ROTATION_FUNC, 0)).move(0, 4E3).move(2 * Math.PI, 10800));
    c = Sprite.fromCommonFile("img/toolbar/clock/arrow_2.png");
    c.pivot.x = 6;
    c.pivot.y = 27;
    a.addChild(c);
    b.addTween((new Tween(c, Tween.ROTATION_FUNC, 0)).move(0, 4E3).move(24 * Math.PI, 10800));
    c = Sprite.fromCommonFile("img/toolbar/clock/center.png");
    c.pivot.x = 10;
    c.pivot.y = 10;
    a.addChild(c);
    for (c = 0; 12 > c; c++)
    {
        var d = Sprite.fromCommonFile("img/toolbar/clock/grade.png");
        d.pivot.x = 8;
        d.pivot.y = 36;
        d.rotation = c * Math.PI / 6;
        a.addChild(d);
        b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 900 * c + 4E3, Tween.JUMP));
        d = Sprite.fromCommonFile("img/toolbar/clock/grade_glow.png");
        d.pivot.x = 8;
        d.pivot.y = 36;
        d.rotation = c * Math.PI / 6;
        a.addChild(d);
        for (var d = (new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 75 * c + 4E3, Tween.JUMP), e = 0; 12 > e; e++) {
            d.move(-1, 75).move(1, 825, Tween.JUMP);
        }
        b.addTween(d)
    }
    b.stop(0);
    this.modules.clock = a;
    this.stage.root.addChild(a);
    connection.addEventListener(GameEvent.REQUEST, function ()
    {
        b.play(0)
    });
    connection.addEventListener(GameEvent.RESPONSE, function ()
    {
        b.stop(0)
    });
    connection.addEventListener(GameEvent.ERROR, function ()
    {
        b.stop(0)
    })
};
Toolbar.prototype._fullscreenOn = function ()
{
    (document.body.webkitRequestFullScreen || document.body.mozRequestFullScreen || document.body.msRequestFullscreen).call(document.body)
};
Toolbar.prototype._fullscreenOff = function ()
{
    (document.webkitCancelFullScreen || document.mozCancelFullScreen || document.msExitFullscreen).call(document)
};
Toolbar.prototype._soundOn = function ()
{
    sound.unmute();
    this._update()
};
Toolbar.prototype._soundOff = function ()
{
    sound.mute();
    this._update()
};
Toolbar.prototype._exit = function ()
{
    "playson" == gameConfig.environment && systemLoader.environment.closeGame("USER_CLICK")
};
Toolbar.prototype._resize = function ()
{
    var a = this.stage.getViewPort();
    this.x = 1400 - a.x;
    this.y = a.y;
    this.scale.x = this.scale.y = 1 / a.scale;
};
Toolbar.prototype._updateTime = function ()
{
    var a = new Date, b = a.getHours(), a = a.getMinutes();
    this.modules.time.token("value", (10 > b ? "0" + b : b) + ":" + (10 > a ? "0" + a : a));
    b = 6E4 - (new Date).getTime() % 6E4;
    setTimeout(this._updateTime.bind(this), b)
};
Toolbar.prototype._onClientUpdate = function (a)
{
    "init" == a.diff.state && (this.init(), this.modules.currency.token("value", currencyFormatter.currency), 
    this._updateTime(), this._update(), this._resize(), this.visible = !0)
};
var gameToolbar = new Toolbar;
function PlaysonEnvironment()
{
    this.infoPopup = new InfoPopup($("#info_popup"));
    this._notifyGameManager({
        name : "load", data : []
    });
    this._callbacks = null
}
PlaysonEnvironment.REQUEST_TIMEOUT = 3E3;
PlaysonEnvironment.prototype.init = function ()
{
    connection.addEventListener(GameEvent.ERROR, function ()
    {
        this._notifyGameManager({
            name : "disconnect", data : []
        });
        this.infoPopup.showById("CONNECTION_LOST", function ()
        {
            gameConfig.perform_retry ? connection.retry() : this.closeGame("CONNECTION_LOST")
        }
        .bind(this))
    }, this);
    clientData.addEventListener(GameEvent.UPDATE, function (a)
    {
        var b;
        if (a.diff.state)
        {
            switch (clientData.state)
            {
                case "error.exit":
                    "sessionlost" == serverData.status && this._notifyGameManager({
                        name : "sessionLost", data : []
                    });
                    this._showPopup(serverData.errorCode, 
                    {
                        ignore : function ()
                        {
                            b = "sessionlost" == serverData.status ? "SESSION_LOST" : "SERVER_ERROR";
                            Stage.MAIN.pause();
                            this.infoPopup.showById(b, function ()
                            {
                                this.closeGame(b)
                            }
                            .bind(this))
                        }
                        .bind(this),
                        open : function ()
                        {
                            Stage.MAIN.pause()
                        },
                        close : function ()
                        {
                            this.closeGame(b)
                        }
                    });
                    break;
                case "spin.warning":
                    this._notifyGameManager({
                        name : "gameCashLow", data : []
                    });
                    slotConfig.auto_adjust && clientData.getTotalBet() <= clientData.getAvailableBalance() ? (this.infoPopup.showById("POPUP_BET_REDUCED", 
                    function ()
                    {
                        clientData.act("close")
                    }), sound.get("sfx").play("main.low.cash")) : this._showPopup(serverData.errorCode, 
                    {
                        ignore : function ()
                        {
                            this.infoPopup.showById("POPUP_NO_MONEY", function ()
                            {
                                clientData.act("close")
                            });
                            sound.get("sfx").play("main.low.cash")
                        }
                        .bind(this), open : function () {},
                        close : function ()
                        {
                            clientData.act("close")
                        }
                    });
                    break;
                case "init.ready":
                    this._notifyGameManager({
                        name : "loaded", data : []
                    });
                    break;
                case "spin.start":
                    clientData.freespinsActive ? this._notifyGameManager({
                        name : "freespin_START", data : [clientData.freespinsNumber]
                    }) : (this._notifyGameManager({
                        name : "gameBet", data : [clientData.getTotalBet()]
                    }), this._notifyGameManager({
                        name : "mainspin_START", data : []
                    }));
                    break;
                case "bonus.start":
                    this._notifyGameManager({
                        name : "bonus_START", data : []
                    });
                    break;
                case "bonus.stop":
                    this._notifyGameManager({
                        name : "bonus_END", data : [serverData.bonusPaid]
                    })
            }
            switch (a.diff.state)
            {
                case "spin.stop":
                    clientData.freespinsActive ? this._notifyGameManager({
                        name : "freespin_END", data : [serverData.roundPaid]
                    }) : this._notifyGameManager({
                        name : "mainspin_END", data : [serverData.roundPaid]
                    })
            }
        }
        void 0 !== a.diff.balance && (this._notifyGameManager({
            name : "gameChangeCash", data : [clientData.balance]
        }), 0 == clientData.balance && this._notifyGameManager({
            name : "gameCashNone", data : []
        }))
    }, this);
    Preloader.prototype.onstart = function ()
    {
        this._notifyGameManager({
            name : "startProgress", data : []
        })
    }
    .bind(this);
    ResourceLoader.get("main").addEventListener(GameEvent.START, function (a)
    {
        this._notifyGameManager({
            name : "loadProgress", data : [0]
        })
    }, this);
    ResourceLoader.get("main").addEventListener(GameEvent.PROGRESS, function (a)
    {
        this._notifyGameManager({
            name : "loadProgress", data : [a.progress]
        })
    }, this);
    window.onerror = function (a, b, c)
    {
        this.reportError("INTERNAL_ERROR", a, {
            url : b, lineNumber : c, symbolNumber : 0, errorObj : {}
        });
        Stage.MAIN.pause();
        this.infoPopup.showById("INTERNAL_ERROR", function ()
        {
            this.closeGame("INTERNAL_ERROR")
        }
        .bind(this))
    }
    .bind(this);
    window.addEventListener("message", this._onMessage.bind(this))
};
PlaysonEnvironment.prototype.closeGame = function (a)
{
    connection.reset();
    sound.stop();
    Stage.MAIN.pause();
    paytable.stage.pause();
    giftspins.stage.pause();
    $("body").hide();
    this._notifyGameManager({
        name : "unloading", data : [a]
    });
    this._notifyGameManager({
        name : "unloaded", data : []
    })
};
PlaysonEnvironment.prototype.reportError = function (a, b, c)
{
    gameConfig.report_url && $.ajax(
    {
        type : "POST", url : gameConfig.report_url, data : 
        {
            code : a, message : b, details : JSON.stringify(c), session : String(gameConfig.session), 
            gameId : String(gameConfig.name), configId : systemLoader.parameters.config_id || ""
        },
        dataType : "text", timeout : PlaysonEnvironment.REQUEST_TIMEOUT
    })
};
PlaysonEnvironment.prototype._showPopup = function (a, b)
{
    window.parent != window ? (this._callbacks = b, window.parent.postMessage(JSON.stringify({
        name : "popup", data : [ {
            statusErrorCode : a
        }]
    }), "*")) : b.ignore()
};
PlaysonEnvironment.prototype._notifyGameManager = function (a)
{
    window.parent != window ? window.parent.postMessage(JSON.stringify(a), "*") : logger.info(JSON.stringify(a))
};
PlaysonEnvironment.prototype._onMessage = function (a)
{
    var b = JSON.parse(a.data).name;
    a = JSON.parse(a.data).data;
    switch (b)
    {
        case "freeze":
            Stage.pause = !0;
            sound.get("sfx").pause();
            break;
        case "unfreeze":
            Stage.pause = !1;
            sound.get("sfx").resume();
            break;
        case "popup":
            this._callbacks[a[0]]();
            break;
        default:
            logger.info("Unhandled message from GM: " + b)
    }
};
function LegaEnvironment() {}
LegaEnvironment.prototype.init = function () {};
var debugGUI;
clientData.addEventListener(GameEvent.UPDATE, function (a)
{
    "init" == a.diff.state && !debugGUI && gameConfig.debug && setTimeout(function ()
    {
        debugGUI = new dat.GUI;
        debugGUI.add(Stage.MAIN, "playbackRate").min(.05).max(4).step(.05);
        debugGUI.add(shifter, "open").name("shifter");
        debugGUI.add(userConfig, "resetConfig").name("reset user config");
        $(debugGUI.domElement).parent().css("right", "auto");
        $(debugGUI.domElement).parent().css("left", "50px")
    }, 0)
});
function Shifter()
{
    this.view = $("#shifter");
    this.combinations = [];
    this.editedCombinationId = this.combinationEditor = null
}
Shifter.CombinationEditor = null;
Shifter.prototype.initControlButtons = function ()
{
    var a = this.view.find(".okBtn"), b = this.view.find(".closeBtn"), c = this.view.find(".addComb"), 
    d = this.view.find(".clearCombs"), e = this.view.find(".sendCombs"), f = this.view.find(".saveCombs");
    c.hide();
    b.on("click", function ()
    {
        this.close()
    }
    .bind(this));
    a.on("click", function ()
    {
        var a = this.view.find(".combText").val();
        a && this.addCombination(a.split(","))
    }
    .bind(this));
    d.on("click", function ()
    {
        this.combinations = [];
        this.saveCombinations();
        this.renderCombinations()
    }
    .bind(this));
    c.on("click", function ()
    {
        this.openCombinationEditor(null)
    }
    .bind(this));
    e.on("click", function ()
    {
        serverData.sendShiftCombinations(this.combinations);
        this.close()
    }
    .bind(this));
    f.on("click", function ()
    {
        this.saveInFile()
    }
    .bind(this));
    a = document.getElementById("shifter");
    a.addEventListener("dragover", function (a)
    {
        a.stopPropagation();
        a.preventDefault();
        a.dataTransfer.dropEffect = "copy";
    },
    !1);
    a.addEventListener("drop", function (a)
    {
        a.stopPropagation();
        a.preventDefault();
        this.renderFile(a.dataTransfer.files[0])
    }
    .bind(this), !1)
};
Shifter.prototype.saveInFile = function ()
{
    for (var a = "", b = 0; b < this.combinations.length; b++)
    {
        for (var c = 0; c < this.combinations[b].length; c++)
        {
            a += c + 1 == this.combinations[b].length ? this.combinations[b][c] : this.combinations[b][c] + ",";
        }
        a += b + 1 == this.combinations.length ? "" : "\r\n"
    }
    a = new Blob([a], {
        type : "text/plain"
    });
    b = document.createElement("a");
    b.download = "ShifterCombinations";
    b.innerHTML = "Download File";
    null != window.webkitURL ? b.href = window.webkitURL.createObjectURL(a) : (b.href = window.URL.createObjectURL(a), 
    b.onclick = function (a)
    {
        document.body.removeChild(a.target)
    },
    b.style.display = "none", document.body.appendChild(b));
    b.click()
};
Shifter.prototype.renderFile = function (a)
{
    var b = new FileReader;
    b.readAsText(a);
    b.onload = function (a)
    {
        a = a.target.result;
        a = a.split("\n");
        for (var b = 0; b < a.length; b++) {
            this.addCombination(a[b].split(","));
        }
    }
    .bind(this)
};
Shifter.prototype.saveCombinations = function ()
{
    userConfig.shifter_config = this.combinations;
};
Shifter.prototype.loadCombinations = function ()
{
    this.combinations = userConfig.shifter_config;
};
Shifter.prototype.renderCombinations = function ()
{
    for (var a = this.view.find(".combList ul"), b = "", c = 0; c < this.combinations.length; c++) {
        b += '<li data-combination-id="' + c + '">' + this.combinations[c].join(", ") + "</li>";
    }
    a.html(b);
    this.saveCombinations()
};
Shifter.prototype.addCombination = function (a)
{
    a = a.map(function (a)
    {
        return a.toString();
    });
    this.editedCombinationId ? this.combinations[this.editedCombinationId] = a : this.combinations.push(a);
    this.renderCombinations();
    this.combinationEditor && this.closeCombinationEditor()
};
Shifter.prototype.editCombination = function (a)
{
    this.combinationEditor && (this.editedCombinationId = a, this.openCombinationEditor(this.combinations[a]));
};
Shifter.prototype.openCombinationEditor = function (a)
{
    a && this.combinationEditor.setCombination(a);
    this.combinationEditorView.removeClass("hidden")
};
Shifter.prototype.closeCombinationEditor = function ()
{
    this.combinationEditorView.addClass("hidden");
    this.editedCombinationId = null;
};
Shifter.prototype.init = function ()
{
    this.initControlButtons();
    this.loadCombinations();
    this.renderCombinations();
    this.initCombinationEditor();
    this.view.find(".combList").delegate("li", "click", function (a)
    {
        a.stopPropagation();
        a = $(a.currentTarget).attr("data-combination-id");
        this.editCombination(a)
    }
    .bind(this))
};
Shifter.prototype.initCombinationEditor = function ()
{
    if (Shifter.CombinationEditor)
    {
        this.combinationEditor = new Shifter.CombinationEditor;
        this.combinationEditorView = this.view.find("#combinationEditor");
        this.combinationEditorView.find(".container").append(this.combinationEditor.view);
        var a = this.combinationEditorView.find(".okCombBtn"), b = this.combinationEditorView.find(".cancelCombBtn");
        a.on("click", function (a)
        {
            a.stopPropagation();
            a = this.combinationEditor.getCombination();
            this.addCombination(a)
        }
        .bind(this));
        b.on("click", function ()
        {
            this.closeCombinationEditor()
        }
        .bind(this));
        this.view.find(".addComb").show()
    }
};
Shifter.prototype.open = function ()
{
    this.view.show();
    $(".game").hide();
    Stage.MAIN.pause();
    sound.pause()
};
Shifter.prototype.close = function ()
{
    this.view.hide();
    $(".game").show();
    Stage.MAIN.resume();
    sound.resume()
};
var shifter = new Shifter;
Sound.map["main.background"] = "game_ambience";
Sound.map["main.reels.spin"] = "reel_spin";
Sound.map["main.reels.stop"] = "reel_stop";
Sound.map["main.buttons.click"] = "click";
Sound.map["main.buttons.arrow"] = "arrow_click";
Sound.map["main.buttons.over"] = "over";
Sound.map["main.buttons.spin"] = "spin_click";
Sound.map["main.buttons.stop"] = "stop_click";
Sound.map["main.buttons.maxbet"] = "maxbet_click";
Sound.map["main.buttons.paytable"] = "paytable_click";
Sound.map["main.buttons.auto"] = "auto_click";
Sound.map["main.minipaytable"] = "mini_paytable";
Sound.map["main.lines.over"] = "lines_over";
Sound.map["main.lines.win"] = "win_lines";
Sound.map["main.total.win"] = "win_combinations";
Sound.map["main.total.win.counter"] = "counter";
Sound.map["main.auto.popup"] = "auto_popup";
Sound.map["main.low.cash"] = "low_cash";
Sound.map["paytable.buttons.click"] = "click";
Sound.map["paytable.buttons.back"] = "paytable_back_click";
Sound.map["paytable.background"] = "paytable_ambience";
Sound.map["paytable.buttons.arrow"] = "paytable_button";
sound.create("music");
sound.get("music").create("main");
sound.get("music").create("paytable");
sound.create("sfx");
function SlotConfig()
{
    AbstractConfig.call(this);
    this._name = "SlotConfig"
}
SlotConfig.prototype = Object.create(AbstractConfig.prototype);
SlotConfig.prototype.constructor = SlotConfig;
SlotConfig.prototype.properties = 
{
    columns : 1, rows : 1, lines : 1, lines_set : [1], lines_layout : [[1]], coins : [1], default_bet : 0, 
    autoplay_list : [5, 10, 25, 50, 100, 250, 500, 999], autoplay_loss_limit_list : [5, 10, 25, 50, 100, 
    250, 500, 999], autoplay_single_win_limit_list : [5, 10, 25, 50, 100, 250, 500, 999], autoplay_number : 50, 
    autoplay_license : "none", autoplay_bonus_proceed :!0, extended_spin_round :!1, auto_adjust :!0, no_gift_spins :!0, 
    progress :!1, delay_main_spin : 0, delay_main_freespin : 0, delay_auto_spin : 0, delay_auto_freespin : 0, 
    pause_auto_spin_win : 300, pause_auto_spin_lose : 300, pause_free_spin_win : 300, pause_free_spin_lose : 300, 
    game_reel_start_interval : 100, game_reel_stop_interval : 600, game_reelset_move_time : 250, game_reelset_min_move_time : 250
};
SlotConfig.prototype.loadMainConfig = function (a, b, c)
{
    this._data.coins = this._getValue(a.coins, this.properties.coins);
    this._data.default_bet = this._getValue(a.default_bet, this.properties.default_bet, AbstractConfig.IS_NUMBER);
    this._data.default_bet = this.coins.length > this.default_bet ? this.default_bet : 0;
    this._data.autoplay_list = this._getValue(a.autoplay_list, this.properties.autoplay_list);
    this._data.autoplay_number = this._getValue(a.autoplay_number, this.properties.autoplay_number, AbstractConfig.IS_NUMBER);
    this._data.autoplay_license = this._getValue(a.autoplay_license, this.properties.autoplay_license, 
    AbstractConfig.IS_STRING);
    this._data.autoplay_bonus_proceed = this._getValue(a.autoplay_bonus_proceed, this.properties.autoplay_bonus_proceed, 
    AbstractConfig.IS_BOOLEAN);
    this._data.auto_adjust = this._getValue(a.auto_adjust, this.properties.auto_adjust, AbstractConfig.IS_BOOLEAN);
    this._data.no_gift_spins = this._getValue(a.no_gift_spins, this.properties.no_gift_spins, AbstractConfig.IS_BOOLEAN);
    this._data.autoplay_loss_limit_list = this._getValue(a.autoplay_loss_limit_list, this.properties.autoplay_loss_limit_list);
    this._data.autoplay_single_win_limit_list = this._getValue(a.autoplay_single_win_limit_list, this.properties.autoplay_single_win_limit_list);
    this._data.delay_main_spin = this._getValue(a.delay_main_spin, this.properties.delay_main_spin, AbstractConfig.IS_NUMBER);
    this._data.delay_main_freespin = this._getValue(a.delay_main_freespin, this.properties.delay_main_freespin, 
    AbstractConfig.IS_NUMBER);
    this._data.delay_auto_spin = this._getValue(a.delay_auto_spin, this.properties.delay_auto_spin, AbstractConfig.IS_NUMBER);
    this._data.delay_auto_freespin = this._getValue(a.delay_auto_freespin, this.properties.delay_auto_freespin, 
    AbstractConfig.IS_NUMBER);
    this._data.pause_auto_spin_win = this._getValue(a.pause_auto_spin_win, this.properties.pause_auto_spin_win, 
    AbstractConfig.IS_NUMBER);
    this._data.pause_auto_spin_lose = this._getValue(a.pause_auto_spin_lose, this.properties.pause_auto_spin_lose, 
    AbstractConfig.IS_NUMBER);
    this._data.pause_free_spin_win = this._getValue(a.pause_free_spin_win, this.properties.pause_free_spin_win, 
    AbstractConfig.IS_NUMBER);
    this._data.pause_free_spin_lose = this._getValue(a.pause_free_spin_lose, this.properties.pause_free_spin_lose, 
    AbstractConfig.IS_NUMBER);
    this._data.game_reel_start_interval = this._getValue(a.game_reel_start_interval, this.properties.game_reel_start_interval, 
    AbstractConfig.IS_NUMBER);
    this._data.game_reel_stop_interval = this._getValue(a.game_reel_stop_interval, this.properties.game_reel_stop_interval, 
    AbstractConfig.IS_NUMBER);
    this._data.game_reelset_move_time = this._getValue(a.game_reelset_move_time, this.properties.game_reelset_move_time, 
    AbstractConfig.IS_NUMBER);
    this._data.game_reelset_min_move_time = this._getValue(a.game_reelset_min_move_time, this.properties.game_reelset_min_move_time, 
    AbstractConfig.IS_NUMBER);
    for (a = 0; a < this._data.autoplay_list.length - 1 && Number(this._data.autoplay_list[a]) < Number(this._data.autoplay_number); a++); this._data.autoplay_number = this._data.autoplay_list[a]; }; var slotConfig = new SlotConfig; ServerData.prototype.defaultData.bet = 1; ServerData.prototype.defaultData.lines = 1; ServerData.prototype.defaultData.paid = 0; ServerData.prototype.defaultData.freespinsPaid = 0; ServerData.prototype.defaultData.roundPaid = 0; ServerData.prototype.defaultData.coins = null; ServerData.prototype.defaultData.defaultBet = 0; ServerData.prototype.defaultData.payouts = []; ServerData.prototype.defaultData.roundWin = !1; ServerData.prototype.defaultData.matrix = [[1, 
1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]];
ServerData.prototype.defaultData.wins = [];
ServerData.prototype.defaultData.reelSet = 1;
ServerData.prototype.defaultData.freespinsNumber = 0;
ServerData.prototype.defaultData.freespinsActive = !1;
ServerData.prototype.defaultData.freespinsAwarded = 0;
ServerData.prototype.defaultData.gamble_round =- 1;
ServerData.prototype.defaultData.bonus_round =- 1;
ServerData.prototype.defaultData.giftspins = {};
ServerData.prototype.defaultData.giftspinsLastProgress = null;
ServerData.NORMAL_WIN = 0;
ServerData.BIG_WIN = 1;
ServerData.SUPER_WIN = 2;
ServerData.prototype.getWinLevel = function ()
{
    return ServerData.NORMAL_WIN;
};
ServerData.prototype.hasBonusWins = function ()
{
    return 0 < this.freespinsAwarded;
};
ServerData.prototype.createBetMessage = function (a, b, c)
{
    var d = 1;
    for (c = ""; d < b; c += d++ + ","); c += b; b = connection.createMessage("bet"); b.append('<bet coin="1" shift="0,0,0,0,0"/>'); b.find("bet").attr("cash", 
    a);
    b.find("bet").attr("lines", c);
    b.append("<debug />");
    b.find("debug").attr("user_cash", serverData.balance);
    b.find("debug").attr("bet_cash", clientData.getTotalBet());
    0 <= clientData.giftspins && (a = $("<gift2-spins/>"), a.attr("id", clientData.giftspins), b.append(a));
    return b;
};
ServerData.prototype.spin = function ()
{
    connection.send(this.createBetMessage(clientData.bet, clientData.lines, clientData.freespinsActive ? "free" : "normal"))
};
ServerData.prototype.parseStart = function (a)
{
    this.parseCurrency(a);
    this.bet = slotConfig.coins[slotConfig.default_bet];
    this.lines = slotConfig.lines;
    for (var b = a.find("combinations combination"), c = 0; c < b.length; c++) {
        this.payouts.push($(b[c]));
    }
    this.reelSet = Number(a.find("shift").attr("reel_set"));
    this.reelSets = [];
    b = a.find("reels,reels2,reels3,reels4,reels5,reels6,reels7,reels8,reels_b");
    for (c = 0; c < b.length; c++)
    {
        var d = Number($(b[c]).attr("id"));
        this.reelSets[d] = [];
        for (var e = $(b[c]).find("reel"), f = 0; f < e.length; f++)
        {
            var g = $(e[f]).attr("layout") || $(e[f]).attr("symbols");
            g && (g = g.split(",").map(Number), this.reelSets[d][$(e[f]).attr("id")] = g);
        }
    }
    this.parseMatrix(a);
    this.defaultData.matrix = this.matrix.slice();
};
ServerData.prototype.parseReconnect = function (a)
{
    this.parseStart(a);
    a = a.find("spin_cmd");
    0 < a.length && (this.status = a.attr("status"), this.parseBet(a));
};
ServerData.prototype.parseBet = function (a)
{
    this.bet = Number(a.find("game").attr("line-bet"));
    this.lines = Number(a.find("game").attr("lines").split(",").pop());
    this.reelSet = Number(a.find("shift").attr("reel_set"));
    this.wins = [];
    this.roundWin = 0 < a.find(">wins").length;
    this.gamble_round =- 1;
    for (var b = a.find(">wins>win"), c = 0; c < b.length; c++)
    {
        var d = $(b[c]), e = d.attr("layout").split("").map(Number), f = d.attr("comb_symbols").split(",").map(Number), 
        g = Number(d.attr("line"));
        0 <= g && this.wins.push(
        {
            number : g, layout : e, paid : Number(d.attr("cash")), comb : Number(d.attr("comb")) || 0, 
            comb_symbols : f
        })
    }
    this.wins = this.wins.sort(function (a, b)
    {
        return a.paid === b.paid ? a.number - b.number : a.paid - b.paid;
    });
    b = a.find(">wins>newwin");
    for (c = 0; c < b.length; c++)
    {
        d = $(b[c]), e = d.attr("layout").split("").map(Number), this.wins.push({
            layout : e, paid : Number(d.attr("cash") || 0), comb : d.attr("comb") 
        });
    }
    this.freespinsActive = 0 == Number(a.find("game").attr("cash-bet") || 0);
    this.freespinsNumber = Number(a.find("game").attr("bonus_games") || 0);
    this.freespinsPaid = Number(a.find("game").attr("free-win") || 0);
    this.roundPaid = Number(a.find("game").attr("cash-win"));
    this.paid = this.freespinsActive ? this.freespinsPaid : this.roundPaid;
    c = a.find("wins newwin[comb=freespin]");
    this.freespinsAwarded = 0 < c.length ? Number(c.attr("freespins")) : this.freespinsActive ? 0 : this.freespinsNumber;
    this.parseMatrix(a)
};
ServerData.prototype.parseShifter = function (a)
{
    this.status = a.find("status").attr("result");
};
ServerData.prototype.parseMatrix = function (a)
{
    var b = a.find("shift");
    if (b.attr("reel1"))
    {
        for (a = 1; a <= slotConfig.columns; a++) 
        {
            this.matrix[a - 1] = b.attr("reel" + a).split(",");
            for (var c = 1; c <= slotConfig.rows; c++)
            {
                if (this.matrix[a - 1][c - 1] = Number(this.matrix[a - 1][c - 1]), isNaN(this.matrix[a - 1][c - 1])) {
                    throw Error("Incorrect matrix received from server.");
                };
            }
        }
    }
    else
    {
        var d = b.attr("server").split(","), b = this.reelSets[b.attr("reel_set")];
        for (a = 1; a <= slotConfig.columns; a++)
        {
            for (var e = (b[a].length - Number(d[a - 1])) % b[a].length, c = 1; c <= slotConfig.rows; c++) {
                this.matrix[a - 1][c - 1] = Number(b[a][e]), e = (e + 1) % b[a].length;
            }
        }
    }
};
ServerData.prototype.stopFreespins = function ()
{
    this.wins = [];
    this.matrix = this.defaultData.matrix.slice();
    this.dispatchEvent(new GameEvent(GameEvent.UPDATE))
};
ServerData.prototype.createShiftMessage = function (a)
{
    a = a.slice();
    for (var b = [], c = [], d = [], e = [], f = 0; f < a.length; f++)
    {
        var g = a[f].slice();
         - 1 != g[0].indexOf("b:") ? (g[0] = g[0].replace("b:", ""), d.push(g)) :- 1 != g[0].indexOf("g:") ? (g[0] = g[0].replace("g:", 
        ""), c.push(g)) :- 1 != g[0].indexOf("s:") ? (g[0] = g[0].replace("s:", ""), e.push(g)) : b.push(g)
    }
    d.length && this.sendBonusShiftMessage(d);
    c.length && this.sendGambleShiftMessage(c);
    e.length && this.sendSpecialShiftMessage(e);
    return this.createSpinShiftMessage(b);
};
ServerData.prototype.createSpinShiftMessage = function (a)
{
    var b = game.doubleReel && (1 == this.reelSet || 3 == this.reelSet), c = b && 2 !== this.reelSet ? 'game="doublereel"' : "", 
    d = connection.createMessage("pool"), c = $('<game id="' + gameConfig.name + '" ' + c + " />");
    d.append(c);
    for (var e = 0; e < a.length; e++) {
        var f = a[e].join(", ") + (b ? ", 0, 0, 0, 0, 0" : "");
        c.append('<shift value="' + f + '" />')
    }
    return d;
};
ServerData.prototype.sendBonusShiftMessage = function (a)
{
    throw Error("Should be implemented");
};
ServerData.prototype.sendSpecialShiftMessage = function (a)
{
    throw Error("Should be implemented");
};
ServerData.prototype.sendGambleShiftMessage = function (a)
{
    var b = connection.createMessage("shifter"), c = $('<game game="chance"/>');
    a = $('<shift value="' + a.join(",") + '"/>');
    c.append(a);
    b.append(c);
    connection.send(b)
};
ServerData.prototype._createConnectMessage = ServerData.prototype.createConnectMessage;
ServerData.prototype.createConnectMessage = function ()
{
    var a = this._createConnectMessage();
    a.append("<gift version='1.5'/>");
    return a;
};
ServerData.prototype.hasNewGiftspinsOffers = function ()
{
    for (var a in this.giftspins) {
        if ("new" == this.giftspins[a].status) {
            return!0;
        }
        return!1;
    }
};
ServerData.prototype.getActiveGiftspins = function ()
{
    for (var a in this.giftspins)
    {
        if ("started" == this.giftspins[a].status || "finished" == this.giftspins[a].status || "deleted" == this.giftspins[a].status) {
            return a;
        }
        return - 1;
    }
};
ServerData.prototype.getAvailableGiftspinsOffers = function ()
{
    var a = [], b;
    for (b in this.giftspins)
    {
        "finished" != this.giftspins[b].status && "deleted" != this.giftspins[b].status && a.push(b);
    }
    a.sort(function (a, b)
    {
        if (this.giftspins[a].status == this.giftspins[b].status)
        {
            var e = Number(this.giftspins[a].date_expire.replace(/-/g, ""));
            return Number(this.giftspins[b].date_expire.replace(/-/g, "")) - e
        }
        return "new" == this.giftspins[a].status ?- 1 : 1
    }
    .bind(this));
    return a;
};
ServerData.prototype.sendGiftspinsActivate = function ()
{
    var a = connection.createMessage("gift2-activate");
    a.append("<gift/>");
    a.find("gift").attr("id", clientData.giftspins);
    connection.send(a)
};
ServerData.prototype.stopGiftspins = function ()
{
    this.restoreProgress();
    this.wins = [];
    this.giftspinsLastProgress = null;
    this.dispatchEvent(new GameEvent(GameEvent.UPDATE))
};
ServerData.prototype.restoreProgress = function () {};
ServerData.prototype.sendGiftspinsPostpone = function (a)
{
    for (var b = connection.createMessage("gift2-postpone"), c = 0; c < a.length; c++)
    {
        var d = a[c];
        if ("new" == this.giftspins[d].status) {
            this.giftspins[d].status = "suspended";
            var e = $("<gift/>");
            e.attr("id", d);
            b.append(e)
        }
    }
    connection.send(b)
};
ServerData.prototype.sendGiftspinsDelete = function (a)
{
    a ? delete this.giftspins[a] : a = clientData.giftspins;
    var b = connection.createMessage("gift2-delete");
    b.append("<gift/>");
    b.find("gift").attr("id", a);
    connection.send(b)
};
ServerData.prototype.parseGiftspins = function (a)
{
    for (var b = a.find(">gift2-spins"), c = 0; c < b.length; c++)
    {
        var d = $(b[c]), e = Number(d.attr("gift-id"));
        this.giftspins[e] = 
        {
            count_total : Number(d.attr("count-total")), count_left : Number(d.attr("count-left")), cash_win_total : Number(d.attr("cash-win-total")), 
            status : d.attr("status"), date_expire : d.attr("date-expire"), bet : Number(d.find("bet").attr("cash")), 
            lines : d.find("bet").attr("lines").split(",").length
        };
        if ("finished" == this.giftspins[e].status || "deleted" == this.giftspins[e].status)
        {
            this.giftspinsLastProgress = a.find("reconnect" == a.attr("command") ? ">game" : "game_type");
        }
    }
};
ServerData.prototype.parseFailedGiftspins = function (a)
{
    this.parseGiftspins(a);
    0 <= clientData.giftspins && (0 < this.giftspinsLastProgress.length && this.restoreProgress(), this.giftspinsLastProgress = null);
};
serverData.addParser("connect", function (a)
{
    var b = a.find("extra>stakeIncrement");
    0 < b.length && (this.coins = b.text().split(",").map(Number));
    a = a.find("extra>defaultBet");
    0 < a.length && (this.defaultBet = Number(a.text()));
});
serverData.addParser("start", serverData.parseStart);
serverData.addParser("bet", serverData.parseBet);
serverData.addParser("reconnect", serverData.parseReconnect);
serverData.addErrorParser("bet", function (a)
{
    this.parseFailedGiftspins(a);
    this.roundPaid = this.paid = 0;
    this.wins = [];
    this.matrix = this.defaultData.matrix.slice();
});
serverData.addErrorParser("gift2-activate", serverData.parseFailedGiftspins);
serverData.addParser(/.+/, serverData.parseGiftspins);
serverData.addParser("gift2-activate", function (a)
{
    this.roundPaid = this.paid = 0;
    this.wins = [];
});
serverData.addParser("gift2-delete", function (a)
{
    0 <= clientData.giftspins && (this.giftspinsLastProgress = a.find("game_type"), this.restoreProgress(), 
    this.giftspinsLastProgress = null, delete this.giftspins[clientData.giftspins]);
});
ClientData.prototype.defaultData.showWinnings = !1;
ClientData.prototype.defaultData.autoplayActive = !1;
ClientData.prototype.defaultData.autoplayNumber = 0;
ClientData.prototype.defaultData.autoplayRemains = 0;
ClientData.prototype.defaultData.autoplayLossLimit = 0;
ClientData.prototype.defaultData.autoplaySingleWinLimit = 0;
ClientData.prototype.defaultData.autoplayWin = 0;
ClientData.prototype.defaultData.autoplayShowPanel = !1;
ClientData.prototype.defaultData.bet = 1;
ClientData.prototype.defaultData.paid = 0;
ClientData.prototype.defaultData.freespinsPaid = 0;
ClientData.prototype.defaultData.lines = 1;
ClientData.prototype.defaultData.freespinsActive = !1;
ClientData.prototype.defaultData.freespinsNumber = 0;
ClientData.prototype.defaultData.spinStartTime =- 1E8;
ClientData.prototype.defaultData.betIdleTime = ClientData.prototype.defaultData.spinStartTime + 1;
ClientData.prototype.defaultData.giftspins =- 1;
ClientData.prototype.defaultData.giftspinsNumber =- 1;
ClientData.prototype.defaultData.betBeforeGiftspins = 0;
ClientData.prototype.defaultData.linesBeforeGiftspins = 0;
ClientData.prototype.adjustBet = function ()
{
    for (var a = this.bet, b = this.lines, c = slotConfig.coins.length - 1; 0 <= c && !(this.bet = slotConfig.coins[c], 
    this.getTotalBet() <= this.getAvailableBalance());
    c--);
    for (c = slotConfig.lines_set.length - 1; 0 <= c && !(this.lines = slotConfig.lines_set[c], this.getTotalBet() <= this.getAvailableBalance()); c--); this.getTotalBet() > this.getAvailableBalance() && (this.bet = a, 
    this.lines = b);
    this.diff();
    return this.getTotalBet() <= this.getAvailableBalance();
};
ClientData.prototype.getTotalBet = function ()
{
    return this.bet * this.lines;
};
ClientData.prototype.getFreespinsBet = function ()
{
    return this.getTotalBet();
};
ClientData.prototype.getAvailableBalance = function ()
{
    return serverData.balance;
};
ClientData.prototype.increaseBet = function ()
{
    var a = slotConfig.coins.indexOf(this.bet), a = Math.min(a + 1, slotConfig.coins.length - 1);
    this.bet = slotConfig.coins[a];
    this.showWinnings = !1;
    this.diff()
};
ClientData.prototype.decreaseBet = function ()
{
    var a = slotConfig.coins.indexOf(this.bet), a = Math.max(a - 1, 0);
    this.bet = slotConfig.coins[a];
    this.showWinnings = !1;
    this.diff()
};
ClientData.prototype.increaseAutoplay = function ()
{
    var a = slotConfig.autoplay_list.indexOf(this.autoplayNumber), a = Math.min(a + 1, slotConfig.autoplay_list.length - 1);
    this.autoplayNumber = slotConfig.autoplay_list[a];
    this.showWinnings = !1;
    this.diff()
};
ClientData.prototype.decreaseAutoplay = function ()
{
    var a = slotConfig.autoplay_list.indexOf(this.autoplayNumber), a = Math.max(a - 1, 0);
    this.autoplayNumber = slotConfig.autoplay_list[a];
    this.showWinnings = !1;
    this.diff()
};
ClientData.prototype.maxBet = function ()
{
    this.bet = slotConfig.coins[slotConfig.coins.length - 1];
    this.showWinnings = !1;
    this.diff()
};
ClientData.prototype.increaseLines = function ()
{
    var a = slotConfig.lines_set.indexOf(this.lines), a = Math.min(a + 1, slotConfig.lines_set.length - 1);
    this.lines = slotConfig.lines_set[a];
    this.showWinnings = !1;
    this.diff()
};
ClientData.prototype.decreaseLines = function ()
{
    var a = slotConfig.lines_set.indexOf(this.lines), a = Math.max(a - 1, 0);
    this.lines = slotConfig.lines_set[a];
    this.showWinnings = !1;
    this.diff()
};
ClientData.prototype.spin = function ()
{
    this.act("spin")
};
ClientData.prototype.startAutoplay = function ()
{
    this.autoplayActive = !0;
    this.betIdleTime = this.defaultData.betIdleTime;
    this.autoplayRemains = 0 <= this.giftspins ? this.autoplayRemains - 1 : this.autoplayNumber - 1;
    this.autoplayWin = 0;
    this.autoplayShowPanel = !1;
    this.act("spin")
};
ClientData.prototype.proceedAutoplay = function ()
{
    this.autoplayRemains--;
    this.act("spin")
};
ClientData.prototype.stopAutoplay = function ()
{
    this.autoplayActive = !1;
    this.autoplayShowPanel =- 1 == this.giftspins && "none" != slotConfig.autoplay_license;
    this.diff()
};
ClientData.prototype.startGamble = function ()
{
    this.act("gamble.start")
};
ClientData.prototype.spinDelay = function ()
{
    return Stage.MAIN.time >= Math.max(clientData.spinStartTime + (this.autoplayActive ? this.freespinsActive ? slotConfig.delay_auto_freespin : slotConfig.delay_auto_spin : this.freespinsActive ? slotConfig.delay_main_freespin : slotConfig.delay_main_spin), 
    clientData.betIdleTime + (this.freespinsActive ? 0 < serverData.paid ? slotConfig.pause_free_spin_win : slotConfig.pause_free_spin_lose : this.autoplayActive ? 0 < serverData.paid ? slotConfig.pause_auto_spin_win : slotConfig.pause_auto_spin_lose : 0))
};
clientData.addTransition(
{
    from : "init", to : "bet.win", type : "auto", priority :- 1,
    guard : function ()
    {
        return 0 < serverData.roundPaid;
    }
});
clientData.addTransition({
    from : "init", to : "bet.idle", type : "auto", priority :- 2
});
clientData.addTransition(
{
    from : "bet.idle", to : "spin.start", type : "action", action : "spin",
    guard : function ()
    {
        return!clientData.freespinsActive && clientData.spinDelay()
    }
});
clientData.addTransition(
{
    from : "bet.idle", to : "spin.start", type : "action", action : "free.spin",
    guard : function ()
    {
        return clientData.freespinsActive && clientData.spinDelay();
    }
});
clientData.addTransition(
{
    from : "bet.idle", to : "freespins.end", type : "auto", priority : 2,
    guard : function ()
    {
        return clientData.freespinsActive && 0 == clientData.freespinsNumber;
    }
});
clientData.addTransition(
{
    from : "spin.start", to : "spin.stop", fail : "spin.fail", excess : "spin.warning", type : "server", 
    mixed :!0, action : serverData.spin
});
clientData.addTransition(
{
    from : "spin.fail", to : "error.exit", type : "auto",
    guard : function ()
    {
        return clientData.freespinsActive;
    },
    priority : 2
});
clientData.addTransition(
{
    from : "spin.fail", to : "spin.giftspins.deleted", type : "auto",
    guard : function ()
    {
        return 0 <= clientData.giftspins;
    },
    priority : 1
});
clientData.addTransition({
    from : "spin.fail", to : "spin.warning", type : "auto"
});
clientData.addTransition({
    from : "spin.warning", to : "spin.stop", type : "action", action : "close"
});
clientData.addTransition({
    from : "spin.giftspins.deleted", to : "spin.stop", type : "auto"
});
clientData.addTransition(
{
    from : "spin.stop", to : "bet.win", type : "auto",
    guard : function ()
    {
        return 0 < serverData.wins.length;
    },
    priority : 0
});
clientData.addTransition({
    from : "spin.stop", to : "bet.idle", type : "auto", priority :- 1
});
clientData.addTransition({
    from : "bet.win", to : "bet.idle", type : "auto", priority :- 1
});
clientData.addTransition(
{
    from : "bet.win", to : "bet.freewin", type : "auto", priority : 2,
    guard : function ()
    {
        return 0 < serverData.freespinsAwarded;
    }
});
clientData.addTransition({
    from : "freespins.start", to : "bet.idle", type : "auto"
});
clientData.addTransition(
{
    from : "freespins.end", to : "freespins.stop", type : "server", action : serverData.stopFreespins
});
clientData.addTransition({
    from : "freespins.stop", to : "bet.idle", type : "auto"
});
clientData.addTransition({
    from : "bet.idle", to : "giftspins.start", type : "action", action : "giftspins.start"
});
clientData.addTransition(
{
    from : "giftspins.start", to : "bet.idle", type : "server", action : serverData.sendGiftspinsActivate, 
    fail : "giftspins.overdue"
});
clientData.addTransition({
    from : "giftspins.overdue", to : "bet.idle", type : "auto"
});
clientData.addTransition({
    from : "bet.idle", to : "giftspins.delete", type : "action", action : "giftspins.delete"
});
clientData.addTransition(
{
    from : "giftspins.delete", to : "bet.idle", type : "server", action : serverData.sendGiftspinsDelete, 
    fail : "bet.idle"
});
clientData.addTransition(
{
    from : "bet.idle", to : "giftspins.stop", type : "auto", priority : 1,
    guard : function ()
    {
        return 0 <= clientData.giftspins && ("finished" == serverData.giftspins[clientData.giftspins].status || "deleted" == serverData.giftspins[clientData.giftspins].status);
    }
});
clientData.addTransition({
    from : "giftspins.stop", to : "bet.idle", type : "server", action : serverData.stopGiftspins
});
clientData.setTransitionCallback(/^init$/, /.+/, function ()
{
    this.balance = serverData.balance;
    this.bet = serverData.bet;
    this.lines = serverData.lines;
    this.paid = serverData.roundPaid;
    this.freespinsActive = serverData.freespinsActive;
    this.freespinsNumber = serverData.freespinsNumber - serverData.freespinsAwarded;
    this.autoplayNumber = this.autoplayRemains = slotConfig.autoplay_number;
    this.giftspins = serverData.getActiveGiftspins();
    this.giftspinsNumber = 0 <= this.giftspins ? serverData.giftspins[this.giftspins].count_left : 0;
});
clientData.setTransitionCallback(/.+/, /spin.start/, function ()
{
    this.currentWin =- 1;
    this.paid = 0;
    this.balance = serverData.balance;
    this.freespinsActive ? this.freespinsNumber = serverData.freespinsNumber - 1 : 0 <= this.giftspins ? this.giftspinsNumber--: 0 <= this.balance - this.getTotalBet() && (this.balance -= this.getTotalBet());
    this.microround = !0;
    this.spinStartTime = Stage.MAIN.time;
    this.showWinnings = !1;
    this.autoplayActive && (-1 == this.giftspins && 0 == this.autoplayRemains || 0 <= this.giftspins && 0 == this.giftspinsNumber) && (this.autoplayActive = !1, 
    this.autoplayShowPanel =- 1 == this.giftspins && "none" != slotConfig.autoplay_license)
});
clientData.setTransitionCallback(/spin.stop/, /.+/, function ()
{
    slotConfig.extended_spin_round || (this.balance = serverData.balance, this.microround = !1);
    this.autoplayActive && (this.autoplayWin += serverData.roundPaid - this.getTotalBet(), this.getTotalBet() > this.getAvailableBalance() &&- 1 == this.giftspins && !this.freespinsActive || serverData.hasBonusWins() && !slotConfig.autoplay_bonus_proceed || this.autoplayLossLimit && this.autoplayWin - this.getTotalBet() <- this.autoplayLossLimit || this.autoplaySingleWinLimit && serverData.roundPaid >= this.autoplaySingleWinLimit) && (this.autoplayActive = !1, 
    this.autoplayShowPanel =- 1 == this.giftspins && "none" != slotConfig.autoplay_license);
    clientData.balance = serverData.balance;
});
clientData.setTransitionCallback(/bet.win/, /.+/, function ()
{
    this.paid = serverData.roundPaid;
});
clientData.setTransitionCallback(/.+/, /bet.idle/, function ()
{
    this.betIdleTime < this.spinStartTime && (this.betIdleTime = Stage.MAIN.time);
    this.showWinnings = 0 < serverData.wins.length && !this.autoplayActive && !this.freespinsActive && !userConfig.skip_animations;
});
clientData.setTransitionCallback(/freespins.start/, /bet.idle/, function ()
{
    this.freespinsActive || (this.showWinnings = !1, this.freespinsActive = !0, this.paid = this.freespinsPaid = 0);
    this.freespinsNumber = serverData.freespinsNumber;
});
clientData.setTransitionCallback(/freespins.stop/, /.+/, function ()
{
    this.freespinsActive = !1
});
clientData.setTransitionCallback(/spin.start/, /spin.warning/, function ()
{
    this.balance = serverData.balance;
    this.microround = !1;
    slotConfig.auto_adjust && this.adjustBet();
    this.autoplayShowPanel = this.autoplayShowPanel || this.autoplayActive;
    this.autoplayActive = !1
});
clientData.setTransitionCallback(/spin.start/, /spin.fail/, function ()
{
    this.autoplayActive = this.autoplayShowPanel = !1;
});
clientData.setTransitionCallback(/giftspins.start/, /bet.idle/, function ()
{
    this.betBeforeGiftspins = this.bet;
    this.linestBeforeGiftspins = this.lines;
    this.bet = serverData.giftspins[this.giftspins].bet;
    this.lines = serverData.giftspins[this.giftspins].lines;
    this.giftspinsNumber = serverData.giftspins[this.giftspins].count_total;
});
clientData.setTransitionCallback(/giftspins.(stop|delete)/, /bet.idle/, function ()
{
    this.bet = this.betBeforeGiftspins || slotConfig.coins[slotConfig.default_bet];
    this.lines = this.linesBeforeGiftspins || slotConfig.lines;
    this.giftspins =- 1
});
clientData.setTransitionCallback(/spin.giftspins.deleted/, /spin.stop/, function ()
{
    this.bet = this.betBeforeGiftspins || slotConfig.coins[slotConfig.default_bet];
    this.lines = this.linesBeforeGiftspins || slotConfig.lines;
    this.giftspins =- 1
});
clientData.setTransitionCallback(/giftspins.overdue/, /bet.idle/, function ()
{
    this.giftspins =- 1
});
clientData.addEventListener(GameEvent.EXIT_STATE, function ()
{
    "init.connect" == clientData.state && serverData.coins && (slotConfig._data.coins = serverData.coins, 
    slotConfig._data.default_bet = serverData.defaultBet);
});
clientData.addEventListener(GameEvent.ENTER_STATE, function ()
{
    "spin.fail" == clientData.state && clientData.exitState()
});
function Game()
{
    GameModule.call(this)
}
Game.prototype = Object.create(GameModule.prototype);
Game.prototype.constructor = Game;
Game.prototype.addBaseContent = function ()
{
    this.skipManager = new SkipManager;
    this.addChild(this.skipManager.skipArea);
    this.main = new Main;
    this.main.init();
    this.addChild(this.main);
    this.freespins = new Freespins;
    this.freespins.visible = !1;
    this.addChild(this.freespins);
    if (this.gamble = this.createGamble()) {
        this.gamble.visible = !1, this.addChild(this.gamble);
    }
    if (this.bonus = this.createBonus()) {
        this.bonus.visible = !1, this.addChild(this.bonus);
    }
};
Game.prototype.createGamble = function ()
{
    return null;
};
Game.prototype.createBonus = function ()
{
    return null;
};
Object.defineProperties(Game.prototype, 
{
    current : 
    {
        get : function ()
        {
            return this.main.visible ? this.main : this.freespins.visible ? this.freespins : this.main;
        }
    }
});
var game = new Game;
function SlotModule()
{
    GameModule.call(this)
}
SlotModule.SKIP_WIN_MOVIE_TIME = 1E6;
SlotModule.prototype = Object.create(GameModule.prototype);
SlotModule.prototype.constructor = SlotModule;
SlotModule.prototype.addBaseContent = function ()
{
    this.background = new PIXI.Container;
    this.addChild(this.background);
    this.reels = this.createReels();
    this.addChild(this.reels);
    this.paylines = new PIXI.Container;
    for (var a = 1; a <= slotConfig.lines; a++) {
        this.paylines[a] = this.createPayline(a), this.paylines.addChild(this.paylines[a]);
    }
    this.addChild(this.paylines);
    this.animationContainer = new PIXI.Container;
    this.animationContainer.x = this.reels.x;
    this.animationContainer.y = this.reels.y;
    for (a = 1; a <= slotConfig.columns; a++)
    {
        this.animationContainer[a] = new PIXI.Container, this.animationContainer[a].x = this.reels[a].x, 
        this.animationContainer[a].y = this.reels[a].y, this.animationContainer.addChild(this.animationContainer[a]);
    }
    this.addChild(this.animationContainer);
    this.ui = this.createUI();
    this.addChild(this.ui);
    this.lineWinPanel = new PIXI.Container;
    this.lineWinPanel.visible = !1;
    this.addChild(this.lineWinPanel);
    this.totalWinPanel = new PIXI.Container;
    this.totalWinPanel.visible = !1;
    this.addChild(this.totalWinPanel)
};
SlotModule.prototype.createPayline = function (a)
{
    return new Payline(a);
};
SlotModule.prototype.createUI = function ()
{
    throw Error("SlotModule.createUI: should be overridden.");
};
SlotModule.prototype.createReels = function ()
{
    throw Error("SlotModule.createReels: should be redeclared.");
};
SlotModule.prototype.createLineWinPanel = function (a, b)
{
    throw Error("SlotModule.createLineWinPanel: Should be redeclared.");
};
SlotModule.prototype.createTotalWinPanel = function (a, b)
{
    throw Error("SlotModule.createTotalWinPanel: Should be redeclared.");
};
function Main()
{
    SlotModule.call(this)
}
Main.prototype = Object.create(SlotModule.prototype);
Main.prototype.constructor = Main;
Main.prototype.addBaseContent = function ()
{
    SlotModule.prototype.addBaseContent.call(this);
    this.miniPaytable = new MiniPaytable(this.reels);
    this.addChildAt(this.miniPaytable, 2)
};
Main.prototype.createUI = function ()
{
    var a = new PIXI.Container;
    this.messageBox = this.createMessageBox();
    a.addChild(this.messageBox);
    var b = a.totalBetField = new TextField("VALUE_TOTAL_BET");
    b.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.getTotalBet()))
    });
    a.addChild(b);
    b = a.balanceField = new TextField("VALUE_BALANCE");
    b.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.balance))
    });
    a.addChild(b);
    b = a.paidField = new TextField("VALUE_PAID");
    b.onClientUpdate(function ()
    {
        this.visible = 0 < clientData.paid;
        this.token("value", currencyFormatter.format(clientData.paid))
    });
    a.addChild(b);
    b = a.spinButton = this.createSpinButton();
    b.click = function ()
    {
        clientData.spin()
    };
    b.addHotkey(KeyboardListener.SPIN_HOTKEY);
    b.onClientUpdate(function (a)
    {
        this.visible =- 1 == clientData.state.indexOf("spin.");
        this.enabled = clientData.isActionAvailable("spin") && !clientData.autoplayActive;
    });
    a.addChild(b);
    b = a.spinStopButton = this.createSpinStopButton();
    b.click = function ()
    {
        game.main.reels.quickStop = !0;
        this.enabled = !1
    };
    b.addHotkey(KeyboardListener.SPIN_HOTKEY);
    b.onClientUpdate(function (a)
    {
        this.visible = 0 == clientData.state.indexOf("spin.");
        this.enabled = !(game.current.reels.quickStop || userConfig.quick_spin_enabled)
    });
    a.addChild(b);
    b = a.maxBetButton = this.createMaxBetButton();
    b.click = function (a)
    {
        clientData.maxBet()
    };
    b.onClientUpdate(function (a)
    {
        this.enabled = clientData.isActionAvailable("spin") && !clientData.autoplayActive &&- 1 == clientData.giftspins;
    });
    a.addChild(b);
    b = a.gambleButton = this.createGambleButton();
    b.click = function (a)
    {
        clientData.startGamble()
    };
    b.onClientUpdate(function (a)
    {
        this.visible = clientData.isActionAvailable("gamble.start");
    });
    a.addChild(b);
    b = a.paytableButton = this.createPaytableButton();
    b.click = function (a)
    {
        paytable.show()
    };
    b.addHotkey(KeyboardListener.PAYTABLE_HOTKEY);
    a.addChild(b);
    b = a.linesPanel = new PIXI.Container;
    a.addChild(b);
    var c = a.linesIncreaseButton = this.createLinesIncreaseButton();
    c.change = function ()
    {
        clientData.increaseLines()
    };
    c.onClientUpdate(function (a)
    {
        this.enabled = clientData.lines < slotConfig.lines_set[slotConfig.lines_set.length - 1] && "bet.idle" == clientData.state && !clientData.autoplayActive &&- 1 == clientData.giftspins;
    });
    b.addChild(c);
    c = a.linesDecreaseButton = this.createLinesDecreaseButton();
    c.change = function ()
    {
        clientData.decreaseLines()
    };
    c.onClientUpdate(function (a)
    {
        this.enabled = clientData.lines > slotConfig.lines_set[0] && "bet.idle" == clientData.state && !clientData.autoplayActive &&- 1 == clientData.giftspins;
    });
    b.addChild(c);
    c = a.linesField = new TextField("VALUE_LINES");
    c.onClientUpdate(function ()
    {
        this.token("value", clientData.lines + "")
    });
    b.addChild(c);
    b = a.betPanel = new PIXI.Container;
    a.addChild(b);
    c = a.betIncreaseButton = this.createBetIncreaseButton();
    c.change = function ()
    {
        clientData.increaseBet()
    };
    c.addHotkey(KeyboardListener.BET_INCREASE_HOTKEY);
    c.onClientUpdate(function (a)
    {
        this.enabled = clientData.bet < slotConfig.coins[slotConfig.coins.length - 1] && "bet.idle" == clientData.state && !clientData.autoplayActive &&- 1 == clientData.giftspins;
    });
    b.addChild(c);
    c = a.betDecreaseButton = this.createBetDecreaseButton();
    c.change = function ()
    {
        clientData.decreaseBet()
    };
    c.addHotkey(KeyboardListener.BET_DECREASE_HOTKEY);
    c.onClientUpdate(function (a)
    {
        this.enabled = clientData.bet > slotConfig.coins[0] && "bet.idle" == clientData.state && !clientData.autoplayActive &&- 1 == clientData.giftspins;
    });
    b.addChild(c);
    c = a.betField = new TextField("VALUE_BET");
    c.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.bet))
    });
    b.addChild(c);
    b = a.autoplayPanel = new PIXI.Container;
    a.addChild(b);
    c = a.autoplayField = new TextField("VALUE_AUTOPLAY");
    c.onClientUpdate(function ()
    {
        this.token("value", 0 <= clientData.giftspins ? clientData.giftspinsNumber : clientData.autoplayActive ? clientData.autoplayRemains : clientData.autoplayNumber)
    });
    b.addChild(c);
    c = a.autoplayStartButton = this.createAutoplayStartButton();
    c.click = function (a)
    {
        "none" == slotConfig.autoplay_license || gameToolbar.autoplayAdvancedPanel.visible || 0 <= clientData.giftspins ? gameToolbar.autoplayAdvancedPanel.start() : gameToolbar.autoplayAdvancedPanel.show()
    };
    c.addHotkey(KeyboardListener.AUTOPLAY_HOTKEY);
    c.onClientUpdate(function (a)
    {
        this.visible = !clientData.autoplayActive;
        this.enabled = clientData.isActionAvailable("spin") && (-1 == clientData.giftspins && 0 < clientData.autoplayNumber || 0 <= clientData.giftspins && 0 < clientData.giftspinsNumber);
    });
    b.addChild(c);
    c = a.autoplayStopButton = this.createAutoplayStopButton();
    c.click = function (a)
    {
        gameToolbar.autoplayAdvancedPanel.stop()
    };
    c.addHotkey(KeyboardListener.AUTOPLAY_HOTKEY);
    c.onClientUpdate(function (a)
    {
        this.visible = clientData.autoplayActive;
        this.enabled = !clientData.freespinsActive && "freespins.start" != clientData.state && "freespins.stop" != clientData && 0 != serverData.status.indexOf("bonus")
    });
    b.addChild(c);
    c = a.autoplayIncreaseButton = this.createAutoplayIncreaseButton();
    c.change = function (a)
    {
        clientData.increaseAutoplay()
    };
    c.onClientUpdate(function (a)
    {
        this.enabled = clientData.autoplayNumber < slotConfig.autoplay_list[slotConfig.autoplay_list.length - 1] && "bet.idle" == clientData.state && !clientData.autoplayActive &&- 1 == clientData.giftspins;
    });
    b.addChild(c);
    c = a.autoplayDecreaseButton = this.createAutoplayDecreaseButton();
    c.change = function (a)
    {
        clientData.decreaseAutoplay()
    };
    c.onClientUpdate(function (a)
    {
        this.enabled = clientData.autoplayNumber > slotConfig.autoplay_list[0] && "bet.idle" == clientData.state && !clientData.autoplayActive &&- 1 == clientData.giftspins;
    });
    b.addChild(c);
    return a;
};
Main.prototype.createSpinButton = function ()
{
    throw Error("Main.createSpinButton: should be redeclared.");
};
Main.prototype.createSpinStopButton = function ()
{
    throw Error("Main.createSpinStopButton: should be redeclared.");
};
Main.prototype.createMaxBetButton = function ()
{
    throw Error("Main.createMaxBetButton: should be redeclared.");
};
Main.prototype.createAutoplayStartButton = function ()
{
    throw Error("Main.createAutoplayStartButton: should be redeclared.");
};
Main.prototype.createAutoplayStopButton = function ()
{
    throw Error("Main.createAutoplayStopButton: should be redeclared.");
};
Main.prototype.createGambleButton = function ()
{
    throw Error("Main.createGambleButton: should be redeclared.");
};
Main.prototype.createPaytableButton = function ()
{
    throw Error("Main.createPaytableButton: should be redeclared.");
};
Main.prototype.createBetIncreaseButton = function ()
{
    throw Error("Main.createBetIncreaseButton: should be redeclared.");
};
Main.prototype.createBetDecreaseButton = function ()
{
    throw Error("Main.createBetDecreaseButton: should be redeclared.");
};
Main.prototype.createAutoplayIncreaseButton = function ()
{
    throw Error("Main.createAutoplayIncreaseButton: should be redeclared.");
};
Main.prototype.createAutoplayDecreaseButton = function ()
{
    throw Error("Main.createAutoplayDecreaseButton: should be redeclared.");
};
Main.prototype.createLinesIncreaseButton = function ()
{
    throw Error("Main.createLinesIncreaseButton: should be redeclared.");
};
Main.prototype.createLinesDecreaseButton = function ()
{
    throw Error("Main.createLinesDecreaseButton: should be redeclared.");
};
Main.prototype.createMessageBox = function ()
{
    throw Error("Main.createMesageBox: should be redeclared.");
};
function Freespins()
{
    SlotModule.call(this)
}
Freespins.prototype = Object.create(SlotModule.prototype);
Freespins.prototype.constructor = Freespins;
Freespins.prototype.PAYTABLE_PAGE_NUMBER = 1;
Freespins.prototype.createUI = function ()
{
    var a = new PIXI.Container, b = a.totalBetField = new TextField("VALUE_FREESPINS_TOTAL_BET");
    b.token("value", currencyFormatter.format(clientData.getFreespinsBet()));
    b.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.getFreespinsBet()))
    });
    a.addChild(b);
    b = a.balanceField = new TextField("VALUE_FREESPINS_BALANCE");
    b.token("value", currencyFormatter.format(clientData.balance));
    b.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.balance))
    });
    a.addChild(b);
    b = a.paidField = new TextField("VALUE_FREESPINS_PAID");
    b.token("value", currencyFormatter.format(clientData.paid));
    b.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.paid))
    });
    a.addChild(b);
    b = a.totalPaidField = new TextField("VALUE_FREESPINS_TOTAL_PAID");
    b.token("value", currencyFormatter.format(clientData.freespinsPaid));
    b.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.freespinsPaid))
    });
    a.addChild(b);
    b = a.spinButton = this.createSpinButton();
    b.click = function ()
    {
        clientData.spin()
    };
    b.addHotkey(KeyboardListener.SPIN_HOTKEY);
    b.onClientUpdate(function (a)
    {
        this.visible =- 1 == clientData.state.indexOf("spin.");
        this.enabled = clientData.isActionAvailable("spin") && !clientData.autoplayActive;
    });
    a.addChild(b);
    b = a.spinStopButton = this.createSpinStopButton();
    b.click = function ()
    {
        game.freespins.reels.quickStop = !0;
        this.enabled = !1
    };
    b.addHotkey(KeyboardListener.SPIN_HOTKEY);
    b.onClientUpdate(function (a)
    {
        this.visible = 0 == clientData.state.indexOf("spin.");
        this.enabled = !(game.current.reels.quickStop || userConfig.quick_spin_enabled)
    });
    a.addChild(b);
    b = a.paytableButton = this.createPaytableButton();
    b.click = function (a)
    {
        paytable.show(this.PAYTABLE_PAGE_NUMBER)
    }
    .bind(this);
    b.addHotkey(KeyboardListener.PAYTABLE_HOTKEY);
    a.addChild(b);
    return a;
};
Freespins.prototype.createSpinButton = function ()
{
    throw Error("Freespins.createSpinButton: should be redeclared.");
};
Freespins.prototype.createSpinStopButton = function ()
{
    throw Error("Should be overridden.");
};
Freespins.prototype.createPaytableButton = function ()
{
    throw Error("Should be overridden.");
};
function Paytable()
{
    GameModule.call(this);
    this.stage = new Stage(1);
    this.stage.root.addChild(this);
    this.payouts = [];
    this.payoutsContainer = this
}
Paytable.prototype.PAGE_COUNT = 1;
Paytable.prototype = Object.create(GameModule.prototype);
Paytable.prototype.constructor = Paytable;
Paytable.prototype.show = function (a)
{
    systemLoader.postloader.check("paytable", function ()
    {
        this.initialized || (this.init(), this.initPayouts());
        Stage.MAIN.pause();
        game.visible = !1;
        this.visible = !0;
        sound.get("sfx").pause();
        sound.get("music").get("main").pause();
        sound.get("music").get("paytable").resume();
        this.activePage = a ? a - 1 : 0;
        for (var b = 0; b < this.pageCount; b++)
        {
            this.pages[b].visible = this.activePage == b, this.icons[b].frame = this.activePage == b ? 0 : 1;
        }
        this.update()
    }
    .bind(this))
};
Paytable.prototype.update = function () {};
Paytable.prototype.hide = function ()
{
    Stage.MAIN.resume();
    game.visible = !0;
    this.visible = !1;
    sound.get("sfx").resume();
    sound.get("music").get("main").resume();
    sound.get("music").get("paytable").pause()
};
Paytable.prototype.addBaseContent = function ()
{
    this.background = this.createBackground();
    this.addChild(this.background);
    this.pageCount = this.PAGE_COUNT;
    this.pages = [];
    for (var a = 0; a < this.pageCount; a++) {
        this.pages[a] = new PIXI.Container, this.addChild(this.pages[a]);
    }
    this.icons = this.createPageIcons();
    this.leftButton = this.createLeftButton();
    this.leftButton.click = function ()
    {
        this.pages[this.activePage].visible = !1;
        this.icons[this.activePage].frame = 1;
        this.activePage = 0 == this.activePage ? this.pageCount - 1 : this.activePage - 1;
        this.icons[this.activePage].frame = 0;
        this.pages[this.activePage].visible = !0
    }
    .bind(this);
    this.leftButton.addHotkey(KeyboardListener.PAGE_PREV_HOTKEY);
    this.addChild(this.leftButton);
    this.rightButton = this.createRightButton();
    this.rightButton.click = function ()
    {
        this.pages[this.activePage].visible = !1;
        this.icons[this.activePage].frame = 1;
        this.activePage = this.activePage == this.pageCount - 1 ? 0 : this.activePage + 1;
        this.icons[this.activePage].frame = 0;
        this.pages[this.activePage].visible = !0
    }
    .bind(this);
    this.rightButton.addHotkey(KeyboardListener.PAGE_NEXT_HOTKEY);
    this.addChild(this.rightButton);
    this.printButton = this.createPrintButton();
    this.addChild(this.printButton);
    this.backButton = this.createBackButton();
    this.backButton.click = this.hide.bind(this);
    this.backButton.addHotkey(KeyboardListener.BACK_HOTKEY);
    this.addChild(this.backButton);
    this.printButton = this.createPrintButton();
    this.addChild(this.printButton)
};
Paytable.prototype.addPayout = function (a, b, c, d, e, f)
{
    d = new TextField(d);
    d.x = e;
    d.y = f;
    for (e = 0; e < b.length; e++) {
        d.token("value" + b[e], "0000");
    }
    this.payoutsContainer.addChild(d);
    this.payouts.push({
        text : d, symbol : a, counts : b, field : c
    })
};
Paytable.prototype.initPayouts = function ()
{
    for (var a = 0; a < this.payouts.length; a++)
    {
        for (var b = 0; b < this.payouts[a].counts.length; b++)
        {
            for (var c = 0; c < serverData.payouts.length; c++)
            {
                serverData.payouts[c].attr("symbol") == this.payouts[a].symbol && serverData.payouts[c].attr("count") == this.payouts[a].counts[b] && serverData.payouts[c].attr(this.payouts[a].field) && this.payouts[a].text.token(["value" + this.payouts[a].counts[b]], 
                serverData.payouts[c].attr(this.payouts[a].field));
            }
        }
    }
};
Paytable.prototype.createBackground = function ()
{
    throw Error("Paytable.createBackground: should be redeclared.");
};
Paytable.prototype.createLeftButton = function ()
{
    throw Error("Paytable.createLeftButton: should be redeclared.");
};
Paytable.prototype.createRightButton = function ()
{
    throw Error("Paytable.createRightButton: should be redeclared.");
};
Paytable.prototype.createBackButton = function ()
{
    throw Error("Paytable.createBackButton: should be redeclared.");
};
Paytable.prototype.createPageIcons = function ()
{
    throw Error("Paytable.createPageIcons: should be redeclared.");
};
var paytable = new Paytable;
paytable.visible = !1;
function SymbolsFeeder(a)
{
    this.column = a;
    this.queue = [];
    this.rowsToStop =- 1
}
SymbolsFeeder.prototype.next = function ()
{
    0 == this.queue.length && this.push(this.getRandom());
    0 < this.rowsToStop && this.rowsToStop--;
    return this.queue.shift();
};
SymbolsFeeder.prototype.getRandom = function ()
{
    return serverData.reelSets[serverData.reelSet][this.column][Math.floor(Math.random() * serverData.reelSets[serverData.reelSet][this.column].length)];
};
SymbolsFeeder.prototype.push = function (a)
{
    a = SlotSymbol.get(a, this.column);
    for (var b = 0; b < a.size; b++) {
        this.queue.push(a);
    }
    return a;
};
SymbolsFeeder.prototype.pushServerData = function ()
{
    for (var a = slotConfig.rows - 1; 0 <= a; ) for (var b = serverData.matrix[this.column - 1][a], c = this.push(b).size - 1; 0 <= c && serverData.matrix[this.column - 1][a] == b; c--) if (0 == a--) {
        this.rowsToStop = this.queue.length - c;
        break
    }
};
SymbolsFeeder.prototype.reset = function ()
{
    this.queue = [];
    this.rowsToStop =- 1
};
function SlotSymbol(a, b)
{
    PIXI.Container.call(this);
    this.id = a || 0;
    this.size = b || 1;
    this.content = new PIXI.Container;
    this.movie = null;
    this.state = "normal";
    this.hitArea = new PIXI.Rectangle(0, 0, SlotSymbol.width, SlotSymbol.height);
    this.addChild(this.content);
    this.paylinesMovie = new MovieClip;
    this.paylinesMovie.addAction(function (a)
    {
        a.showPaylines()
    }, 2E3, this);
    this.paylinesMovie.addAction(function (a)
    {
        a.hidePaylines();
        this.stop()
    }, 6E3, this)
}
SlotSymbol.width = 0;
SlotSymbol.height = 0;
SlotSymbol.number = 0;
SlotSymbol.get = function (a, b) {};
SlotSymbol.prototype = Object.create(PIXI.Container.prototype);
SlotSymbol.prototype.constructor = SlotSymbol;
SlotSymbol.prototype.reset = function ()
{
    this.movie && this.movie.stop()
};
SlotSymbol.prototype.animateOnAppearance = function (a, b, c) {};
SlotSymbol.prototype.animate = function (a, b, c, d) {};
SlotSymbol.prototype.blackout = function (a) {};
SlotSymbol.prototype.normal = function (a) {};
SlotSymbol.prototype.blur = function (a) {};
SlotSymbol.prototype.click = function ()
{
    for (var a = 1; 5 >= a; a++)
    {
        for (var b = 1; 3 >= b; b++)
        {
            game.main.reels[a][b] == this && (game.main.miniPaytable.symbol == this ? (game.main.miniPaytable.hide(), 
            game.main.miniPaytable.symbol = null) : game.main.miniPaytable.show(a, b));
        }
    }
    this.paylinesMovie.stop(0);
    this.hidePaylines()
};
SlotSymbol.prototype.mouseover = function ()
{
    this.paylinesMovie.play(0)
};
SlotSymbol.prototype.mouseout = function ()
{
    this.paylinesMovie.stop(0);
    this.hidePaylines()
};
SlotSymbol.prototype.showPaylines = function ()
{
    for (var a = 1; 5 >= a; a++)
    {
        for (var b = 1; 3 >= b; b++)
        {
            if (game.main.reels[a][b] == this)
            {
                for (var c = 0; c < slotConfig.lines_layout.length; c++) {
                    slotConfig.lines_layout[c][a - 1] == b && game.main.paylines[c + 1].show();
                }
            };
        }
    }
};
SlotSymbol.prototype.hidePaylines = function ()
{
    for (var a = 1; 5 >= a; a++)
    {
        for (var b = 1; 3 >= b; b++)
        {
            if (game.main.reels[a][b] == this)
            {
                for (var c = 0; c < slotConfig.lines_layout.length; c++) {
                    slotConfig.lines_layout[c][a - 1] == b && game.main.paylines[c + 1].active();
                }
            };
        }
    }
};
function Reel(a, b)
{
    PIXI.Container.call(this);
    this.reels = a;
    this.container = new PIXI.Container;
    this.addChild(this.container);
    for (var c = 0; c < slotConfig.rows + 2; c++)
    {
        this [c] = SlotSymbol.get(1), this [c].y = SlotSymbol.height * (c - 1), this.container.addChild(this [c]);
    }
    this [0].visible = this [slotConfig.rows + 1].visible = !1;
    this.symbolsFeeder = new SymbolsFeeder(b);
    this.mask = new PIXI.Graphics;
    this.addChild(this.mask);
    this.mask.beginFill(0);
    this.mask.drawRect(0, - a.topMargin, SlotSymbol.width, slotConfig.rows * SlotSymbol.height + a.bottomMargin);
    this.mask.endFill();
    this.state = Reel.STOPPED;
    this.rowsToStop = 0;
    this.movie = new MovieClip;
    this.movie.addTween((new Tween(this, function (a, b)
    {
        a.container.y = b;
    }, 0)).move(0, 200, function (a, b, c, g)
    {
        return - 60 * Math.sin(a / g * Math.PI);
    }).move(SlotSymbol.height, 50).move(0, 200, function (a, b, c, g)
    {
        return 60 * Math.sin(a / g * Math.PI);
    }));
    this.movie.addAction(function (a)
    {
        a.nextSymbol();
        (a.state == Reel.SPINNING || a.state == Reel.STOPPING && 0 < a.rowsToStop) && this.play(200);
        a.state == Reel.STOPPING && 0 == a.rowsToStop && (a.state = Reel.STOPPED, this.play(251));
        a.rowsToStop--
    }, 250, this);
    this.movie.addAction(function (a)
    {
        for (var b = 1; b <= slotConfig.rows; b++) {
            a[b].animateOnAppearance();
        }
        this.stop();
        sound.get("sfx").play("main.reels.stop")
    }, 450, this)
}
Reel.STOPPED = "stopped";
Reel.SPINNING = "spinning";
Reel.STOPPING = "stopping";
Reel.prototype = Object.create(PIXI.Container.prototype);
Reel.prototype.constructor = Reel;
Reel.prototype.start = function ()
{
    this.container.y = 0;
    this.state = Reel.SPINNING;
    this [0].visible = this [slotConfig.rows + 1].visible = !0;
    for (var a = 0; a < slotConfig.rows + 2; a++) {
        this [a].blur();
    }
    this.movie.play(0)
};
Reel.prototype.stop = function (a)
{
    this.state == Reel.STOPPING || this.state == Reel.STOPPED && 2 != a || this.symbolsFeeder.pushServerData();
    if (2 == a)
    {
        for (a = 0; a <= slotConfig.rows; a++) {
            this.nextSymbol();
        }
        this.state = Reel.STOPPED;
        this [0].visible = this [slotConfig.rows + 1].visible = !1;
        this.movie.stop(450)
    }
    else
    {
        this.state == Reel.SPINNING && (this.rowsToStop = this.symbolsFeeder.rowsToStop, this.state = Reel.STOPPING);
    }
};
Reel.prototype.nextSymbol = function ()
{
    this [slotConfig.rows] != this [slotConfig.rows + 1] && this.container.removeChild(this [slotConfig.rows + 1]);
    for (var a = slotConfig.rows + 1; 0 < a; a--) {
        this [a] != this [a - 1] && (this [a].y += SlotSymbol.height, this [a] = this [a - 1]);
    }
    this [1].y += SlotSymbol.height;
    this [0] = this.symbolsFeeder.next();
    this [0] != this [1] && (this [0].y =- SlotSymbol.height * this [0].size, this.container.addChild(this [0]));
    this.state == Reel.SPINNING && this [0].blur()
};
Reel.prototype.insert = function (a, b)
{
    for (var c = 0; c < a.size; c++)
    {
        var d = Math.min(Math.max(b + c, 1), slotConfig.rows);
        this.container.removeChild(this [d]);
        this [d] = a
    }
    a.y = (b - 1) * SlotSymbol.height;
    this.container.addChild(a)
};
function Reels()
{
    PIXI.Container.call(this);
    this.bottomMargin = this.topMargin = this.gap = 0;
    this.quickStop = !1
}
Reels.prototype = Object.create(PIXI.Container.prototype);
Reels.prototype.constructor = Reels;
Reels.prototype.init = function ()
{
    for (var a = 1; a <= slotConfig.columns; a++)
    {
        var b = new Reel(this, a);
        b.x = (a - 1) * (SlotSymbol.width + this.gap);
        this.addChild(b);
        this [a] = b;
    }
};
Reels.prototype.each = function (a)
{
    for (var b = 1; b <= slotConfig.columns; b++) {
        for (var c = 1; c <= slotConfig.rows; c++) {
            a(this [b][c], b, c);
        }
    }
};
function Payline(a)
{
    PIXI.Container.call(this);
    var b = this;
    this.id = a;
    this.state = "active";
    this.movie = null;
    this.sprites = {};
    this.indicator = new PIXI.Container;
    this.indicator.buttonMode = !0;
    this.indicator.mouseover = function ()
    {
        b.show()
    };
    this.indicator.mouseout = function ()
    {
        b.active()
    };
    this.addChild(this.indicator);
    this.init()
}
Payline.prototype = Object.create(PIXI.Container.prototype);
Payline.prototype.constructor = Payline;
Payline.prototype.init = function () {};
Payline.prototype.active = function () {};
Payline.prototype.show = function () {};
Payline.prototype.win = function () {};
Object.defineProperties(Payline.prototype, {
    enabled : {
        set : function (a)
        {
            this.indicator.interactive = a;
        }
    }
});
function MiniPaytable(a)
{
    PIXI.Container.call(this);
    this.panel = new PIXI.Container;
    this.addChild(this.panel);
    this.background = new PIXI.Container;
    this.panel.addChild(this.background);
    this.text = new TextField;
    this.panel.addChild(this.text);
    this.symbolContainer = new PIXI.Container;
    this.addChild(this.symbolContainer);
    this.addContent();
    this.reels = a;
    this.symbol = null;
    this.row = this.column = 0;
    this.onClientUpdate(function (a)
    {
        this.visible = "bet.idle" == clientData.state;
        "bet.idle" == a.diff.state && this.hide()
    });
    this.movie = new MovieClip;
    this.movie.addTween((new Tween(this.panel, Tween.ALPHA_FUNC, 1)).move(0, 2E3).move(-1, 200));
    this.movie.addAction(this.hide, 2200);
    this.movie.stop(2200)
}
MiniPaytable.prototype = Object.create(PIXI.Container.prototype);
MiniPaytable.prototype.constructor = MiniPaytable;
MiniPaytable.prototype.applyPosition = function () {};
MiniPaytable.prototype.addContent = function () {};
MiniPaytable.prototype.show = function (a, b)
{
    this.hide();
    this.symbol = this.reels[a][b];
    this.column = a;
    this.row = b;
    this.symbolContainer.addChild(this.symbol);
    this.x = this.reels.x + this.reels[a].x;
    this.y = this.reels.y + this.symbol.y;
    this.symbol.y = 0;
    this.applyPosition();
    sound.play("main.minipaytable");
    this.movie.play(0)
};
MiniPaytable.prototype.hide = function ()
{
    this.symbol && (this.reels[this.column].container.addChild(this.symbol), this.symbol.y = (this.row - 1) * SlotSymbol.height, 
    this.symbol = null, this.movie.stop(2200));
};
Toolbar.prototype.addCustomContent = function ()
{
    this.modules.autoplay = Button.createStandartCommonButton("img/toolbar/autoplay/buttons/main");
    this.modules.autoplay.y = 1;
    this._modulesWidth.autoplay = 32;
    this.modules.autoplay.click = function ()
    {
        "none" != slotConfig.autoplay_license && (this.autoplayAdvancedPanel.visible ? this.autoplayAdvancedPanel.hide() : this.autoplayAdvancedPanel.show())
    }
    .bind(this);
    this.stage.addEventListener(GameEvent.ENTER_FRAME, function ()
    {
        var a = this.autoplayAdvancedPanel.isActive();
        a || this.autoplayAdvancedPanel.hide();
        this.modules.autoplay.enabled = a;
    }, this);
    this.addChild(this.modules.autoplay);
    this.autoplayAdvancedPanel = new AutoplayAdvancedPanel;
    this.autoplayAdvancedPanel.visible = !1;
    this.stage.root.addChild(this.autoplayAdvancedPanel)
};
function AutoplayAdvancedPanel()
{
    PIXI.Container.call(this);
    this._background = Sprite.fromCommonFile("img/toolbar/autoplay/background.png");
    this.addChild(this._background);
    this.addChild(new TextField("TOOLBAR_AUTOPLAY_CAPTION"));
    this.addChild(new TextField("TOOLBAR_AUTOPLAY_NOA"));
    this.addChild(new TextField("TOOLBAR_AUTOPLAY_SAVE"));
    this._arrow = Sprite.fromCommonFile("img/toolbar/autoplay/arrow.png");
    this._arrow.y =- 11;
    this.addChild(this._arrow);
    this._warningText = new TextField("TOOLBAR_AUTOPLAY_WARNING");
    this.addChild(this._warningText);
    this._lossLimitCheckbox = Sprite.fromCommonFiles(["img/toolbar/autoplay/buttons/checkbox_1/off.png", 
    "img/toolbar/autoplay/buttons/checkbox_1/on.png"]);
    this._lossLimitCheckbox.x = 34;
    this._lossLimitCheckbox.y = 141;
    this._lossLimitCheckbox.interactive = !0;
    this._lossLimitCheckbox.buttonMode = !0;
    this._lossLimitCheckbox.click = function ()
    {
        var a = 0 == this._lossLimitCheckbox.frame ? 1 : 0;
        this._lossLimitCheckbox.frame = a;
        this._lossLimitSlider.visible = 1 == a;
        this._lossLimitText.setId(1 == a ? "TOOLBAR_AUTOPLAY_LOSS_LIMIT_ON" : "TOOLBAR_AUTOPLAY_LOSS_LIMIT_OFF");
        this._warningText.setId("TOOLBAR_AUTOPLAY_WARNING");
        this._warningText.visible = 0 == a && "full" == slotConfig.autoplay_license;
        sound.play("main.checkbox.click")
    }
    .bind(this);
    this.addChild(this._lossLimitCheckbox);
    this._lossLimitText = new TextField("TOOLBAR_AUTOPLAY_LOSS_LIMIT_OFF");
    this.addChild(this._lossLimitText);
    this._lossLimitSlider = new AutoplayAdvancedSlider(slotConfig.autoplay_loss_limit_list);
    this._lossLimitSlider.x = 35;
    this._lossLimitSlider.y = 181;
    this._lossLimitSlider.visible = !1;
    this._lossLimitSlider.change = function ()
    {
        this._lossLimitText.token("value", currencyFormatter.format(clientData.getTotalBet() * this._lossLimitSlider.value))
    }
    .bind(this);
    this.addChild(this._lossLimitSlider);
    this._singleWinCheckbox = Sprite.fromCommonFiles(["img/toolbar/autoplay/buttons/checkbox_1/off.png", 
    "img/toolbar/autoplay/buttons/checkbox_1/on.png"]);
    this._singleWinCheckbox.x = 34;
    this._singleWinCheckbox.y = 222;
    this._singleWinCheckbox.interactive = !0;
    this._singleWinCheckbox.buttonMode = !0;
    this._singleWinCheckbox.click = function ()
    {
        var a = 0 == this._singleWinCheckbox.frame ? 1 : 0;
        this._singleWinCheckbox.frame = a;
        this._singleWinSlider.visible = 1 == a;
        this._singleWinText.setId(1 == a ? "TOOLBAR_AUTOPLAY_SINGLE_WIN_ON" : "TOOLBAR_AUTOPLAY_SINGLE_WIN_OFF");
        sound.play("main.checkbox.click")
    }
    .bind(this);
    this.addChild(this._singleWinCheckbox);
    this._singleWinText = new TextField("TOOLBAR_AUTOPLAY_SINGLE_WIN_OFF");
    this.addChild(this._singleWinText);
    this._singleWinSlider = new AutoplayAdvancedSlider(slotConfig.autoplay_single_win_limit_list);
    this._singleWinSlider.x = 35;
    this._singleWinSlider.y = 262;
    this._singleWinSlider.visible = !1;
    this._singleWinSlider.change = function ()
    {
        this._singleWinText.token("value", currencyFormatter.format(clientData.getTotalBet() * this._singleWinSlider.value))
    }
    .bind(this);
    this.addChild(this._singleWinSlider);
    this._saveCheckbox = Sprite.fromCommonFiles(["img/toolbar/autoplay/buttons/checkbox_2/off.png", "img/toolbar/autoplay/buttons/checkbox_2/on.png"]);
    this._saveCheckbox.x = 35;
    this._saveCheckbox.y = 358;
    this._saveCheckbox.interactive = !0;
    this._saveCheckbox.buttonMode = !0;
    this._saveCheckbox.frame = 1;
    this._saveCheckbox.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        sound.play("main.checkbox.click")
    };
    this.addChild(this._saveCheckbox);
    this._closeButton = Button.createStandartCommonButton("img/toolbar/autoplay/buttons/close");
    this._closeButton.x = 375;
    this._closeButton.y = 10;
    this._closeButton.click = this._close.bind(this);
    this.addChild(this._closeButton);
    this._startButton = Button.createStandartCommonButton("img/toolbar/autoplay/buttons/start");
    this._startButton.x = 241;
    this._startButton.y = 343;
    this._startButton.onClientUpdate(function (a)
    {
        this.visible = !clientData.autoplayActive;
        this.enabled = clientData.isActionAvailable("spin") && 0 < clientData.autoplayNumber;
    });
    this._startButton.click = this.start.bind(this);
    this.addChild(this._startButton);
    this._stopButton = Button.createStandartCommonButton("img/toolbar/autoplay/buttons/stop");
    this._stopButton.x = 241;
    this._stopButton.y = 343;
    this._stopButton.visible = !1;
    this._stopButton.click = this.stop.bind(this);
    this._stopButton.onClientUpdate(function (a)
    {
        this.visible = clientData.autoplayActive;
        this.enabled = !clientData.freespinsActive && "freespins.start" != clientData.state && "freespins.stop" != clientData && 0 != serverData.status.indexOf("bonus")
    });
    this.addChild(this._stopButton);
    this._chooser = new AutoplayAdvancedChooser(slotConfig.autoplay_list, slotConfig.autoplay_number);
    this._chooser.x = 50;
    this._chooser.y = 85;
    this.addChild(this._chooser);
    this.interactive = !0;
    this.onClientUpdate(this._onClientUpdate);
    gameToolbar.stage.addEventListener(GameEvent.CLICK, this._onStageClick, this);
    gameToolbar.stage.addEventListener(GameEvent.RESIZE, this._resize.bind(this))
}
AutoplayAdvancedPanel.prototype = Object.create(PIXI.Container.prototype);
AutoplayAdvancedPanel.prototype.constructor = AutoplayAdvancedPanel;
AutoplayAdvancedPanel.prototype.update = function ()
{
    this._resize();
    this._lossLimitText.token("value", currencyFormatter.format(this._lossLimitSlider.value * clientData.getTotalBet()));
    this._lossLimitText.token("min", currencyFormatter.format(clientData.getTotalBet() * slotConfig.autoplay_loss_limit_list[0]));
    this._lossLimitText.token("max", currencyFormatter.format(clientData.getTotalBet() * slotConfig.autoplay_loss_limit_list[slotConfig.autoplay_loss_limit_list.length - 1]));
    this._singleWinText.token("value", currencyFormatter.format(this._singleWinSlider.value * clientData.getTotalBet()));
    this._singleWinText.token("min", currencyFormatter.format(clientData.getTotalBet() * slotConfig.autoplay_single_win_limit_list[0]));
    this._singleWinText.token("max", currencyFormatter.format(clientData.getTotalBet() * slotConfig.autoplay_single_win_limit_list[slotConfig.autoplay_single_win_limit_list.length - 1]))
};
AutoplayAdvancedPanel.prototype._onStageClick = function (a)
{
    game.main.ui.updateTransform();
    !this.visible || this._background.getBounds().contains(a.x, a.y) || gameToolbar.modules.autoplay.getBounds().contains(a.x, 
    a.y) || game.main.ui.autoplayPanel.getBounds().contains(a.x, a.y) || game.main.ui.linesPanel.getBounds().contains(a.x, 
    a.y) || game.main.ui.betPanel.getBounds().contains(a.x, a.y) || game.main.ui.maxBetButton.getBounds().contains(a.x, 
    a.y) || (this.visible = !1)
};
AutoplayAdvancedPanel.prototype._onClientUpdate = function (a)
{
    (a.diff.bet || a.diff.lines) && this.update();
    a.diff.bet && (this._lossLimitCheckbox.frame = 0, this._lossLimitSlider.visible = !1, this._lossLimitText.setId("TOOLBAR_AUTOPLAY_LOSS_LIMIT_OFF"), 
    this._warningText.setId("TOOLBAR_AUTOPLAY_WARNING"), this._warningText.visible = "full" == slotConfig.autoplay_license);
};
AutoplayAdvancedPanel.prototype.start = function ()
{
    "full" != slotConfig.autoplay_license || 1 == this._lossLimitCheckbox.frame || 0 <= clientData.giftspins ? (clientData.autoplayLossLimit = 1 == this._lossLimitCheckbox.frame ? this._lossLimitSlider.value * clientData.getTotalBet() : 0, 
    clientData.autoplaySingleWinLimit = 1 == this._singleWinCheckbox.frame ? this._singleWinSlider.value * clientData.getTotalBet() : 0, 
    clientData.startAutoplay(), this.visible = !1) : (this._warningText.setId("TOOLBAR_AUTOPLAY_WARNING_ACTIVE"), 
    game.main.messageBox.show("ACTION_AUTOPLAY_CHOOSE_SETTINGS", 2E3));
};
AutoplayAdvancedPanel.prototype.stop = function ()
{
    clientData.stopAutoplay()
};
AutoplayAdvancedPanel.prototype._close = function ()
{
    this.visible = !1
};
AutoplayAdvancedPanel.prototype._resize = function ()
{
    var a = gameToolbar.stage.getViewPort();
    this.x = 990 - a.x;
    this.y = 20 / a.scale + 11 + a.y;
    this._arrow.x = Math.max(410 + gameToolbar.modules.autoplay.x / a.scale + 14 * (1 / a.scale - 1), 
    0);
};
AutoplayAdvancedPanel.prototype.isActive = function ()
{
    return!paytable.visible && !clientData.freespinsActive && game.main.visible &&- 1 == clientData.giftspins && (!giftspins.initialized || !giftspins.startPopup.visible)
};
AutoplayAdvancedPanel.prototype.hide = function ()
{
    this._lossLimitSlider._attached = !1;
    this.visible = this._singleWinSlider._attached = !1;
};
AutoplayAdvancedPanel.prototype.show = function ()
{
    0 == this._saveCheckbox.frame ? (this._lossLimitCheckbox.frame = 0, this._lossLimitSlider.level = 0, 
    this._lossLimitSlider.visible = !1, this._lossLimitText.setId("TOOLBAR_AUTOPLAY_LOSS_LIMIT_OFF"), 
    this._singleWinCheckbox.frame = 0, this._singleWinSlider.level = 0, this._singleWinSlider.visible = !1, 
    this._singleWinText.setId("TOOLBAR_AUTOPLAY_SINGLE_WIN_OFF")) : this.update();
    this._warningText.visible = 0 == this._lossLimitCheckbox.frame && "full" == slotConfig.autoplay_license;
    this._warningText.setId("TOOLBAR_AUTOPLAY_WARNING");
    this.visible = !0;
    sound.get("sfx").play("main.auto.popup")
};
function AutoplayAdvancedSlider(a)
{
    PIXI.Container.call(this);
    this._list = a;
    this._value = this._level = 0;
    this._off = Sprite.fromCommonFile("img/toolbar/autoplay/slider/off.png");
    this._off.interactive = !0;
    this._off.buttonMode = !0;
    this._off.hitArea = new PIXI.Rectangle(0, - 5, 326, 11);
    this._off.click = this._line_click.bind(this);
    this.addChild(this._off);
    this._on = Sprite.fromCommonFile("img/toolbar/autoplay/slider/on.png");
    this._on.hitArea = PIXI.Rectangle.EMPTY;
    this.addChild(this._on);
    this._on.mask = new PIXI.Graphics;
    this._on.mask.beginFill();
    this._on.mask.drawRect(0, 0, 326, 5);
    this._on.mask.endFill();
    this._on.mask.hitArea = PIXI.Rectangle.EMPTY;
    this.addChild(this._on.mask);
    this._round = Sprite.fromCommonFile("img/toolbar/autoplay/slider/round.png");
    this._round.y =- 3;
    this._round.interactive = !0;
    this._round.buttonMode = !0;
    this._round.hitArea = new PIXI.Rectangle(-1, - 6, 14, 20);
    this._round.mousedown = this._round_mousedown.bind(this);
    this._round.mousemove = this._round_mousemove.bind(this);
    this._round.mouseup = this._round.mouseupoutside = this._round_mouseup.bind(this);
    this.addChild(this._round);
    this.level = 0;
    this._movie = null;
    this._attached = !1
}
AutoplayAdvancedSlider.prototype = Object.create(PIXI.Container.prototype);
AutoplayAdvancedSlider.prototype.constructor = AutoplayAdvancedSlider;
AutoplayAdvancedSlider.prototype._round_mousedown = function (a)
{
    this._movie && (this._movie.stop(), this._movie = null);
    this._attached = !0
};
AutoplayAdvancedSlider.prototype._round_mousemove = function (a)
{
    this._attached && (0 < (void 0 !== a.data.originalEvent.buttons ? a.data.originalEvent.buttons : 0 === a.data.originalEvent.which ? 0 : 1 << a.data.originalEvent.which - 1) ? this.level = Math.max(0, 
    Math.min(1, this.toLocal(a.data.global).x / 326)) : this._attached = !1);
};
AutoplayAdvancedSlider.prototype._round_mouseup = function (a)
{
    this._attached = !1;
    .02 > this.level ? this.level = 0 : .98 < this.level && (this.level = 1);
};
AutoplayAdvancedSlider.prototype._line_click = function (a)
{
    this._movie && this._movie.stop();
    a = Math.max(0, Math.min(1, this.toLocal(a.data.global).x / 326)) - this.level;
    var b = Math.round(200 * Math.abs(a));
    this._movie = new MovieClip(this.getStage());
    this._movie.addTween((new Tween(this, function (a, b)
    {
        a.level = b;
    },
    this.level)).move(a, b));
    this._movie.addAction(function ()
    {
        this._movie.stop();
        this._movie = null
    }
    .bind(this), b);
    this._movie.play()
};
AutoplayAdvancedSlider.prototype.change = function () {};
Object.defineProperties(AutoplayAdvancedSlider.prototype, 
{
    level : 
    {
        get : function ()
        {
            return this._level;
        },
        set : function (a)
        {
            this._level = a;
            this._round.x =- 5 + Math.round(326 * a);
            this._on.mask.x =- Math.round(326 * (1 - a));
            a = Math.min(Math.floor(a * this._list.length), this._list.length - 1);
            this._value != this._list[a] && (this._value = this._list[a], this.change());
        }
    },
    value : {
        get : function ()
        {
            return this._value;
        }
    }
});
function AutoplayAdvancedChooser(a, b)
{
    PIXI.Container.call(this);
    this._list = a;
    this._selected = this._list.indexOf(b);
    this._count = Math.min(this._list.length, 6);
    this._pos = this._selected < this._count ? 0 : Math.min(this._selected, this._list.length - this._count);
    this._buttons = [];
    this._buttonTexts = [];
    this.addChild(Sprite.fromCommonFile("img/toolbar/autoplay/chooser.png"));
    this._left = Button.createStandartCommonButton("img/toolbar/autoplay/buttons/arrow_left");
    this._left.x =- 12;
    this._left.y = 5;
    this._left.click = this._doLeft.bind(this);
    this.addChild(this._left);
    this._right = Button.createStandartCommonButton("img/toolbar/autoplay/buttons/arrow_right");
    this._right.x = 300;
    this._right.y = 5;
    this._right.click = this._doRight.bind(this);
    this.addChild(this._right);
    for (var c = 0; c < this._count; c++)
    {
        var d = this._buttons[c] = Button.createStandartCommonButton("img/toolbar/autoplay/buttons/count_" + (0 == c ? "left" : 5 == c ? "right" : "center"));
        d.x = 3 + 49 * c;
        d.y = 2;
        d.click = this._doSelect.bind(this, c);
        this.addChild(d);
        this._buttonTexts[c] = new TextField("TOOLBAR_AUTOPLAY_CHOOSER_VALUE");
        d.addChild(this._buttonTexts[c])
    }
    this.onClientUpdate(this.update);
    this.update()
}
AutoplayAdvancedChooser.prototype = Object.create(PIXI.Container.prototype);
AutoplayAdvancedChooser.prototype.constructor = AutoplayAdvancedChooser;
AutoplayAdvancedChooser.prototype.update = function (a)
{
    this._selected = this._list.indexOf(clientData.autoplayNumber);
    a && (this._pos = Math.min(this._selected, Math.max(this._selected - this._count + 1, this._pos)));
    for (a = 0; a < this._count; a++)
    {
        this._buttons[a].enabled = a + this._pos != this._selected, this._buttonTexts[a].token("value", 
        this._list[this._pos + a]);
    }
    this._left.enabled = 0 < this._pos;
    this._right.enabled = this._pos < this._list.length - this._count;
};
AutoplayAdvancedChooser.prototype._doLeft = function ()
{
    this._pos--;
    this.update()
};
AutoplayAdvancedChooser.prototype._doRight = function ()
{
    this._pos++;
    this.update()
};
AutoplayAdvancedChooser.prototype._doSelect = function (a)
{
    clientData.autoplayNumber = this._list[a + this._pos];
    clientData.diff()
};
function ReelsSpinController()
{
    StateController.call(this, "spin.start");
    this.spinSound = null
}
ReelsSpinController.prototype = Object.create(StateController.prototype);
ReelsSpinController.prototype.constructor = ReelsSpinController;
ReelsSpinController.prototype.onStart = function ()
{
    game.current.reels[1].start();
    sound.get("sfx").loop("main.reels.spin")
};
ReelsSpinController.prototype.onEnterFrame = function ()
{
    for (var a = 2; a <= slotConfig.columns; a++)
    {
        this.hasElapsedTimeStamp(Math.max((a - 1) * slotConfig.game_reel_start_interval, 1)) && game.current.reels[a].start();
    }
    a = Stage.MAIN.time - this.startTime - slotConfig.game_reel_start_interval * (slotConfig.columns - 1);
    (a >= slotConfig.game_reelset_move_time || (game.current.reels.quickStop || userConfig.quick_spin_enabled) && a >= slotConfig.game_reelset_min_move_time) && this.stop()
};
(new ReelsSpinController).activate();
function ReelsStopController()
{
    StateController.call(this, "spin.stop");
    this.stoppedCount = 0
}
ReelsStopController.prototype = Object.create(StateController.prototype);
ReelsStopController.prototype.constructor = ReelsStopController;
ReelsStopController.prototype.onInit = function ()
{
    for (var a = 1; a <= slotConfig.columns; a++) {
        game.current.reels[a].stop(2);
    }
};
ReelsStopController.prototype.onStart = function ()
{
    this.stoppedCount = 0;
    for (var a = 1; a <= slotConfig.columns; a++)
    {
        game.current.reels[a].movie.addEventListenerOnce(GameEvent.COMPLETE, this.onReelStop, this);
    }
};
ReelsStopController.prototype.onEnterFrame = function (a)
{
    a = Stage.MAIN.time - this.startTime;
    for (var b = 1; b <= slotConfig.columns; b++)
    {
        b <= a  / (game.current.reels.quickStop || userConfig.quick_spin_enabled ? 75 : slotConfig.game_reel_stop_interval) + 1 && game.current.reels[b].stop(game.current.reels.quickStop || userConfig.quick_spin_enabled ? 1 : 0);
    }
};
ReelsStopController.prototype.onReelStop = function (a)
{
    this.stoppedCount++;
    this.stoppedCount == slotConfig.columns && (sound.get("sfx").get("main.reels.spin").stop(), game.current.reels.quickStop = !1, 
    this.stop())
};
(new ReelsStopController).activate();
function IdleController()
{
    StateController.call(this, "bet.idle");
    this.nextWinTime = this.currentWinNumber =- 1;
    this.winPanelMovie = null;
    clientData.addEventListener(GameEvent.UPDATE, function (a)
    {
        if ("bet.idle" == clientData.state && (a.diff.showWinnings && 0 < this.nextWinTime && this.stopAllAnimations(!0), 
        a.diff.autoplayActive &&- 1 == this.nextWinTime)) for (a = 1;
        a <= slotConfig.lines;
        a++) game.current.paylines[a].enabled = !0
    }, this)
}
IdleController.prototype = Object.create(StateController.prototype);
IdleController.prototype.constructor = IdleController;
IdleController.prototype.onStart = function ()
{
    clientData.showWinnings ? (game.skipManager.set(function ()
    {
        clientData.showWinnings = !1;
        clientData.diff()
    }
    .bind(this), KeyboardListener.SKIP_HOTKEY), this.currentWinNumber =- 1, this.showNextWin()) : this.stopAllAnimations(!clientData.autoplayActive && !clientData.freespinsActive)
};
IdleController.prototype.onEnterFrame = function ()
{
    this.hasElapsedTimeStamp(this.nextWinTime) && this.showNextWin();
    clientData.freespinsActive ? clientData.isActionAvailable("free.spin") && (0 == clientData.freespinsNumber ? this.stop() : clientData.act("free.spin")) : clientData.autoplayActive ? 0 <= clientData.giftspins && "deleted" == serverData.giftspins[clientData.giftspins].status ? (clientData.autoplayActive = !1, 
    clientData.autoplayShowPanel = !1, clientData.diff()) : clientData.isActionAvailable("spin") && clientData.proceedAutoplay() : clientData.autoplayShowPanel ? (clientData.autoplayShowPanel = !1, 
    clientData.diff(), gameToolbar.autoplayAdvancedPanel.show()) : giftspins.initialized && (0 <= clientData.giftspins ? giftspins.deletePopup.visible || "deleted" != serverData.giftspins[clientData.giftspins].status ? giftspins.summaryPopup.visible || "finished" != serverData.giftspins[clientData.giftspins].status || (giftspins.summaryPopup.show(), 
    giftspins.autostart = !0) : (giftspins.deletePopup.show(), giftspins.autostart = !0) : giftspins.startPopup.visible || gameToolbar.autoplayAdvancedPanel.visible || !(serverData.hasNewGiftspinsOffers() || 0 < serverData.getAvailableGiftspinsOffers().length && giftspins.autostart) || (giftspins.autostart = !1, 
    giftspins.topPanel.update(), giftspins.startPopup.show()))
};
IdleController.prototype.onStop = function ()
{
    this.stopAllAnimations(!1)
};
IdleController.prototype.getSound = function (a)
{
    var b = 0;
    a.layout.forEach(function (a)
    {
        b += 0 < a ? 1 : 0
    });
    return "main.symbols." + a.comb + "." + (3 < b ? "long" : "short");
};
IdleController.prototype.showNextWin = function ()
{
    var a =++this.currentWinNumber, b = serverData.wins[this.currentWinNumber % serverData.wins.length];
    this.nextWinTime = Stage.MAIN.time - this.startTime + this.getWinDuration(b);
    for (var c, d = 1; d <= slotConfig.lines; d++) {
        c = game.current.paylines[d], d == b.number ? c.win() : c.active();
    }
    this.winPanelMovie && this.winPanelMovie.stop();
    c = game.current.createLineWinPanel(b.number, b.paid);
    game.current.lineWinPanel.visible = !0;
    game.current.lineWinPanel.removeChildren();
    game.current.lineWinPanel.addChild(c.content);
    this.winPanelMovie = c.movie;
    this.winPanelMovie.play(0);
    game.current.reels.each(function (c, d, g)
    {
        b.layout[d - 1] == g ? (game.current.animationContainer[d].addChild(c), a < serverData.wins.length ? c.animate(b, 
        d, g) : c.normal()) : c.blackout()
    });
    a < serverData.wins.length && (sound.get("sfx").play("main.lines.win"), sound.get("sfx").play(this.getSound(b)))
};
IdleController.prototype.stopAllAnimations = function (a)
{
    for (var b = 1; b <= slotConfig.lines; b++) {
        var c = game.current.paylines[b];
        c.active();
        c.enabled = a
    }
    game.current.reels.each(function (b, c, f)
    {
        game.current.reels[c].container.addChild(b);
        b.normal();
        b.interactive = a;
    });
    this.winPanelMovie && (this.winPanelMovie.stop(), this.winPanelMovie = null);
    game.current.lineWinPanel.removeChildren();
    game.current.lineWinPanel.visible = !1;
    game.skipManager.reset();
    this.nextWinTime =- 1
};
IdleController.prototype.getWinDuration = function (a)
{
    return 2E3;
};
(new IdleController).activate();
function InitController()
{
    StateController.call(this, "init")
}
InitController.prototype = Object.create(StateController.prototype);
InitController.prototype.constructor = InitController;
InitController.prototype.onStart = function ()
{
    this.stop()
};
InitController.prototype.onStop = function ()
{
    systemLoader.preloader.visible = !1;
    game.visible = !0
};
(new InitController).activate();
function TotalWinController()
{
    StateController.call(this, "bet.win")
}
TotalWinController.prototype = Object.create(StateController.prototype);
TotalWinController.prototype.constructor = TotalWinController;
TotalWinController.prototype.onStart = function ()
{
    for (var a = 0; a < serverData.wins.length; a++)
    {
        serverData.wins[a].number && game.current.paylines[serverData.wins[a].number].win();
    }
    for (var b = 1; b <= slotConfig.columns; b++)
    {
        for (var c = game.current.reels[b], d = 1; d <= slotConfig.rows; d++) 
        {
            for (var e = !1, f = c[d]; d <= slotConfig.rows; ) 
            {
                for (a = 0; a < serverData.wins.length; a++) {
                    e = e || d == serverData.wins[a].layout[b - 1];
                }
                if (c[d + 1] == f) {
                    d++;
                }
                else {
                    break ;
                }
            }
            e ? (game.current.animationContainer[b].addChild(f), f.normal()) : f.blackout() 
        }
        game.current.totalWinPanel.visible = !0;
    }
    var g = game.current.createTotalWinPanel(serverData.roundPaid, serverData.bet * serverData.lines);
    game.current.totalWinPanel.addChild(g.content);
    g.movie.addEventListener(GameEvent.COMPLETE, function ()
    {
        game.current.totalWinPanel.removeChild(g.content);
        this.stop()
    }, this);
    g.movie.play(0);
    game.skipManager.set(function ()
    {
        g.movie.play(SlotModule.SKIP_WIN_MOVIE_TIME);
        game.skipManager.set(function ()
        {
            g.movie.stop()
        },
        KeyboardListener.SKIP_HOTKEY)
    }
    .bind(this), KeyboardListener.SKIP_HOTKEY)
};
TotalWinController.prototype.onStop = function ()
{
    for (var a = 1; a <= slotConfig.lines; a++) {
        game.current.paylines[a].active();
    }
    game.current.totalWinPanel.visible = !1;
    game.skipManager.reset()
};
(new TotalWinController).activate();
function Giftspins()
{
    GameModule.call(this);
    clientData.addEventListener(GameEvent.UPDATE, this._onClientUpdate, this);
    this.stage = new Stage(2);
    this.stage.root.addChild(this);
    this.visible = !1
}
Giftspins.prototype = Object.create(GameModule.prototype);
Giftspins.prototype.constructor = Giftspins;
Giftspins.prototype.addBaseContent = function ()
{
    this.topPanel = new GiftspinsTopPanel;
    this.topPanel.update();
    this.addChild(this.topPanel);
    this.startPopup = new GiftspinsStartPopup;
    this.startPopup.visible = !1;
    this.addChild(this.startPopup);
    this.summaryPopup = new GiftspinsSummaryPopup;
    this.summaryPopup.visible = !1;
    this.addChild(this.summaryPopup);
    this.reconnectPopup = new GiftspinsReconnectPopup;
    this.reconnectPopup.visible = !1;
    this.addChild(this.reconnectPopup);
    this.deletePopup = new GiftspinsDeletePopup;
    this.deletePopup.visible = !1;
    this.addChild(this.deletePopup);
    this.confirmationDialog = new GiftspinsConfirmationDialog;
    this.confirmationDialog.visible = !1;
    this.addChild(this.confirmationDialog)
};
Giftspins.prototype._onClientUpdate = function (a)
{
    "init" != a.diff.state || slotConfig.no_gift_spins || (this.init(), this.visible = !0, - 1 < clientData.giftspins ? "finished" != serverData.giftspins[clientData.giftspins].status && "deleted" != serverData.giftspins[clientData.giftspins].status && this.reconnectPopup.show() : this.stage.addEventListenerOnce(GameEvent.ENTER_FRAME, 
    function ()
    {
        this.topPanel._noOfferTooltip.toggle()
    }, this), serverData.addEventListener(GameEvent.UPDATE, this._onServerResponse, this, - 1))
};
Giftspins.prototype._onServerResponse = function (a)
{
    (a = a.response) && 0 < a.find(">gift2-spins").length && "gift2-delete" != a.attr("command") && this.topPanel.update();
};
Object.defineProperties(Giftspins.prototype, 
{
    autostart : 
    {
        get : function ()
        {
            return 1 == this.topPanel._waitTooltip1.checkbox.frame;
        },
        set : function (a)
        {
            this.topPanel._waitTooltip1.checkbox.frame = a ? 1 : 0;
        }
    }
});
var giftspins = new Giftspins;
function GiftspinsTooltip()
{
    PIXI.Container.call(this);
    this._movie = new MovieClip(giftspins.stage);
    this._movie.addTween((new Tween(this, Tween.ALPHA_FUNC, 0)).move(1, 300).move(0, 3E3).move(-1, 300));
    this._movie.addAction(function ()
    {
        var a = Stage._renderer.plugins.interaction.mouse.global;
        this.getBounds().contains(a.x, a.y) ? this._movie.stop() : this._movie.play(2300)
    }
    .bind(this), 300);
    this._movie.addAction(function ()
    {
        this._movie.stop(0);
        this.visible = !1
    }
    .bind(this), 3600);
    this.interactive = !0;
    giftspins.stage.addEventListener(GameEvent.CLICK, this._onStageClick, this)
}
GiftspinsTooltip.prototype = Object.create(PIXI.Container.prototype);
GiftspinsTooltip.prototype.constructor = GiftspinsTooltip;
GiftspinsTooltip.prototype._onStageClick = function (a)
{
    this.visible && !this.getBounds().contains(a.x, a.y) && this._movie.play(Math.max(this._movie.time, 
    3300))
};
GiftspinsTooltip.prototype.toggle = function ()
{
    this.visible = !0;
    var a = this._movie.time;
    this._movie.play(0 == a ? 0 : 300 > a ? 3600 - a : 3300 > a ? 3300 : 3600 - a)
};
GiftspinsTooltip.prototype.mouseout = function ()
{
    this.visible && 3300 > this._movie.time && this._movie.play(2300)
};
GiftspinsTooltip.prototype.mouseover = function ()
{
    this.visible && 300 < this._movie.time && 3300 > this._movie.time && this._movie.stop()
};
function GiftspinsDetails()
{
    GiftspinsTooltip.call(this);
    this.addChild(Sprite.fromCommonFile("img/giftspins/details_panel.png"));
    this._text = new TextField("GIFTSPINS_DETAILS");
    this._text.token("total_bet", "-");
    this._text.token("lines", "-");
    this._text.token("total_lines", "-");
    this._text.token("spins", "-");
    this._text.token("total_spins", "-");
    this._text.token("total_win", "-");
    this.addChild(this._text);
    var a = Button.createStandartCommonButton("img/giftspins/buttons/trash");
    a.x = 5;
    a.y = 145;
    a.enabled = !1;
    a.onClientUpdate(function (a)
    {
        this.enabled = clientData.isActionAvailable("spin") && !clientData.autoplayActive;
    });
    a.click = function ()
    {
        giftspins.confirmationDialog.visible = !0;
        giftspins.confirmationDialog._buttonOk.enabled = !0;
        giftspins.confirmationDialog._buttonCancel.enabled = !0;
        giftspins.confirmationDialog._buttonOk.click = function ()
        {
            clientData.act("giftspins.delete");
            giftspins.confirmationDialog._buttonOk.enabled = !1;
            giftspins.confirmationDialog._buttonCancel.enabled = !1;
            giftspins.autostart = !0
        }
        .bind(this);
        giftspins.confirmationDialog._buttonCancel.click = function ()
        {
            giftspins.confirmationDialog.visible = !1
        }
    };
    this.onClientUpdate(this._onClientUpdate);
    this.addChild(a)
}
GiftspinsDetails.prototype = Object.create(GiftspinsTooltip.prototype);
GiftspinsDetails.prototype.constructor = GiftspinsDetails;
GiftspinsDetails.prototype.update = function ()
{
    if (0 <= clientData.giftspins)
    {
        var a = serverData.giftspins[clientData.giftspins];
        this._text.token("total_bet", currencyFormatter.format(a.bet * a.lines));
        this._text.token("lines", a.lines);
        this._text.token("total_lines", slotConfig.lines);
        this._text.token("spins", a.count_left);
        this._text.token("total_spins", a.count_total);
        this._text.token("total_win", currencyFormatter.format(a.cash_win_total))
    }
};
GiftspinsDetails.prototype._onClientUpdate = function (a)
{
    "giftspins.delete" == a.diff.state && (giftspins.confirmationDialog.visible = !1, giftspins.topPanel.update())
};
function GiftspinsPopup()
{
    PIXI.Container.call(this);
    this._blackout = new PIXI.Graphics;
    this._blackout.beginFill(0, .3);
    this._blackout.drawRect(0, 0, 1400, 800);
    this.addChild(this._blackout);
    this._content = new PIXI.Container;
    this._content.x = 700;
    this._content.y = 400;
    this.addChild(this._content);
    this._panel = new PIXI.Container;
    this._content.addChild(this._panel);
    this.interactive = !0
}
GiftspinsPopup.prototype = Object.create(PIXI.Container.prototype);
GiftspinsPopup.prototype.constructor = GiftspinsPopup;
GiftspinsPopup.prototype.show = function ()
{
    this._update();
    this.visible = !0;
    this._blackout.alpha = 1;
    this._content.x = 700;
    this._content.y = 400;
    this._content.scale.x = 1;
    this._content.scale.y = 1;
    var a = new MovieClip(giftspins.stage);
    a.addTween((new Tween(this, Tween.ALPHA_FUNC, 0)).move(1, 400));
    a.addAction(a.stop, 400);
    a.play(0);
    keyboardListener.block()
};
GiftspinsPopup.prototype.hide = function ()
{
    var a = new MovieClip(giftspins.stage);
    a.addTween((new Tween(this._content, function (a, c)
    {
        a.x = 700 * c;
        a.y = 400 * c;
        a.scale.x = c;
        a.scale.y = c;
    }, 1)).move(-1, 200));
    a.addTween((new Tween(this._blackout, Tween.ALPHA_FUNC, 1)).move(-1, 200));
    a.addAction(function ()
    {
        a.stop();
        this.visible = !1;
        giftspins.topPanel.update()
    }
    .bind(this), 200);
    a.play(0);
    keyboardListener.unblock()
};
GiftspinsPopup.prototype._update = function () {};
function GiftspinsProgressInfo(a)
{
    PIXI.Container.call(this);
    this._frame = new PIXI.Graphics;
    this.addChild(this._frame);
    this._infoIcon = Sprite.fromCommonFile("img/giftspins/icon_info.png");
    this.addChild(this._infoIcon);
    this._type = a || "restoration";
    this.init()
}
GiftspinsProgressInfo.prototype = Object.create(PIXI.Container.prototype);
GiftspinsProgressInfo.prototype.constructor = GiftspinsProgressInfo;
GiftspinsProgressInfo.prototype.init = function ()
{
    this._text = new TextField("restoration" == this._type ? "GIFTSPINS_PROGRESS_RESTORATION" : "GIFTSPINS_PROGRESS_INFO");
    this.addChild(this._text);
    var a = 20 < this._text.getRect().height ? this._text.getRect().height + 20 : 40;
    this._frame.beginFill(13817294);
    this._frame.drawRoundedRect(0, 0, 560, a, 7);
    this._infoIcon.x = 10;
    this._infoIcon.y = (a - 33) / 2
};
function GiftspinsConfirmationDialog()
{
    PIXI.Container.call(this);
    this._blackout = new PIXI.Graphics;
    this._blackout.beginFill(0, 0);
    this._blackout.drawRect(0, 0, 1400, 800);
    this.addChild(this._blackout);
    this._panel = new PIXI.Container;
    this._panel.addChild(Sprite.fromCommonFile("img/giftspins/confirmation_panel.png"));
    this._panel.x = 515;
    this._panel.y = 270;
    this.addChild(this._panel);
    this._text = new TextField("GIFTSPINS_CONFIRM_POPUP");
    this._panel.addChild(this._text);
    this._buttonOk = Button.createStandartCommonButton("img/giftspins/buttons/ok");
    this._buttonOk.x = 30;
    this._buttonOk.y = 150;
    this._panel.addChild(this._buttonOk);
    this._buttonCancel = Button.createStandartCommonButton("img/giftspins/buttons/cancel");
    this._buttonCancel.x = 198;
    this._buttonCancel.y = 150;
    this._panel.addChild(this._buttonCancel);
    this.init();
    this.interactive = !0
}
GiftspinsConfirmationDialog.prototype = Object.create(PIXI.Container.prototype);
GiftspinsConfirmationDialog.prototype.constructor = GiftspinsConfirmationDialog;
GiftspinsConfirmationDialog.prototype.init = function () {};
function GiftspinsDeletePopup()
{
    GiftspinsPopup.call(this);
    this._panel.x =- 305;
    this._panel.y =- 176;
    this._panel.addChild(Sprite.fromCommonFile("img/giftspins/no_win_panel.png"));
    this._text = new TextField("GIFTSPINS_DELETE_POPUP");
    this._text.token("total_bet", "-");
    this._text.token("lines", "-");
    this._panel.addChild(this._text);
    this._closeMovie = new MovieClip(giftspins.stage);
    this._closeMovie.addAction(this.click.bind(this), 3E3);
    this.interactive = !0;
    this.onClientUpdate(function (a)
    {
        !a.diff.state || "spin.giftspins.deleted" != clientData.state && "giftspins.overdue" != clientData.state || this.show()
    })
}
GiftspinsDeletePopup.prototype = Object.create(GiftspinsPopup.prototype);
GiftspinsDeletePopup.prototype.constructor = GiftspinsDeletePopup;
GiftspinsDeletePopup.prototype._update = function ()
{
    var a = serverData.giftspins[clientData.giftspins];
    a && (this._text.token("total_bet", currencyFormatter.format(a.bet * a.lines)), this._text.token("lines", 
    a.lines));
    this._closeMovie.play(0)
};
GiftspinsDeletePopup.prototype.click = function ()
{
    this._closeMovie.stop();
    this.hide();
    clientData.exitState()
};
function GiftspinsReconnectPopup()
{
    GiftspinsPopup.call(this);
    this._panel.x =- 305;
    this._panel.y =- 176;
    this._panel.addChild(Sprite.fromCommonFile("img/giftspins/reconnect_panel.png"));
    this._text1 = new TextField("GIFTSPINS_RECONNECT_POPUP_1");
    this._text2 = new TextField("GIFTSPINS_RECONNECT_POPUP_2");
    this._text3 = new TextField("GIFTSPINS_RECONNECT_POPUP_3");
    this._text3.token("total_bet", "-");
    this._text3.token("lines", "-");
    this._text3.token("total_spins", "-");
    this._text3.token("spins", "-");
    this._panel.addChild(this._text1);
    this._panel.addChild(this._text2);
    this._panel.addChild(this._text3);
    var a = Sprite.fromCommonFile("img/giftspins/start/ribbon.png");
    a.x =- 6;
    a.y = 94;
    this._panel.addChild(a);
    this._textSpins = new TextField("GIFTSPINS_RECONNECT_POPUP_SPINS");
    this._textSpins.token("value", "-");
    this._panel.addChild(this._textSpins);
    slotConfig.progress && (this._progressInfo = new GiftspinsProgressInfo("info"), this._progressInfo.x = 24, 
    this._progressInfo.y = 239, this._panel.addChild(this._progressInfo));
    this._closeMovie = new MovieClip(giftspins.stage);
    this._closeMovie.addAction(this.click.bind(this), 3E3);
    this.interactive = !0
}
GiftspinsReconnectPopup.prototype = Object.create(GiftspinsPopup.prototype);
GiftspinsReconnectPopup.prototype.constructor = GiftspinsReconnectPopup;
GiftspinsReconnectPopup.prototype._update = function ()
{
    var a = serverData.giftspins[clientData.giftspins];
    a && (this._text3.token("total_bet", currencyFormatter.format(a.bet * a.lines)), this._text3.token("lines", 
    a.lines), this._text3.token("total_spins", a.count_total), this._text3.token("spins", a.count_left), 
    this._textSpins.token("value", a.count_left), this._closeMovie.play(0))
};
GiftspinsReconnectPopup.prototype.show = function ()
{
    GiftspinsPopup.prototype.show.call(this);
    Stage.MAIN.pause();
    sound.get("sfx").pause()
};
GiftspinsReconnectPopup.prototype.hide = function ()
{
    GiftspinsPopup.prototype.hide.call(this);
    Stage.MAIN.resume();
    sound.get("sfx").resume()
};
GiftspinsReconnectPopup.prototype.click = function ()
{
    this._closeMovie.stop();
    this.hide()
};
function GiftspinsStartPopup()
{
    GiftspinsPopup.call(this);
    this._panel.x =- 305;
    this._panel.y =- 176;
    this._panel.addChild(Sprite.fromCommonFile("img/giftspins/start/panel.png"));
    this._text = new TextField("GIFTSPINS_START_POPUP");
    this._text.token("total_bet", "-");
    this._text.token("lines", "-");
    this._text.token("total_lines", "-");
    this._text.token("spins", "-");
    this._panel.addChild(this._text);
    this._leftArrow = Button.createStandartCommonButton("img/giftspins/buttons/arrow_left");
    this._leftArrow.x = 220;
    this._leftArrow.y = 210;
    this._leftArrow.click = function ()
    {
        this._setPage((0 == this._page ? this._pages.length : this._page) - 1)
    }
    .bind(this);
    this._panel.addChild(this._leftArrow);
    this._rightArrow = Button.createStandartCommonButton("img/giftspins/buttons/arrow_right");
    this._rightArrow.x = 570;
    this._rightArrow.y = 210;
    this._rightArrow.click = function ()
    {
        this._setPage((this._page + 1) % this._pages.length)
    }
    .bind(this);
    this._panel.addChild(this._rightArrow);
    this._closeButton = Button.createStandartCommonButton("img/giftspins/buttons/close");
    this._closeButton.x = 570;
    this._closeButton.y = 12;
    this._closeButton.click = function ()
    {
        for (var a = [], c = 0; c < Math.min(this._pages.length, 15); c++) {
            var d = this._pages[c];
            "new" == serverData.giftspins[d].status && a.push(d)
        }
        serverData.sendGiftspinsPostpone(a);
        this.hide()
    }
    .bind(this);
    this._panel.addChild(this._closeButton);
    this._playButton = Button.createStandartCommonButton("img/giftspins/buttons/play", 
    {
        up : "GIFTSPINS_START_POPUP_PLAY_UP", over : "GIFTSPINS_START_POPUP_PLAY_OVER", down : "GIFTSPINS_START_POPUP_PLAY_DOWN", 
        disabled : "GIFTSPINS_START_POPUP_PLAY_DISABLED"
    });
    this._playButton.x = 440;
    this._playButton.y = 290;
    this._playButton.click = function ()
    {
        clientData.giftspins = this._pages[this._page];
        clientData.giftspinsNumber = serverData.giftspins[clientData.giftspins].count_total;
        clientData.act("giftspins.start")
    }
    .bind(this);
    this._panel.addChild(this._playButton);
    this._trashButton = Button.createStandartCommonButton("img/giftspins/buttons/trash");
    this._trashButton.x = 220;
    this._trashButton.y = 293;
    this._trashButton.click = function ()
    {
        giftspins.confirmationDialog.visible = !0;
        giftspins.confirmationDialog._buttonOk.enabled = !0;
        giftspins.confirmationDialog._buttonCancel.enabled = !0;
        giftspins.confirmationDialog._buttonOk.click = function ()
        {
            serverData.sendGiftspinsDelete(this._pages[this._page]);
            this._pages = serverData.getAvailableGiftspinsOffers();
            0 < this._pages.length ? this._setPage(Math.min(this._page, this._pages.length - 1)) : this.hide();
            giftspins.confirmationDialog.visible = !1
        }
        .bind(this);
        giftspins.confirmationDialog._buttonCancel.click = function ()
        {
            giftspins.confirmationDialog.visible = !1
        }
    }
    .bind(this);
    this._panel.addChild(this._trashButton);
    if (GiftspinsStartPopup.BANNER)
    {
        var a = Sprite.fromFile(GiftspinsStartPopup.BANNER.image);
        a.x = GiftspinsStartPopup.BANNER.x;
        a.y = GiftspinsStartPopup.BANNER.y;
        this._panel.addChild(a)
    }
    a = Sprite.fromCommonFile("img/giftspins/start/ribbon.png");
    a.x =- 6;
    a.y = 225;
    this._panel.addChild(a);
    this._textSpins = new TextField("GIFTSPINS_START_POPUP_SPINS");
    this._textSpins.token("value", "-");
    this._panel.addChild(this._textSpins);
    this._points = new PIXI.Container;
    this._points.x = 340;
    this._points.y = 310;
    this._panel.addChild(this._points);
    this._page = 0;
    this._pages = [];
    slotConfig.progress && (this._progressInfo = new GiftspinsProgressInfo("info"), this._progressInfo.x = 24, 
    this._progressInfo.y = 350, this._panel.addChild(this._progressInfo));
    this.onClientUpdate(function (a)
    {
        "bet.idle" == a.diff.state && "giftspins.start" == clientData.state ? this._playButton.enabled = this._trashButton.enabled = this._closeButton.enabled = this._leftArrow.enabled = this._rightArrow.enabled = !1 : "giftspins.start" == a.diff.state && this.hide();
    })
}
GiftspinsStartPopup.prototype = Object.create(GiftspinsPopup.prototype);
GiftspinsStartPopup.prototype.constructor = GiftspinsStartPopup;
GiftspinsStartPopup.BANNER = null;
GiftspinsStartPopup.prototype._update = function ()
{
    this._pages = serverData.getAvailableGiftspinsOffers();
    this._setPage(0)
};
GiftspinsStartPopup.prototype._setPage = function (a)
{
    var b = Math.min(this._pages.length, 15);
    this._page = a;
    var c = serverData.giftspins[this._pages[a]];
    this._text.token("total_bet", currencyFormatter.format(c.bet * c.lines));
    this._text.token("lines", c.lines);
    this._text.token("total_lines", slotConfig.lines);
    this._text.token("spins", c.count_total);
    this._textSpins.token("value", c.count_total);
    this._points.removeChildren();
    for (c = 0; c < b; c++)
    {
        var d = Sprite.fromCommonFile(c == a ? "img/giftspins/start/point_enabled.png" : "img/giftspins/start/point_disabled.png");
        d.x = 10 * (c - b / 2);
        this._points.addChild(d)
    }
    b < this._pages.length && (a = Sprite.fromCommonFile(15 <= a ? "img/giftspins/start/plus_enabled.png" : "img/giftspins/start/plus_disabled.png"), 
    a.x = 75, a.y =- 3, this._points.addChild(a));
    this._points.visible = this._leftArrow.visible = this._rightArrow.visible = 1 < this._pages.length;
    this._leftArrow.enabled = this._rightArrow.enabled = this._playButton.enabled = this._trashButton.enabled = this._closeButton.enabled = !0;
};
function GiftspinsSummaryPopup()
{
    GiftspinsPopup.call(this);
    this._winPanel = new PIXI.Container;
    this._panel.addChild(this._winPanel);
    this._winPanel.x =- 305;
    this._winPanel.y =- 176;
    this._winPanel.addChild(Sprite.fromCommonFile("img/giftspins/win_panel.png"));
    if (GiftspinsSummaryPopup.BANNER)
    {
        var a = Sprite.fromFile(GiftspinsSummaryPopup.BANNER.image);
        a.x = GiftspinsSummaryPopup.BANNER.x;
        a.y = GiftspinsSummaryPopup.BANNER.y;
        this._winPanel.addChild(a)
    }
    this._winPanel._text = new TextField("GIFTSPINS_WIN_POPUP");
    this._winPanel._text.token("win", "-");
    this._winPanel._text.token("total_bet", "-");
    this._winPanel._text.token("lines", "-");
    this._winPanel._text.token("spins", "-");
    this._winPanel.addChild(this._winPanel._text);
    this._noWinPanel = new PIXI.Container;
    this._panel.addChild(this._noWinPanel);
    this._noWinPanel.x =- 305;
    this._noWinPanel.y =- 176;
    this._noWinPanel.addChild(Sprite.fromCommonFile("img/giftspins/no_win_panel.png"));
    this._noWinPanel._text = new TextField("GIFTSPINS_NO_WIN_POPUP");
    this._noWinPanel._text.token("win", currencyFormatter.format(0));
    this._noWinPanel._text.token("spins", "-");
    this._noWinPanel.addChild(this._noWinPanel._text);
    slotConfig.progress && (this._progressInfo = new GiftspinsProgressInfo("restoration"), this._panel.addChild(this._progressInfo));
    this._closeMovie = new MovieClip(giftspins.stage);
    this._closeMovie.addAction(this.click.bind(this), 5E3);
    this.interactive = !0
}
GiftspinsSummaryPopup.prototype = Object.create(GiftspinsPopup.prototype);
GiftspinsSummaryPopup.prototype.constructor = GiftspinsSummaryPopup;
GiftspinsSummaryPopup.BANNER = null;
GiftspinsSummaryPopup.prototype._update = function ()
{
    var a = serverData.giftspins[clientData.giftspins];
    a && (this._winPanel.visible = 0 < a.cash_win_total, this._winPanel._text.token("win", currencyFormatter.format(a.cash_win_total)), 
    this._winPanel._text.token("total_bet", currencyFormatter.format(a.bet * a.lines)), this._winPanel._text.token("lines", 
    a.lines), this._winPanel._text.token("spins", a.count_total), this._noWinPanel.visible = 0 == a.cash_win_total, 
    this._noWinPanel._text.token("spins", a.count_total), slotConfig.progress && (this._progressInfo.x =- 281, 
    this._progressInfo.y = 0 < a.cash_win_total ? 144 : 63), this._closeMovie.play(0));
};
GiftspinsSummaryPopup.prototype.click = function ()
{
    this._closeMovie.stop();
    this.hide();
    clientData.exitState()
};
function GiftspinsTopPanel()
{
    PIXI.Container.call(this);
    this._buttons = {};
    this._buttons["new"] = Button.createStandartCommonButton("img/giftspins/buttons/icon_new");
    this._buttons["new"].mouseover = function (a)
    {
        Button.prototype.mouseover.call(this._buttons.postponed, a);
        this.isPostponedButtonAvailable() || this._waitTooltip2.visible || (this._waitTooltip2._bonusText.visible = this.isNotMainGame(), 
        this._waitTooltip2._text.visible = !this.isNotMainGame(), this._waitTooltip2.toggle())
    }
    .bind(this);
    this.addChild(this._buttons["new"]);
    this._waitTooltip2 = this._createWaitTooltip(!1);
    this._waitTooltip2.visible = !1;
    this._buttons["new"].addChildAt(this._waitTooltip2, 0);
    this._buttons.deleted = Button.createStandartCommonButton("img/giftspins/buttons/icon_deleted");
    this.addChild(this._buttons.deleted);
    this._buttons.active = Button.createStandartCommonButton("img/giftspins/buttons/icon_active");
    this._buttons.active.states[Button.UP].interactiveChildren = this._buttons.active.states[Button.OVER].interactiveChildren = this._buttons.active.states[Button.DOWN].interactiveChildren = this._buttons.active.states[Button.DISABLED].interactiveChildren = !1;
    this._buttons.active.click = function ()
    {
        this._details.toggle()
    }
    .bind(this);
    this.addChild(this._buttons.active);
    this._details = new GiftspinsDetails;
    this._details.visible = !1;
    this._buttons.active.addChildAt(this._details, 0);
    this._buttons.postponed = Button.createStandartCommonButton("img/giftspins/buttons/icon_postponed");
    this._buttons.postponed.states[Button.UP].interactiveChildren = this._buttons.postponed.states[Button.OVER].interactiveChildren = this._buttons.postponed.states[Button.DOWN].interactiveChildren = this._buttons.postponed.states[Button.DISABLED].interactiveChildren = !1;
    this._buttons.postponed.click = function ()
    {
        this.isPostponedButtonAvailable() && giftspins.startPopup.show()
    }
    .bind(this);
    this._buttons.postponed.mouseover = function (a)
    {
        Button.prototype.mouseover.call(this._buttons.postponed, a);
        this.isPostponedButtonAvailable() || this._waitTooltip1.visible || (this._waitTooltip1._bonusText.visible = this.isNotMainGame(), 
        this._waitTooltip1._text.visible = !this.isNotMainGame(), this._waitTooltip1.toggle())
    }
    .bind(this);
    this.addChild(this._buttons.postponed);
    this._waitTooltip1 = this._createWaitTooltip(!0);
    this._waitTooltip1.visible = !1;
    this._buttons.postponed.addChildAt(this._waitTooltip1, 0);
    this._buttons.no = Button.createStandartCommonButton("img/giftspins/buttons/icon_no");
    this._buttons.no.states[Button.UP].interactiveChildren = this._buttons.no.states[Button.OVER].interactiveChildren = this._buttons.no.states[Button.DOWN].interactiveChildren = this._buttons.no.states[Button.DISABLED].interactiveChildren = !1;
    this._buttons.no.mouseover = function (a)
    {
        Button.prototype.mouseover.call(this._buttons.no, a);
        this._noOfferTooltip.visible || this._noOfferTooltip.toggle()
    }
    .bind(this);
    this.addChild(this._buttons.no);
    this._noOfferTooltip = this._createNoOfferTooltip();
    this._noOfferTooltip.visible = !1;
    this._buttons.no.addChildAt(this._noOfferTooltip, 0);
    this._info = this._createInfo();
    this.addChild(this._info);
    giftspins.stage.addEventListener(GameEvent.RESIZE, this._resize.bind(this));
    this._resize();
    this.onClientUpdate(function (a)
    {
        "spin.start" == a.diff.state && this.update()
    })
}
GiftspinsTopPanel.prototype = Object.create(PIXI.Container.prototype);
GiftspinsTopPanel.prototype.constructor = GiftspinsTopPanel;
GiftspinsTopPanel.prototype._createWaitTooltip = function (a)
{
    var b = new GiftspinsTooltip;
    b.addChild(Sprite.fromCommonFile("img/giftspins/tooltip_panel.png"));
    b._bonusText = new TextField("GIFTSPINS_BONUS_WAIT_TOOLTIP");
    b.addChild(b._bonusText);
    b._text = new TextField("GIFTSPINS_WAIT_TOOLTIP");
    b.addChild(b._text);
    a && (a = b.checkbox = Sprite.fromCommonFiles(["img/giftspins/buttons/checkbox/off.png", "img/giftspins/buttons/checkbox/on.png"]), 
    a.x = 10, a.y = 100, a.buttonMode = !0, a.interactive = !0, a.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        sound.play("main.checkbox.click")
    },
    b.addChild(a), b.addChild(new TextField("GIFTSPINS_AUTOSTART_TOOLTIP")));
    return b;
};
GiftspinsTopPanel.prototype._createNoOfferTooltip = function ()
{
    var a = new GiftspinsTooltip;
    a.addChild(Sprite.fromCommonFile("img/giftspins/no_offer_tooltip_left.png"));
    var b = Sprite.fromCommonFile("img/giftspins/no_offer_tooltip_center.png");
    b.x = 30;
    a.addChild(b);
    var c = Sprite.fromCommonFile("img/giftspins/no_offer_tooltip_right.png");
    a.addChild(c);
    var d = new TextField("GIFTSPINS_NO_OFFER_TOOLTIP");
    a.addChild(d);
    d = d.getRect().width + 8;
    b.scale.x = d / 100;
    c.x = d + 30;
    return a;
};
GiftspinsTopPanel.prototype._createInfo = function ()
{
    var a = new PIXI.Container, b = Sprite.fromCommonFile("img/giftspins/info_panel.png");
    b.x =- 140;
    a.addChild(b);
    a._text = new TextField("GIFTSPINS_INFO_SPINS");
    a._text.token("value", clientData.giftspinsNumber);
    a._text.onClientUpdate(function (a)
    {
        this.token("value", clientData.giftspinsNumber)
    });
    a.addChild(a._text);
    a.addChild(new TextField("GIFTSPINS_INFO_LABEL"));
    return a;
};
GiftspinsTopPanel.prototype._resize = function ()
{
    var a = giftspins.stage.getViewPort();
    this.x = a.x;
    this.y = a.y;
    this.scale.x = this.scale.y = 1 / a.scale;
    this._info.x = (700 - this.x) * a.scale
};
GiftspinsTopPanel.prototype._setButton = function (a)
{
    this._buttons["new"].visible = "new" == a;
    this._buttons.deleted.visible = "deleted" == a;
    this._buttons.active.visible = "active" == a;
    this._buttons.postponed.visible = "postponed" == a;
    this._buttons.no.visible = "no" == a;
};
GiftspinsTopPanel.prototype.update = function ()
{
    this._details.update();
    this._info.visible = !1;
     - 1 != clientData.giftspins ? (this._setButton("active"), this._info.visible = !0) : serverData.hasNewGiftspinsOffers() ? this._setButton("new") : 0 < serverData.getAvailableGiftspinsOffers().length ? this._setButton("postponed") : this._setButton("no")
};
GiftspinsTopPanel.prototype.isPostponedButtonAvailable = function ()
{
    return "bet.idle" == clientData.state && !clientData.autoplayActive && !clientData.freespinsActive && !paytable.visible;
};
GiftspinsTopPanel.prototype.isNotMainGame = function ()
{
    return clientData.freespinsActive || paytable.visible || 0 == clientData.state.indexOf("bonus.") || 0 == clientData.state.indexOf("freespins.");
};
function CombinationEditorSymbol(a, b, c)
{
    this.editor = a;
    this.column = b;
    this.row = c;
    this.view = $("<div class='symbol'>\r\n            <canvas class='symbol-canvas'></canvas>\r\n            <div class='spin prev'></div> \r\n            <div class='spin next'></div> \r\n            <div class='spin prev-current'></div>\r\n            <div class='spin next-current'></div>\r\n            <div class='id'/>\r\n         </div>");
    this.view.find("canvas").attr("width", SlotSymbol.width);
    this.view.find("canvas").attr("height", SlotSymbol.height);
    this.renderer = PIXI.autoDetectRenderer(SlotSymbol.width, SlotSymbol.height, {
        view : this.view.find("canvas")[0], transparent :!0
    },
    !0);
    this.view.find("canvas").on("click", this, function (a)
    {
        a = a.data;
        a.editor.edit(a)
    });
    this.view.find(".spin.prev").on("click", this, function (a)
    {
        a = a.data;
        a.editor[a.column].shiftToNextSymbol(a.row, !1)
    });
    this.view.find(".spin.next").on("click", this, function (a)
    {
        a = a.data;
        a.editor[a.column].shiftToNextSymbol(a.row, !0)
    });
    this.view.find(".spin.prev-current").on("click", this, function (a)
    {
        a = a.data;
        a.editor[a.column].shiftToNextCurrentSymbol(a.row, !1)
    });
    this.view.find(".spin.next-current").on("click", this, function (a)
    {
        a = a.data;
        a.editor[a.column].shiftToNextCurrentSymbol(a.row, !0)
    })
}
CombinationEditorSymbol.prototype.setId = function (a)
{
    var b = SlotSymbol.get(a, this.column);
    this.renderer.render(b);
    this.view.children(".id").html(a)
};
function CombinationEditorReel(a, b)
{
    this.column = b;
    this.strip = [0, 0, 0, 0, 0, 0];
    this.offset = 0;
    this.view = $("<div class='reel'/>");
    for (var c = 1; c <= slotConfig.rows; c++) {
        this [c] = new CombinationEditorSymbol(a, b, c), this [c].view.appendTo(this.view);
    }
}
$.extend(CombinationEditorReel.prototype, 
{
    setStrip : function (a)
    {
        this.strip = a;
        this.update()
    },
    setOffset : function (a)
    {
        this.offset = this.correct(a);
        this.update()
    },
    correct : function (a)
    {
        return (a % this.strip.length + this.strip.length) % this.strip.length;
    },
    update : function ()
    {
        for (var a = 1; a <= slotConfig.rows; a++) {
            this [a].setId(this.getSymbolId(this.offset, a));
        }
    },
    shift : function (a, b)
    {
        b = this.correct(this.offset + (a ? 1 :- 1 * (b || 1)));
        this.setOffset(b)
    },
    getSymbolId : function (a, b)
    {
        return this.strip[this.correct(b - a - 1)];
    },
    shiftToNextSymbol : function (a, b)
    {
        for (var c = 1; c < SlotSymbol.number; c++)
        {
            var d = (this.getSymbolId(this.offset, a) + c * (b ? 1 :- 1) - 1 + SlotSymbol.number) % SlotSymbol.number + 1, 
            d = this.getNextSymbolPosition(d, this.offset, a, b);
            if (null !== d) {
                this.setOffset(d);
                break
            }
        }
    },
    shiftToNextCurrentSymbol : function (a, b)
    {
        var c = this.getNextSymbolPosition(this.getSymbolId(this.offset, a), this.offset, a, b);
        null !== c && this.setOffset(c)
    },
    getNextSymbolPosition : function (a, b, c, d)
    {
        for (var e = 1; e < this.strip.length; e++) {
            var f = b + e * (d ? 1 :- 1);
            if (this.getSymbolId(f, c) == a) {
                return f;
            }
        }
        return null;
    }
});
function CombinationEditor()
{
    this.view = $("<div class='combination-editor'><select class='reelset-selector'></select></div>");
    this.selector = this.view.find(".reelset-selector");
    this.editedSymbol = null;
    for (var a = 1; a <= slotConfig.columns; a++) {
        this [a] = new CombinationEditorReel(this, a), this [a].view.appendTo(this.view);
    }
    for (var b in serverData.reelSets) {
        a = $("<option/>"), a.append(String(b)), this.selector.append(a);
    }
    this.selector.on("change", this, function (a)
    {
        a = a.data;
        a.setReelSetId(parseInt(a.selector.val(), 10))
    });
    this.setReelSetId(1);
    $("head").append($('<style type="text/css">' + CombinationEditor.css + "</style>"))
}
$.extend(CombinationEditor.prototype, 
{
    setCombination : function (a)
    {
        for (var b = 1; b <= slotConfig.columns; b++) {
            this [b].setOffset(a[b - 1]);
        }
    },
    getCombination : function ()
    {
        for (var a = [], b = 1; b <= slotConfig.columns; b++) {
            a[b - 1] = this [b].offset;
        }
        return a;
    },
    edit : function (a)
    {
        this.editedSymbol && this.editedSymbol.view.removeClass("edited");
        this.editedSymbol == a ? (this.view.removeClass("edited"), this.editedSymbol = null) : ($(".combination-editor").addClass("edited"), 
        this.editedSymbol = a, this.editedSymbol.view.addClass("edited"));
    },
    setReelSetId : function (a)
    {
        for (var b = 1; b <= slotConfig.columns; b++) {
            this [b].setStrip(serverData.reelSets[a][b]);
        }
    }
});
CombinationEditor.css = "\r\n    .combination-editor\r\n    {\r\n        position: absolute;\r\n        height: 92%;\r\n        width:  96%;\r\n        padding-left: 2%;\r\n        padding-right: 2%;\r\n        padding-bottom: 1%;\r\n        padding-top: 1%;\r\n        \r\n        display: -webkit-flex;\r\n        display: -moz-box;\r\n        display: -ms-flexbox;\r\n        display: flex;\r\n        \r\n        justify-content: space-around\r\n    }\r\n    .combination-editor .reel\r\n    {\r\n        display: -webkit-flex;\r\n        display: -moz-box;\r\n        display: -ms-flexbox;\r\n        display: flex;\r\n        width: 100%;\r\n        height: 100%;\r\n        -webkit-flex-direction: column;\r\n        flex-direction: column;\r\n        padding-bottom: 1%;\r\n        padding-top: 1%;\r\n        \r\n        justify-content: space-around\r\n    }\r\n    .combination-editor .reel .symbol\r\n    {\r\n        display:-webkit-box;\r\n        \r\n        -webkit-box-flex: 1;\r\n        -webkit-flex: 1;\r\n        -ms-flex: 1;\r\n        flex: 1;\r\n        -webkit-user-select: none;\r\n        margin: 1%;\r\n        justify-content: space-around;\r\n        position: relative;\r\n        background: white;\r\n        height: 24%\r\n    }\r\n    .symbol-canvas\r\n    {\r\n        position: absolute;\r\n        width:100%;\r\n        height:100%;\r\n    }\r\n    .combination-editor .symbol .id\r\n    {\r\n        position: absolute;\r\n        background: red;\r\n        font-size: 20px;\r\n        top: 0px;\r\n        left: 0px;\r\n    }\r\n    .combination-editor .reelset-selector\r\n    {\r\n        position:absolute;\r\n    }\r\n    .combination-editor.edited .symbol.edited\r\n    {\r\n        opacity: 1;\r\n    }\r\n    .combination-editor.edited .symbol\r\n    {\r\n        opacity: 0.4;\r\n    }\r\n    .combination-editor.edited .symbol.edited .spin\r\n    {\r\n        background: blue;\r\n        position: absolute;\r\n        z-index: 9999;\r\n    }\r\n    .combination-editor.edited .symbol.edited .spin.next\r\n    {\r\n        height: 100%;\r\n        width: 25%;\r\n        right: -25%;\r\n    }\r\n    .combination-editor.edited .symbol.edited .spin.prev\r\n    {\r\n        height: 100%;\r\n        width: 25%;\r\n        left: -25%;\r\n    }\r\n    .combination-editor.edited .symbol.edited .spin.prev-current\r\n    {\r\n        height: 30%;\r\n        width: 100%;\r\n        top: -30%;\r\n    }\r\n    .combination-editor.edited .symbol.edited .spin.next-current\r\n    {\r\n        height: 30%;\r\n        width: 100%;\r\n        bottom: -30%;\r\n    }\r\n    .combination-editor .reelset-selector\r\n    {\r\n        position: absolute;\r\n        left: 50%;\r\n        top: -50px;\r\n        width: 50px;\r\n        height: 30px;\r\n    }\r\n    .iPad1 .combination-editor\r\n    {\r\n        display: -webkit-flex;\r\n        display: -moz-box;\r\n        display: -ms-flexbox;\r\n        display: -khtml-box;\r\n        display: flex;\r\n        \r\n        -khtml-box-flex: 1;\r\n        justify-content: space-around\r\n    }\r\n    .iPad1 .combination-editor .reel\r\n    {\r\n        display: -webkit-flex;\r\n        display: -moz-box;\r\n        display: -ms-flexbox;\r\n        display: -khtml-box;\r\n        display: flex;\r\n        -webkit-flex-direction: column;\r\n        flex-direction: column;\r\n        -khtml-box-flex: 1;\r\n        -khtml-box-direction: normal;\r\n        -khtml-box-orient: vertical;\r\n        \r\n        justify-content: space-around;\r\n        width: 100%;\r\n        height: 100%\r\n    }\r\n    .nativeAndroidBrowser .combination-editor\r\n    {\r\n        display: -webkit-flex;\r\n        display: -moz-box;\r\n        display: -ms-flexbox;\r\n        display: flex;\r\n        display: -khtml-box;\r\n        \r\n        -khtml-box-flex: 1;\r\n        justify-content: space-around\r\n    }\r\n    .nativeAndroidBrowser .combination-editor .reel\r\n    {\r\n        display: -webkit-flex;\r\n        display: -moz-box;\r\n        display: -ms-flexbox;\r\n        display: -khtml-box;\r\n        display: flex;\r\n        -webkit-flex-direction: column;\r\n        flex-direction: column;\r\n        -khtml-box-flex: 1;\r\n        -khtml-box-direction: normal;\r\n        -khtml-box-orient: vertical;\r\n        \r\n        justify-content: space-around;\r\n        width: 100%;\r\n        height: 100%\r\n    }";
Shifter.CombinationEditor = CombinationEditor;
(function ()
{
    function a(a, b, c, e, f)
    {
        if (15 <= f)
        {
            var g = new PIXI.Container;
            a.addChildAt(g, 1);
            var h = Sprite.fromFile("img/main/wins/big/big.png");
            h.anchor.x = 1.05;
            h.anchor.y = .5;
            h.x = 700;
            h.y = 290;
            g.addChild(h);
            a = Sprite.fromFile("img/main/wins/big/win.png");
            a.anchor.x =- .01;
            a.anchor.y = .5;
            a.x = 700;
            a.y = 290;
            g.addChild(a);
            var p = Sprite.fromFolder("img/main/wins/big/glow", 21);
            p.x = 150;
            p.scale.x = 2;
            p.scale.y = 2;
            b.addChild(p);
            g = (new Tween(g, Tween.ALPHA_FUNC, 0)).move(1, 2E3, Tween.JUMP);
            c.addTween(g);
            c.addTween((new Tween(p, Tween.ALPHA_FUNC, 0)).move(0, 1E3).move(1, 1E3).move(0, 4800).move(-1, 
            200));
            c.addTween((new SpriteTween(p)).move("0-20,0-20,0-20,0-20", 7E3));
            p = (new Tween(h, Tween.SCALE_FUNC, 2)).move(0, 2E3).move(-1.3, 200).move(.15, 75).move(-.05, 
            25);
            c.addTween(p);
            c.addTween((new Tween(h, Tween.ALPHA_FUNC, 0)).move(1, 2E3, Tween.JUMP));
            h = (new Tween(a, Tween.SCALE_FUNC, 2)).move(0, 2400).move(-1.3, 200).move(.15, 75).move(-.05, 
            25);
            c.addTween(h);
            c.addTween((new Tween(a, Tween.ALPHA_FUNC, 0)).move(1, 2400, Tween.JUMP));
            e.move(.7, 1).move(-.7, 399, Tween.POW, 1.5).move(.7, 1, Tween.JUMP).move(-.7, 599, Tween.POW, 
            1.5);
            d(b, 2100, c, m);
            d(b, 2600, c, q);
            19 <= f && (p.move(0, 1300).move(-.1, 300).move(.2, 50).move(-.05, 50), h.move(0, 900).move(-.1, 
            300).move(.2, 50).move(-.05, 50), e.move(.7, 1E3, Tween.JUMP).move(-.7, 600, Tween.POW, 1.5), 
            d(b, 3950, c, q));
            22 <= f && (p.move(0, 1400).move(-.1, 300).move(.2, 50).move(-.05, 50), h.move(0, 1400).move(-.1, 
            300).move(.2, 50).move(-.05, 50), e.move(.7, 1200, Tween.JUMP).move(-.7, 600, Tween.POW, 1.5).move(0, 
            600), d(b, 5750, c, q));
            25 <= f && (p.move(0, 1E3).move(-.5, 200), h.move(0, 1E3).move(-.5, 200), g.move(0, 4800).move(-1, 
            200));
            sound.get("sfx").play("main.big.win.start")
        }
    }
    function b(a, b, c, f, g)
    {
        if (25 <= g)
        {
            var h = new PIXI.Container;
            a.addChildAt(h, 1);
            var k = Sprite.fromFiles(["img/main/wins/super/super_1.png", "img/main/wins/super/super_2.png"]);
            k.anchor.x = .87;
            k.anchor.y = .5;
            k.x = 700;
            k.y = 340;
            h.addChild(k);
            a = Sprite.fromFiles(["img/main/wins/super/win_1.png", "img/main/wins/super/win_2.png"]);
            a.anchor.x =- .12;
            a.anchor.y = .5;
            a.x = 700;
            a.y = 340;
            h.addChild(a);
            h = (new Tween(h, Tween.ALPHA_FUNC, 0)).move(1, 7E3, Tween.JUMP);
            c.addTween(h);
            var l = (new Tween(k, Tween.SCALE_FUNC, 1.8)).move(0, 7E3).move(-1.3, 200).move(.15, 75).move(-.05, 
            25);
            c.addTween(l);
            var n = (new SpriteTween(k)).move("0", 7300).move("1,0,1,0", 500).move("0", 500).move("1,0,1,0", 
            500).move("0", 500);
            c.addTween(n);
            c.addTween((new Tween(k, Tween.ALPHA_FUNC, 0)).move(1, 7E3, Tween.JUMP));
            k = (new Tween(a, Tween.SCALE_FUNC, 1.8)).move(0, 7400).move(-1.3, 200).move(.15, 75).move(-.05, 
            25);
            c.addTween(k);
            var x = (new SpriteTween(a)).move("0", 7800).move("1,0,1,0", 500).move("0", 500).move("1,0,1,0", 
            500);
            c.addTween(x);
            c.addTween((new Tween(a, Tween.ALPHA_FUNC, 0)).move(1, 7400, Tween.JUMP));
            f.move(.7, 1).move(-.7, 399, Tween.POW, 1.5).move(.7, 1, Tween.JUMP).move(-.7, 599, Tween.POW, 
            1.5);
            d(b, 7100, c, q);
            e(b, 7100, c, p);
            29 <= g && (l.move(0, 1300).move(-.1, 300).move(.2, 50).move(-.05, 50), n.move("1,0,1,0", 
            500).move("0", 500), k.move(0, 900).move(-.1, 300).move(.2, 50).move(-.05, 50), x.move("0", 
            500).move("1,0,1,0", 500), f.move(.7, 1E3, Tween.JUMP).move(-.7, 600, Tween.POW, 1.5), d(b, 
            8950, c, q), e(b, 8950, c, p));
            32 <= g && (l.move(0, 1400).move(-.1, 300).move(.2, 50).move(-.05, 50), n.move("1,0,1,0", 
            500).move("0", 500), k.move(0, 1400).move(-.1, 300).move(.2, 50).move(-.05, 50), x.move("0", 
            500).move("1,0,1,0", 500), f.move(.7, 1200, Tween.JUMP).move(-.7, 600, Tween.POW, 1.5).move(0, 
            600), d(b, 10750, c, q), e(b, 10750, c, p));
            35 <= g && (l.move(0, 1E3).move(-.5, 200), n.move("1,0,1,0", 500), k.move(0, 1E3).move(-.5, 
            200), h.move(0, 4800).move(-1, 200));
            c.addAction(function ()
            {
                sound.get("sfx").play("main.super.win.start")
            }, 7E3)
        }
    }
    function c(a, b, c, f, g)
    {
        if (35 <= g)
        {
            var h = new PIXI.Container;
            a.addChildAt(h, 1);
            var k = Sprite.fromFile("img/main/wins/mega/mega.png");
            k.anchor.x = .95;
            k.anchor.y = .5;
            k.x = 700;
            k.y = 360;
            h.addChild(k);
            a = Sprite.fromFile("img/main/wins/mega/win.png");
            a.anchor.x =- .2;
            a.anchor.y = .5;
            a.x = 700;
            a.y = 360;
            h.addChild(a);
            h = Sprite.fromFile("img/main/wins/mega/rays.png");
            h.x = 700;
            h.y = 350;
            h.anchor.x = .5;
            b.addChild(h);
            var l = Sprite.fromFile("img/main/wins/mega/rays.png");
            l.x = 700;
            l.y = 350;
            l.anchor.x = .5;
            b.addChild(l);
            var m = 39 > g ? 1500 : 42 > g ? 3E3 : 45 > g ? 5E3 : 5E3 + 1E3 * Math.ceil(33 * (g - 45) / 60);
            c.addTween((new Tween(h, Tween.ALPHA_FUNC, 0)).move(1, 12E3, Tween.JUMP).move(0, m).move(-1, 
            500));
            c.addTween((new Tween(h, function (a, b)
            {
                a.scale.y = Math.sin(b);
                a.rotation = .15 * Math.sin(2 * b)
            }, 0)).move(0, 12E3).move(90 * Math.PI, 15E4));
            c.addTween((new Tween(l, Tween.ALPHA_FUNC, 0)).move(1, 12E3, Tween.JUMP).move(0, m).move(-1, 
            500));
            c.addTween((new Tween(l, function (a, b)
            {
                a.scale.y = Math.sin(b);
                a.rotation = .15 * Math.sin(2 * b)
            },
            Math.PI / 2)).move(0, 12E3).move(90 * Math.PI, 15E4));
            h = (new Tween(k, Tween.SCALE_FUNC, 1.6)).move(0, 12E3).move(-1.3, 200).move(.15, 75).move(-.05, 
            25);
            c.addTween(h);
            c.addTween((new Tween(k, Tween.ALPHA_FUNC, 0)).move(1, 12E3, Tween.JUMP));
            k = (new Tween(a, Tween.SCALE_FUNC, 1.6)).move(0, 12400).move(-1.3, 200).move(.15, 75).move(-.05, 
            25);
            c.addTween(k);
            c.addTween((new Tween(a, Tween.ALPHA_FUNC, 0)).move(1, 12400, Tween.JUMP));
            f.move(.7, 1).move(-.7, 399, Tween.POW, 1.5).move(.7, 1, Tween.JUMP).move(-.7, 599, Tween.POW, 
            1.5);
            d(b, 12100, c, n);
            e(b, 12100, c, p);
            39 <= g && (h.move(0, 1300).move(-.1, 300).move(.2, 50).move(-.05, 50), k.move(0, 900).move(-.1, 
            300).move(.2, 50).move(-.05, 50), f.move(.7, 1E3, Tween.JUMP).move(-.7, 600, Tween.POW, 1.5), 
            d(b, 13950, c, n), e(b, 13950, c, p));
            a = 13950;
            for (l = 42; l <= g; l += 3)
            {
                a += 1800, h.move(0, 1400).move(-.1, 300).move(.2, 50).move(-.1, 50), k.move(0, 1400).move(-.1, 
                300).move(.2, 50).move(-.1, 50), f.move(.7, 1200, Tween.JUMP).move(-.7, 600, Tween.POW, 
                1.5), d(b, a, c, n), e(b, a, c, p);
            }
            c.addAction(function ()
            {
                sound.get("sfx").play("main.mega.win.start")
            }, 12E3)
        }
    }
    function d(a, b, c, d)
    {
        var e = new PIXI.Container;
        a.addChild(e);
        c.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, b, Tween.JUMP).move(0, d.duration - 500).move(-1, 
        500));
        for (a = 0; a < d.number; a++)
        {
            var g = d.g, h = d.k, p = d.p0, k = d.yf, n = d.pers, u = d.v0.min + Math.random() * (d.v0.max - d.v0.min), 
            r = Math.random() * Math.PI, m = Math.random() * Math.PI * 2, q = u * Math.cos(r), E = u * Math.sin(r) * Math.cos(m), 
            G = u * Math.sin(r) * Math.sin(m), r = Sprite.fromFolder(d.sprite.folder, d.sprite.frames);
            r.anchor.x = .5;
            r.anchor.y = .5;
            e.addChild(r);
            c.addTween((new Tween(r, function ()
            {
                var a = f(p, {
                    x : q, y : E, z : G
                }, g, h, k);
                return function (b, c)
                {
                    var d = a(c);
                    l(b, d, n)
                }
            }(),
            0)).move(0, b).move(d.duration / 1E3, d.duration));
            c.addTween((new Tween(r, Tween.ROTATION_FUNC, 0)).move(0, b).move(Math.PI * (2 + 5 * Math.random()), 
            d.duration));
            u = Math.round(d.sprite.rotation_period.min + Math.random() * (d.sprite.rotation_period.max - d.sprite.rotation_period.min));
            r = (new SpriteTween(r)).move("0", b);
            for (m = 0; m < d.duration + d.sprite.rotation_period.max; m += u) {
                r.move("0-" + (d.sprite.frames - 1), u);
            }
            c.addTween(r)
        }
        c.addAction(function ()
        {
            sound.get("sfx").play(6E3 > b ? "main.big.win.money" : 11E3 > b ? "main.super.win.money" : "main.mega.win.money")
        }, b)
    }
    function e(a, b, c, d)
    {
        var e = new PIXI.Container;
        a.addChild(e);
        c.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, b, Tween.JUMP).move(0, d.duration - 500).move(-1, 
        500));
        for (a = 0; a < d.number; a++)
        {
            var f = d.g, h = d.b, p = d.p0, k = d.pers, n = d.v0.min + Math.random() * (d.v0.max - d.v0.min), 
            m = Math.random() * Math.PI, r = Math.random() * Math.PI * 2, q = n * Math.cos(m), F = n * Math.sin(m) * Math.cos(r), 
            E = n * Math.sin(m) * Math.sin(r), m = Sprite.fromFolder("img/main/wins/dollar", 7);
            m.anchor.x = .5;
            m.anchor.y = .5;
            e.addChild(m);
            c.addTween((new Tween(m, function ()
            {
                var a = g(p, {
                    x : q, y : F, z : E
                }, f, h);
                return function (b, c)
                {
                    var d = a(c);
                    l(b, d, k)
                }
            }(),
            0)).move(0, b).move(d.duration / 1E3, d.duration));
            c.addTween((new Tween(m, Tween.ROTATION_FUNC, 0)).move(0, b).move(Math.PI * (-5 + 10 * Math.random()), 
            d.duration));
            n = Math.round(300 + 700 * Math.random());
            m = (new SpriteTween(m)).move("0", b);
            for (r = 0; r < d.duration + 1E3; r += n) {
                m.move("0-6", n);
            }
            c.addTween(m)
        }
    }
    function f(a, b, c, d, e)
    {
        return function (f)
        {
            for (var g = a.x + f * b.x, h = a.z + f * b.z, p = a.y, k = b.y; ; )
            {
                var l = k * k - 2 * (p - e) * c, n = (-k - Math.sqrt(l)) / c, l = (-k + Math.sqrt(l)) / c, 
                n = 0 >= n ? l : 0 >= l ? n : Math.min(n, l);
                if (n < f) {
                    if (f -= n, p = e, k =- d * (k + c * n), 1 > Math.abs(k)) {
                        f = k = 0;
                        break
                    }
                }
                else {
                    break;
                }
            }
            p = p + f * k + c * f * f / 2;
            return {
                x : g, y : p, z : h
            }
        }
    }
    function g(a, b, c, d)
    {
        return function (e)
        {
            var f = {};
            f.x = h(e, a.x, b.x, 0, d);
            f.y = h(e, a.y, b.y, c, d);
            f.z = h(e, a.z, b.z, 0, d);
            return f;
        }
    }
    function h(a, b, c, d, e)
    {
        return d * a / e + (d / e / e - c / e) * Math.pow(Math.E, - e * a) + b + c / e - d / e / e
    }
    function l(a, b, c)
    {
        c /= c + b.z;
        a.x = 700 + (b.x - 700) * c;
        a.y = 350 + (b.y - 350) * c;
        a.scale.x = c;
        a.scale.y = c
    }
    SlotModule.prototype.createLineWinPanel = function (a, b)
    {
        var c = new TextField("VALUE_LINE_WIN");
        c.y = [250, 100, 250, 400][[0, 2, 1, 3, 3, 1, 1, 3, 2, 2, 3, 1, 1, 3, 1, 3, 2, 2, 2, 2, 3, 1][a || 0]];
        c.token("value", currencyFormatter.format(b));
        var d = new PIXI.filters.ColorMatrixFilter;
        d.brightness(1);
        c.filters = [d];
        var e = new MovieClip;
        e.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(0, 600).move(0, 1200).move(-1, 200));
        e.addTween((new Tween(c, function (a, b)
        {
            d.brightness(b)
        }, 1)).move(0, 600).move(1, 250).move(-1, 250));
        e.addAction(e.stop, 2E3);
        return {
            content : c, movie : e
        }
    };
    var k = null;
    SlotModule.prototype.createTotalWinPanel = function (d, e)
    {
        function f()
        {
            15 > g ? sound.get("sfx").get("main.total.win.counter").stop() : (sound.get("sfx").get("main.big.win.counter").stop(), 
            sound.get("sfx").play("main.big.win.counter.stop"))
        }
        var g = d / e, h = new MovieClip, p = new PIXI.Container, l = new PIXI.Container;
        l.pivot.x = 700;
        l.pivot.y = 400;
        l.x = 700;
        l.y = 400;
        p.addChild(l);
        k || (k = new TextField("VALUE_TOTAL_WIN"), k.filters = [new PIXI.filters.ColorMatrixFilter], 
        k.onClientUpdate(function ()
        {
            this.token("value", "   " + currencyFormatter.format(clientData.paid) + "   ")
        }));
        k.token("value", "   " + currencyFormatter.format(0) + "   ");
        k.x = clientData.freespinsActive && 15 > g ? 670 : 700;
        k.y = 250;
        l.addChild(k);
        var n = 1 >= g ? 1 : 15 > g ? 2E3 : 19 > g ? 3500 : 22 > g ? 5E3 : 25 > g ? 7E3 : 29 > g ? 8500 : 32 > g ? 1E4 : 35 > g ? 12E3 : 39 > g ? 13500 : 42 > g ? 16E3 : 45 > g ? 17E3 : 17E3 + 1E3 * Math.ceil(33 * (g - 45) / 60);
        h.addTween((new Tween(k, function (a, b)
        {
            clientData.freespinsPaid = serverData.freespinsPaid - d + Math.round(b);
            clientData.paid = Math.round(b);
            clientData.diff()
        }, 0)).move(d, n));
        h.addTween((new Tween(k, function (a, b)
        {
            k.filters[0].brightness(b)
        }, 1)).move(0, n).move(1, 250).move(-1, 250).move(0, SlotModule.SKIP_WIN_MOVIE_TIME - n - 500).move(1, 
        250).move(-1, 250));
        if (15 > g)
        {
            sound.get("sfx").play("main.total.win"), 1 < g && sound.get("sfx").loop("main.total.win.counter");
        }
        else
        {
            var m = Sprite.fromFile("img/main/wins/lights/black.png");
            m.alpha = 0;
            p.addChildAt(m, 0);
            var q = new PIXI.Container;
            p.addChildAt(q, 1);
            var u = Sprite.fromFile("img/main/wins/lights/white.png");
            u.blendMode = PIXI.BLEND_MODES.ADD;
            p.addChild(u);
            h.addTween((new Tween(k, Tween.Y_FUNC, 250)).move(0, 2E3).move(100, 200));
            h.addTween((new Tween(m, Tween.ALPHA_FUNC, 0)).move(0, 1E3).move(.5, 1E3));
            h.addTween((new Tween(l, Tween.SCALE_FUNC, 1)).move(0, 2E3).move(Math.min(n - 2E3, 2E4) / 2E4 * .8, 
            Math.min(n - 2E3, 2E4)));
            m = (new Tween(u, Tween.ALPHA_FUNC, 0)).move(0, 2E3);
            h.addTween(m);
            a(l, q, h, m, g);
            b(l, q, h, m, g);
            c(l, q, h, m, g);
            sound.get("sfx").loop("main.big.win.counter")
        }
        h.addAction(f, n);
        h.addAction(h.stop, 1 == n ? 2E3 : 2E3 == n ? 3E3 : n + 5E3);
        h.addAction(f, SlotModule.SKIP_WIN_MOVIE_TIME + 1);
        h.addAction(h.stop, SlotModule.SKIP_WIN_MOVIE_TIME + (15 > g ? 650 : 5E3));
        return {
            movie : h, content : p
        }
    };
    var m = 
    {
        number : 100, g : 1500, k : .4, p0 : {
            x : 600, y : 300, z : 0
        },
        v0 : {
            min : 250, max : 600
        },
        sprite : {
            folder : "img/main/wins/coin", frames : 8, rotation_period : {
                min : 300, max : 1E3
            }
        },
        yf : 800, pers : 1E3, duration : 2E3
    },
    q = 
    {
        number : 100, g : 1500, k : .4, p0 : {
            x : 700, y : 300, z : 0
        },
        v0 : {
            min : 250, max : 600
        },
        sprite : {
            folder : "img/main/wins/coin", frames : 8, rotation_period : {
                min : 300, max : 1E3
            }
        },
        yf : 800, pers : 1E3, duration : 2E3
    },
    p = 
    {
        number : 40, g : 1E3, b : .5, p0 : {
            x : 700, y : 200, z : 1200
        },
        v0 : {
            min : 500, max : 1E3
        },
        pers : 1E3, duration : 2E3
    },
    n = 
    {
        number : 30, g : 1500, k : .4, p0 : {
            x : 700, y : 300, z : 1600
        },
        v0 : {
            min : 650, max : 1E3
        },
        sprite : {
            folder : "img/main/wins/diamond", frames : 10, rotation_period : {
                min : 500, max : 1E3
            }
        },
        yf : 1500, pers : 1E3, duration : 2E3
    }
})();
Preloader.INTRO_VIDEO = "intro";
Preloader.AUTOSTART_DELAY = 3E4;
Preloader.prototype.init = function ()
{
    !userConfig.skip_intro && gameConfig.intro && (this.intro.videoSprite.x = 188, this.intro.videoSprite.y = 50, 
    this.intro.addChild(new TextField("INTRO_CHECKBOX")));
    this.featureList.background.addChild(Sprite.fromFile("img/preloader/background.jpg"));
    if (gameConfig.show_copyright)
    {
        var a = Sprite.fromFile("img/preloader/produced.png");
        a.x = 1022;
        a.y = 45;
        this.featureList.addChild(a)
    }
    this.featureList.addChild(new TextField("PRELOADER_TEXT1"));
    this.featureList.addChild(new TextField("PRELOADER_TEXT2"));
    this.featureList.addChild(new TextField("PRELOADER_TEXT3"));
    this.featureList.addChild(new TextField("PRELOADER_TEXT4"));
    this.featureList.addChild(new TextField("PRELOADER_TEXT5"));
    this.featureList.addChild(new TextField("PRELOADER_TEXT6"));
    this.featureList.addChild(new TextField("PRELOADER_TEXT7"));
    this.featureList.addChild(new TextField("PRELOADER_TEXT8"));
    a = Sprite.fromFile("img/preloader/progress_bar/full.png");
    a.x = 600;
    a.y = 696;
    this.featureList.progressContent.addChild(a);
    var b = Sprite.fromFile("img/preloader/progress_bar/empty.png");
    b.x = 600;
    b.y = 696;
    this.featureList.progressContent.addChild(b);
    b.mask = Sprite.fromFile("img/preloader/progress_bar/mask.png");
    b.mask.x = b.x;
    b.mask.y = b.y;
    this.featureList.progressContent.addChild(b.mask);
    var c = new TextField("PRELOADER_PROGRESS");
    c.token("value", 0);
    this.featureList.progressContent.addChild(c);
    this.loader.progress = function (a)
    {
        c.token("value", Math.round(a));
        b.mask.x = b.x + a / 100 * b.mask.width;
    };
    a = new PIXI.filters.ColorMatrixFilter;
    this.featureList.button.states[Button.UP].filters = [a];
    this.featureList.button.states[Button.OVER].filters = [a];
    var d = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
    a.matrix = d;
    a = new MovieClip;
    a.addTween((new Tween(this.featureList.button, function (a, b)
    {
        d[0] = b;
        d[6] = b;
        d[12] = b;
    }, 1)).move(.5, 1E3).move(-.5, 1E3));
    a.addAction(a.play, 2E3, 0);
    a.play(0)
};
Preloader.prototype.createIntroCheckbox = function ()
{
    var a = Sprite.fromFiles(["img/preloader/buttons/intro_checkbox/off.png", "img/preloader/buttons/intro_checkbox/on.png"]);
    a.x = 200;
    a.y = 710;
    return a;
};
Preloader.prototype.createIntroButton = function ()
{
    var a = Button.createStandartButton("img/preloader/buttons/skip", {
        up : "INTRO_BUTTON", over : "INTRO_BUTTON", down : "INTRO_BUTTON", disabled : "INTRO_BUTTON"
    });
    a.x = 617;
    a.y = 700;
    return a;
};
Preloader.prototype.createFeatureListCheckbox = function ()
{
    var a = Sprite.fromFiles(["img/preloader/buttons/featurelist_checkbox/off.png", "img/preloader/buttons/featurelist_checkbox/on.png"]);
    a.x = 249;
    a.y = 717;
    return a;
};
Preloader.prototype.createFeatureListButton = function ()
{
    var a = Button.createStandartButton("img/preloader/buttons/start");
    a.x = 600;
    a.y = 696;
    return a;
};
function createLogo()
{
    var a = new PIXI.Container;
    a.x = 380;
    a.y = 0;
    a.addChild(Sprite.fromFile("img/main/background/logo/logo.png"));
    var b = Sprite.fromFolder("img/main/background/logo/hotspot", 10);
    b.x = 135;
    b.y = 8;
    a.addChild(b);
    var c = Sprite.fromFolder("img/main/background/logo/sparks", 11);
    c.x = 450;
    c.y = 7;
    a.addChild(c);
    var d = Sprite.fromFile("img/main/background/logo/shine.png");
    d.x = 137;
    d.y = 9;
    a.addChild(d);
    var e = new MovieClip;
    e.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 1E3, Tween.POW, .5).move(-1, 1E3, Tween.POW, 
    2));
    e.addTween((new Tween(c, Tween.ALPHA_FUNC, 0)).move(1, 1E3, Tween.JUMP).move(-1, 1E3, Tween.JUMP).move(1, 
    1E3, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
    e.addTween((new Tween(c, Tween.X_FUNC, 450)).move(-96, 2E3, Tween.JUMP));
    e.addTween((new Tween(c, Tween.Y_FUNC, 7)).move(-22, 2E3, Tween.JUMP));
    e.addTween((new SpriteTween(c)).move("0", 1E3).move("0-10", 1E3).move("0", 1E3).move("0-10", 1E3));
    e.addTween((new Tween(b, Tween.ALPHA_FUNC, 0)).move(1, 2E3, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
    e.addTween((new SpriteTween(b)).move("0", 2E3).move("0-9", 1E3));
    e.addAction(e.play, 2E3, 4E3);
    e.addAction(function ()
    {
        --g ? e.play(4E3) : (e.play(f), f = 2E3 == f ? 0 : 2E3, g = 30 + Math.floor(30 * Math.random()));
    }, 5E3, 0);
    e.play(4E3);
    var f = 2E3, g = Math.floor(30 * Math.random()) + 1;
    return a
}
function createMoon()
{
    var a = Sprite.fromFile("img/main/background/moon.png");
    a.x = 1195;
    a.y = 175;
    var b = new MovieClip;
    b.addTween((new Tween(a, Tween.ALPHA_FUNC, 0)).move(.5, 1E3, Tween.POW, .5).move(-.5, 1E3, Tween.POW, 
    2));
    b.addAction(function ()
    {
        --c ? b.play(2E3) : (b.play(0), c = 15 + Math.floor(15 * Math.random()));
    }, 3E3, 0);
    b.play(2E3);
    var c = Math.floor(15 * Math.random()) + 1;
    return a
}
function createMeteor()
{
    var a = Sprite.fromFolder("img/main/background/meteor", 12);
    a.x = 380;
    a.y = 0;
    var b = new MovieClip;
    b.addTween((new Tween(a, Tween.ALPHA_FUNC, 1)).move(-1, 1200, Tween.JUMP));
    b.addTween((new Tween(a, Tween.X_FUNC, 0)).move(1400, 600, Tween.JUMP));
    b.addTween((new Tween(a, Tween.SCALE_X_FUNC, 1)).move(-2, 600, Tween.JUMP));
    b.addTween((new SpriteTween(a)).move("0-11,0-11", 1200));
    b.addAction(b.play, 600, 1200);
    b.addAction(function ()
    {
        --d ? b.play(1200) : (b.play(c), c = 600 == c ? 0 : 600, d = 20 + Math.floor(20 * Math.random()));
    }, 2200, 0);
    b.play(1200);
    var c = 600, d = Math.floor(20 * Math.random()) + 1;
    return a
}
function createLoopAnimation(a, b, c, d)
{
    d = d || Math.floor(2E3 * Math.random());
    a = Sprite.fromFile(a);
    a.x = b;
    a.y = c;
    b = new MovieClip;
    b.addTween((new Tween(a, Tween.ALPHA_FUNC, 0)).move(.5, 2E3).move(-.5, 2E3));
    b.addAction(b.play, 4E3 + d, 0);
    b.play(Math.floor(2E3 * Math.random()));
    return a
}
function createWindowAnimation()
{
    var a = new PIXI.Container, b = Sprite.fromFile("img/main/background/window.png");
    b.x = 42;
    b.y = 347;
    a.addChild(b);
    var c = Sprite.fromFile("img/main/background/window.png");
    c.x = 72;
    c.y = 344;
    a.addChild(c);
    var d = Sprite.fromFile("img/main/background/window.png");
    d.x = 1311;
    d.y = 284;
    a.addChild(d);
    var e = new MovieClip;
    e.addTween((new Tween(b, Tween.ALPHA_FUNC, 0)).move(.5, 1E3).move(0, 1E3).move(-.5, 1E3));
    e.addTween((new Tween(c, Tween.ALPHA_FUNC, 0)).move(.5, 1E3).move(0, 1E3).move(-.5, 1E3));
    e.addTween((new Tween(d, Tween.ALPHA_FUNC, .5)).move(-.5, 1E3).move(0, 1E3).move(.5, 1E3));
    e.addAction(function ()
    {
        --f ? e.play(1E3) : f = 15 + Math.floor(15 * Math.random());
    }, 2E3);
    e.addAction(function ()
    {
        --f ? e.play(3E3) : (e.play(0), f = 15 + Math.floor(15 * Math.random()));
    }, 4E3);
    var f = 3;
    e.play(0);
    return a;
};
SlotSymbol.width = 166;
SlotSymbol.height = 166;
SlotSymbol.number = 13;
SlotSymbol.SCALE_ALPHA_FUNC = function (a, b)
{
    a.scale.x = b;
    a.scale.y = b;
    a.alpha = Math.pow(b, 3);
};
SlotSymbol.ALPHA_FUNC = function (a, b)
{
    a.alpha = Math.pow(b, 3);
};
SlotSymbol.get = function (a, b)
{
    var c = new SlotSymbol(a, 2 == a ? [1, 1, 2, 3, 3][b - 1] : 1), d = c.content.sprite = Sprite.fromFolder("img/main/symbols/" + (a + (2 == a ? "_" + [1, 
    1, 2, 3, 3][b - 1] : "")), [0, 10, 17, 17, 49, 49, 49, 49, 49, 17, 17, 17, 17, 57][a]);
    d.x =- 125;
    d.y = 2 == a ? [ - 125, - 125, - 200, - 275, - 275][b - 1] :- 125;
    d.frame = 1;
    c.content.addChild(d);
    2 == a ? (c.content.txts = [], 1 == b || 2 == b ? (c.content.txts[0] = Sprite.fromFolder("img/main/symbols/2_txt", 
    16), c.content.txts[0].x =- 125, c.content.txts[0].y =- 125, c.content.txts[0].alpha = 0, c.content.addChild(c.content.txts[0])) : 3 == b ? (c.content.txts[0] = Sprite.fromFolder("img/main/symbols/2_txt", 
    16), c.content.txts[0].x =- 125, c.content.txts[0].y =- 208, c.content.txts[0].alpha = 0, c.content.addChild(c.content.txts[0]), 
    c.content.txts[1] = Sprite.fromFolder("img/main/symbols/2_txt", 16), c.content.txts[1].x =- 125, c.content.txts[1].y =- 42, 
    c.content.txts[1].alpha = 0, c.content.addChild(c.content.txts[1])) : (c.content.txts[0] = Sprite.fromFolder("img/main/symbols/2_txt", 
    16), c.content.txts[0].x =- 125, c.content.txts[0].y =- 290, c.content.txts[0].alpha = 0, c.content.addChild(c.content.txts[0]), 
    c.content.txts[1] = Sprite.fromFolder("img/main/symbols/2_txt", 16), c.content.txts[1].x =- 125, c.content.txts[1].y =- 124, 
    c.content.txts[1].alpha = 0, c.content.addChild(c.content.txts[1]), c.content.txts[2] = Sprite.fromFolder("img/main/symbols/2_txt", 
    16), c.content.txts[2].x =- 125, c.content.txts[2].y = 42, c.content.txts[2].alpha = 0, c.content.addChild(c.content.txts[2]))) : 13 == a && (c.content.steps = new TextField("VALUE_PULT_STEPS"), 
    c.content.steps.visible = !1, c.content.addChild(c.content.steps));
    c.content.x = 83;
    c.content.y = 2 == a ? [83, 83, 166, 249, 249][b - 1] : 83;
    return c;
};
SlotSymbol.prototype.animate = function (a, b, c, d)
{
    13 == this.id && (this.content.steps.visible = !1);
    this.reset();
    b = this.movie = new MovieClip;
    c = this.content.sprite;
    "blackout" == this.state ? b.addTween((new Tween(this.content, SlotSymbol.SCALE_ALPHA_FUNC, .7)).move(.3, 
    200)) : "special" == this.state && 1 != this.id && 3 != this.id && 13 != this.id && b.addTween((new Tween(this.content, 
    Tween.SCALE_FUNC, .7)).move(.3, 200));
    var e;
    0 < a.layout[3] ? (a = [0, 650, 1100, 1100, 2200, 2200, 2200, 2200, 2200, 1100, 1100, 1100, 1100, 
    2600][this.id], e = " 1-9,1 1-16,1 1-16,1 17-48,1 17-48,1 17-48,1 17-48,1 17-48,1 1-16,1 1-16,1 1-16,1 1-16,1 17-56".split(" ")[this.id]) : (a = [0, 
    650, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100][this.id], e = " 1-9,1 1-16,1 1-16,1 1-16,1 1-16,1 1-16,1 1-16,1 1-16,1 1-16,1 1-16,1 1-16,1 1-16,1 1-16,1".split(" ")[this.id]);
    b.addTween((new SpriteTween(c)).move("1", 200).move(e, a));
    b.addAction(b.stop, a + 200);
    d && b.addEventListenerOnce(GameEvent.COMPLETE, d);
    b.play();
    this.state = "animate";
};
SlotSymbol.prototype.blackout = function ()
{
    13 == this.id && (this.content.steps.visible = !1);
    if ("blackout" != this.state)
    {
        this.reset();
        var a = this.movie = new MovieClip;
        this.content.sprite.frame = 1;
        2 == this.id ? a.addTween((new Tween(this.content, SlotSymbol.ALPHA_FUNC, 1)).move(-.3, 200)) : "normal" == this.state || "animate" == this.state ? a.addTween((new Tween(this.content, 
        SlotSymbol.SCALE_ALPHA_FUNC, 1)).move(-.3, 200)) : "special" == this.state && (1 == this.id || 3 == this.id || 13 == this.id ? a.addTween((new Tween(this.content, 
        SlotSymbol.SCALE_ALPHA_FUNC, 1)).move(-.3, 200)) : a.addTween((new Tween(this.content, SlotSymbol.ALPHA_FUNC, 
        1)).move(-.3, 200)));
        a.addAction(a.stop, 200);
        a.play();
        this.state = "blackout";
    }
};
SlotSymbol.prototype.normal = function ()
{
    13 == this.id && (this.content.steps.visible = !1);
    if (2 == this.id)
    {
        if ("bet.win" == clientData.state) 
        {
            this.reset();
            for (var a = this.movie = new MovieClip, b = null, c = 1; c <= slotConfig.columns; c++) 
            {
                for (var d = game.current.reels[c], e = 1; e <= slotConfig.rows; e++)
                {
                    if (d[e] == this)
                    {
                        if (null == b && 1 == e) {
                            b = e + 1 - this.size;
                        }
                        else if (null == b) {
                            b = e;
                            break 
                        }
                        else {
                            b++;
                        }
                        if (null != b) {
                            break ;
                        };
                    }
                }
            }
            for (d = 0; d < this.size; d++) 
            {
                for (var e = !1, f = 0; f < serverData.wins.length && 0 < b + d; f++) {
                    e = e || b + d == serverData.wins[f].layout[c - 1];
                }
                e ? (a.addTween((new Tween(this.content.txts[d], Tween.ALPHA_FUNC, 1)).move(-1, 1100, 
                Tween.JUMP)), a.addTween((new SpriteTween(this.content.txts[d])).move("0-15", 1100))) : this.content.txts[d].alpha = 0 
            }
            a.addTween((new SpriteTween(this.content.sprite)).move("1-16,1", 1100));
            a.addAction(a.stop, 1100);
            a.play() 
        }
        else
        {
            "blackout" == this.state && (this.reset(), a = this.movie = new MovieClip, a.addTween((new Tween(this.content, 
            SlotSymbol.ALPHA_FUNC, .7)).move(.3, 200)), a.addAction(a.stop, 200), a.play());
        }
        else 
        {
            b = 0;
            if ("normal" == this.state || "blur" == this.state) {
                return;
            }
            "animate" == this.state && 200 > this.movie.time && (b = Math.max(this.movie.time, 1));
            this.reset();
            this.content.sprite.frame = 1;
            a = this.movie = new MovieClip;
            "blackout" == this.state || 0 < b ? a.addTween((new Tween(this.content, SlotSymbol.SCALE_ALPHA_FUNC, 
            .7)).move(.3, 200)) : "special" == this.state && 1 != this.id && 3 != this.id && 13 != this.id && a.addTween((new Tween(this.content, 
            Tween.SCALE_FUNC, .7)).move(.3, 200));
            a.addAction(a.stop, 200);
            a.play(b) 
        }
        this.state = "normal";
    }
};
SlotSymbol.prototype.special = function ()
{
    if ("special" != this.state)
    {
        this.reset();
        var a = this.movie = new MovieClip, b = this.content.sprite;
        b.frame = 1;
        1 == this.id || 3 == this.id || 13 == this.id ? ("blackout" == this.state && a.addTween((new Tween(this.content, 
        SlotSymbol.SCALE_ALPHA_FUNC, .7)).move(.3, 200)), 1 == this.id && userConfig.skip_bonus ? (a.addTween((new SpriteTween(b)).move("1-9,1", 
        650)), a.addAction(a.stop, 650)) : 13 == this.id ? (this.content.steps.visible = !0, this.content.steps.token("value", 
        1 == serverData.thief_action[clientData.thief_action_number - 1] ? 1 : 7 == serverData.thief_action[clientData.thief_action_number - 1] ? 2 : 3), 
        a.addTween((new SpriteTween(b)).move("17", 200).move("17-44", 1866).move("44", 1100).move("44-56", 
        866)), a.addTween((new Tween(this.content.steps, Tween.ALPHA_FUNC, 0)).move(1, 1E3, Tween.JUMP).move(0, 
        200).move(-1, 1E3)), a.addTween((new Tween(this.content.steps, Tween.SCALE_FUNC, 1)).move(0, 1200).move(2, 
        1E3)), a.addAction(a.stop, 4E3)) : a.addAction(a.stop, 200)) : ("blackout" == this.state ? a.addTween((new Tween(this.content, 
        SlotSymbol.ALPHA_FUNC, .7)).move(.3, 200)) : "animate" != this.state && "normal" != this.state || a.addTween((new Tween(this.content, 
        Tween.SCALE_FUNC, 1)).move(-.3, 200)), a.addAction(a.stop, 200));
        a.play();
        this.state = "special";
    }
};
SlotSymbol.prototype.blur = function ()
{
    this.reset();
    this.content.sprite.frame = 0;
    this.content.scale.x = 1;
    this.content.scale.y = 1;
    this.state = "blur";
};
SymbolsFeeder.prototype._getRandom = SymbolsFeeder.prototype.getRandom;
SymbolsFeeder.prototype.getRandom = function ()
{
    var a = this._getRandom();
    return 2 == a ? 4 : a;
};
UserConfig.prototype.properties.skip_wild = {
    savable :!0, "default" :!1
};
UserConfig.prototype.properties.skip_cop = {
    savable :!0, "default" :!1
};
UserConfig.prototype.properties.skip_bonus = {
    savable :!0, "default" :!1
};
UserConfig.prototype.properties.skip_mummy = {
    savable :!0, "default" :!1
};
UserConfig.prototype.properties.skip_bonus_intro_video = {
    savable :!0, "default" :!1
};
UserConfig.prototype.properties.skip_bonus_intro_popup = {
    savable :!0, "default" :!1
};
UserConfig.prototype.properties.skip_freespins_intro = {
    savable :!0, "default" :!1
};
SlotConfig.prototype.properties.columns = 5;
SlotConfig.prototype.properties.rows = 3;
SlotConfig.prototype.properties.lines = 21;
SlotConfig.prototype.properties.lines_set = [21];
SlotConfig.prototype.properties.coins = [1, 2, 3, 4, 5, 7, 10, 15, 20, 25, 40, 50, 100, 200, 300];
SlotConfig.prototype.properties.default_bet = 4;
SlotConfig.prototype.properties.progress = !0;
SlotConfig.prototype.properties.lines_layout = [[2, 2, 2, 2, 2], [1, 1, 1, 1, 1], [3, 3, 3, 3, 3], [1, 
2, 3, 2, 1], [3, 2, 1, 2, 3], [2, 1, 1, 1, 2], [2, 3, 3, 3, 2], [1, 1, 2, 3, 3], [3, 3, 2, 1, 1], [2, 
2, 3, 2, 2], [2, 2, 1, 2, 2], [1, 3, 1, 3, 1], [3, 1, 3, 1, 3], [1, 2, 1, 2, 1], [3, 2, 3, 2, 3], [2, 
1, 2, 1, 2], [2, 3, 2, 3, 2], [1, 2, 2, 2, 1], [3, 2, 2, 2, 3], [1, 3, 3, 3, 1], [3, 1, 1, 1, 3]];
Sound.map["main.buttons.exit"] = "exit_click";
Sound.map["main.buttons.exit.over"] = "exit_over";
Sound.map["main.pathway"] = "pathway";
Sound.map["main.bet.panel"] = "bet_panel_open";
Sound.map["main.symbols.scat.short"] = "win_bonus_short";
Sound.map["main.symbols.scat.long"] = "win_bonus_short";
Sound.map["main.symbols.2.short"] = "win_wild_freespins";
Sound.map["main.symbols.2.long"] = "win_wild_freespins";
Sound.map["main.symbols.3.short"] = "win_wild_short";
Sound.map["main.symbols.3.long"] = "win_wild_short";
Sound.map["main.symbols.4.short"] = "win_crown_short";
Sound.map["main.symbols.4.long"] = "win_crown_long";
Sound.map["main.symbols.5.short"] = "win_venus_short";
Sound.map["main.symbols.5.long"] = "win_venus_long";
Sound.map["main.symbols.6.short"] = "win_cop_short";
Sound.map["main.symbols.6.long"] = "win_cop_long";
Sound.map["main.symbols.7.short"] = "win_mumie_short";
Sound.map["main.symbols.7.long"] = "win_mumie_long";
Sound.map["main.symbols.8.short"] = "win_museum_short";
Sound.map["main.symbols.8.long"] = "win_museum_long";
Sound.map["main.symbols.9.short"] = "win_small1_short";
Sound.map["main.symbols.9.long"] = "win_small1_short";
Sound.map["main.symbols.10.short"] = "win_small2_short";
Sound.map["main.symbols.10.long"] = "win_small2_short";
Sound.map["main.symbols.11.short"] = "win_small3_short";
Sound.map["main.symbols.11.long"] = "win_small3_short";
Sound.map["main.symbols.12.short"] = "win_small4_short";
Sound.map["main.symbols.12.long"] = "win_small4_short";
Sound.map["main.symbols.13.short"] = "win_move_short";
Sound.map["main.symbols.13.long"] = "win_move_open";
Sound.map["main.bonus.background"] = "bonus_ambience";
Sound.map["main.bonus.click"] = "bonus_item_click";
Sound.map["main.bonus.over"] = "bonus_item_over";
Sound.map["main.bonus.key.add"] = "bonus_key_add";
Sound.map["main.bonus.key.lose"] = "bonus_key_lose";
Sound.map["main.bonus.paytable.click"] = "bonus_paytable_click";
Sound.map["main.bonus.paytable.over"] = "bonus_paytable_over";
Sound.map["main.bonus.move"] = "bonus_robber_move";
Sound.map["main.bonus.security"] = "bonus_video_security";
Sound.map["main.bonus.steals"] = "bonus_video_steals";
Sound.map["main.freespins.background"] = "freespin_ambience";
Sound.map["main.freespins.over"] = "freespin_over";
Sound.map["main.freespins.paytable.click"] = "freespin_paytable_click";
Sound.map["main.freespins.big.win"] = "freespin_robber_bigwin";
Sound.map["main.freespins.win1"] = "freespin_robber_win1";
Sound.map["main.freespins.win2"] = "freespin_robber_win2";
Sound.map["main.freespins.stop.click"] = "freespin_stop_click";
Sound.map["main.thief.stairs"] = "robber_downstairs";
Sound.map["main.thief.exit"] = "robber_exit";
Sound.map["main.thief.mummy"] = "robber_mummy";
Sound.map["main.thief.run"] = "robber_run";
Sound.map["main.thief.security"] = "robber_security";
Sound.map["main.thief.start"] = "robber_start";
Sound.map["main.thief.window"] = "robber_window";
Sound.map["main.rays.on"] = "redlines_on";
Sound.map["main.rays.off"] = "redlines_off";
Sound.map["main.big.win.counter"] = "big_win_counter";
Sound.map["main.big.win.counter.stop"] = "big_win_counter_stop";
Sound.map["main.big.win.money"] = "big_win_money";
Sound.map["main.big.win.start"] = "big_win_start";
Sound.map["main.super.win.money"] = "super_win_money";
Sound.map["main.super.win.start"] = "super_win_start";
Sound.map["main.mega.win.money"] = "mega_win_money";
Sound.map["main.mega.win.start"] = "mega_win_start";
Sound.map["main.freespin.popup"] = "bonus_popup";
Sound.map["main.freespin.popup.win"] = "freespin_popup_win";
Sound.map["main.bonus.popup"] = "bonus_popup";
Sound.map["main.bonus.popup.win"] = "bonus_popup_win";
Sound.map["main.checkbox.click"] = "popup_click";
Sound.map["main.diamond"] = "diamond";
Sound.map["main.video.bonus"] = "main_video_bonus";
Sound.map["main.video.mummy"] = "main_video_mummy";
Sound.map["main.video.security"] = "main_video_security";
Sound.map["main.video.wild"] = "main_video_wild";
Sound.map["main.video.bonus.start"] = "bonus_video_start";
Sound.map["main.video.bonus.end"] = "bonus_video_end";
GiftspinsStartPopup.BANNER = {
    image : "img/main/giftspins/start.png", x :- 74, y :- 70
};
GiftspinsSummaryPopup.BANNER = {
    image : "img/main/giftspins/summary.png", x :- 61, y :- 84
};
Main.prototype.createReels = function ()
{
    var a = new Reels;
    a.x = 259;
    a.y = 97;
    a.gap = 13;
    a.init();
    return a;
};
MiniPaytable.prototype.addContent = function ()
{
    var a = this.background, b = a.leftPanel = Sprite.fromFile("img/main/minipaytable_left.png");
    b.x =- 10;
    a.addChild(b);
    b = a.rightPanel = Sprite.fromFile("img/main/minipaytable_right.png");
    b.x =- 189;
    a.addChild(b);
    b = Sprite.fromFile("img/main/symbols/bonus.png");
    b.x = 135;
    b.y = 123;
    a.addChild(b);
    var c = Sprite.fromFile("img/main/symbols/wild.png");
    c.x = 134;
    c.y = 125;
    a.addChild(c);
    var d = Sprite.fromFile("img/main/symbols/cop.png");
    d.x = 137;
    d.y = 125;
    a.addChild(d);
    var e = Sprite.fromFile("img/main/symbols/mummy.png");
    e.x = 133;
    e.y = 125;
    a.addChild(e);
    var f = Sprite.fromFile("img/main/symbols/move.png");
    f.x = 133;
    f.y = 125;
    a.addChild(f);
    this.markers = [b, c, d, e, f];
};
MiniPaytable.prototype.applyPosition = function ()
{
    this.background.leftPanel.visible = 5 > this.column;
    this.background.rightPanel.visible = 5 == this.column;
    this.text.setId(5 > this.column ? 1 == this.symbol.id ? "MINIPAYTABLE_1_LEFT" : 3 == this.symbol.id ? "MINIPAYTABLE_3_LEFT" : "MINIPAYTABLE_4_to_13_LEFT" : 1 == this.symbol.id ? "MINIPAYTABLE_1_RIGHT" : 3 == this.symbol.id ? "MINIPAYTABLE_3_RIGHT" : "MINIPAYTABLE_4_to_13_RIGHT");
    for (var a = 0; a < serverData.payouts.length; a++)
    {
        var b = serverData.payouts[a];
        Number(b.attr("symbol")) == this.symbol.id && this.text.token("value" + b.attr("count"), b.attr("coef"))
    }
    for (a = 0; a < this.markers.length; a++) {
        this.markers[a].visible = this.symbol.id == [1, 3, 6, 7, 13][a];
    }
};
Main.prototype.createSpinButton = function ()
{
    var a = Button.createStandartButton("img/main/buttons/spin");
    a.x = 1E3;
    a.y = 665;
    a.clickSound = "main.buttons.spin";
    a.setTooltip("TOOLTIP_SPIN");
    return a;
};
Main.prototype.createSpinStopButton = function ()
{
    var a = Button.createStandartButton("img/main/buttons/spin");
    a.x = 1E3;
    a.y = 665;
    a.clickSound = "main.buttons.stop";
    a.setTooltip("TOOLTIP_SPIN_STOP");
    return a;
};
Main.prototype.createMaxBetButton = function ()
{
    var a = Button.createStandartButton("img/main/buttons/max_bet");
    a.x = 688;
    a.y = 681;
    a.clickSound = "main.buttons.maxbet";
    a.setTooltip("TOOLTIP_MAX_BET");
    return a;
};
Main.prototype.createAutoplayStartButton = function ()
{
    var a = Button.createStandartButton("img/main/buttons/autoplay");
    a.x = 828;
    a.y = 682;
    a.clickSound = "main.buttons.auto";
    a.setTooltip("TOOLTIP_AUTOPLAY");
    return a;
};
Main.prototype.createAutoplayStopButton = function ()
{
    var a = Button.createStandartButton("img/main/buttons/autoplay_stop");
    a.x = 828;
    a.y = 682;
    a.clickSound = "main.buttons.auto";
    a.setTooltip("TOOLTIP_AUTOPLAY");
    var b = new PIXI.filters.ColorMatrixFilter;
    a.states[Button.UP].filters = [b];
    a.states[Button.OVER].filters = [b];
    a.states[Button.DOWN].filters = [b];
    var c = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
    b.matrix = c;
    b = new MovieClip;
    b.addTween((new Tween(a, function (a, b)
    {
        c[0] = b;
        c[6] = b;
        c[12] = b;
    }, 1)).move(.5, 1E3).move(-.5, 1E3));
    b.addAction(b.play, 2E3, 0);
    b.play(0);
    return a;
};
Main.prototype.createGambleButton = function ()
{
    var a = new Button;
    a.visible = !1;
    return a;
};
Main.prototype.createPaytableButton = function ()
{
    var a = Button.createStandartButton("img/main/buttons/paytable");
    a.x = 250;
    a.y = 683;
    a.clickSound = "main.buttons.paytable";
    a.setTooltip("TOOLTIP_PAYTABLE");
    var b = new PIXI.filters.ColorMatrixFilter;
    a.states[Button.UP].filters = [b];
    a.states[Button.OVER].filters = [b];
    var c = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
    b.matrix = c;
    var d = new MovieClip;
    d.addTween((new Tween(a, function (a, b)
    {
        c[0] = b;
        c[6] = b;
        c[12] = b;
    }, 1)).move(0, 1E3).move(.5, 625).move(-.5, 625).move(.5, 625).move(-.5, 625).move(.5, 625).move(-.5, 
    625).move(.5, 625).move(-.5, 625));
    d.addAction(d.stop, 6E3);
    a.onClientUpdate(function (a)
    {
        if ("init" == a.diff.state) {
            var b = this.click;
            this.click = function (a)
            {
                d.stop(0);
                b()
            }
        }
        "bonus.stop" == a.diff.state && 0 < serverData.superprizeWin && (d.play(0), paytable.showCollectionIndicator = !0)
    });
    a.click = function (a) {};
    return a;
};
Main.prototype.createBetIncreaseButton = function ()
{
    var a = SpinnerButton.createStandartButton("img/main/buttons/right_arrow");
    a.x = 624;
    a.y = 704;
    a.clickSound = "main.buttons.arrow";
    a.setTooltip("TOOLTIP_BET_INCREASE");
    return a;
};
Main.prototype.createBetDecreaseButton = function ()
{
    var a = SpinnerButton.createStandartButton("img/main/buttons/left_arrow");
    a.x = 357;
    a.y = 704;
    a.clickSound = "main.buttons.arrow";
    a.setTooltip("TOOLTIP_BET_DECREASE");
    return a;
};
Main.prototype.createAutoplayIncreaseButton = function ()
{
    var a = SpinnerButton.createStandartButton("img/main/buttons/right_arrow");
    a.x = 936;
    a.y = 728;
    a.clickSound = "main.buttons.arrow";
    a.setTooltip("TOOLTIP_AUTOPLAY_INCREASE");
    return a;
};
Main.prototype.createAutoplayDecreaseButton = function ()
{
    var a = SpinnerButton.createStandartButton("img/main/buttons/left_arrow");
    a.x = 827;
    a.y = 728;
    a.clickSound = "main.buttons.arrow";
    a.setTooltip("TOOLTIP_AUTOPLAY_DECREASE");
    return a;
};
Main.prototype.createLinesIncreaseButton = function ()
{
    var a = SpinnerButton.createStandartButton("img/main/buttons/right_arrow");
    a.x = 631;
    a.y = 678;
    a.clickSound = "main.buttons.arrow";
    return a;
};
Main.prototype.createLinesDecreaseButton = function ()
{
    var a = SpinnerButton.createStandartButton("img/main/buttons/left_arrow");
    a.x = 523;
    a.y = 678;
    a.clickSound = "main.buttons.arrow";
    return a;
};
Main.prototype.createMessageBox = function ()
{
    var a = new MessageBox(415, 25);
    a.x = 493;
    a.y = 600;
    a.mask = new PIXI.Graphics;
    a.mask.beginFill();
    a.mask.drawRect(0, 0, 415, 25);
    a.mask.endFill();
    a.addChild(a.mask);
    a.onClientUpdate(function (a)
    {
        "init" == a.diff.state && this.show("ACTION_MAIN_INTRO", 4E3);
        if (a.diff.state)
        {
            if (void 0 !== a.diff.autoplayActive && clientData.autoplayActive) {
                this.show("ACTION_AUTO", 3E3);
            }
            else if ("spin.warning" == clientData.state && a.diff.bet) {
                this.show("ACTION_MAIN_ADJUST", 3E3);
            }
            else
            {
                switch (clientData.state) 
                {
                    case "spin.start":
                        this.show("ACTION_MAIN_START", 2E3);
                        break;
                    case "thief.mummy":
                        this.show("ACTION_MAIN_MUMMY", 11E3);
                        break;
                    case "thief.cop":
                        this.show("ACTION_MAIN_COP", 6E3) 
                }
            }
            else
            {
                a.diff.bet && "bet.idle" == clientData.state && clientData.bet == slotConfig.coins[slotConfig.coins.length - 1] && this.show("ACTION_MAIN_MAX_BET", 
                2E3);
            }
        }
    });
    a.nextMessage = function ()
    {
        this.show("INFO_MAIN_" + Math.floor(10 * Math.random() + 1), 6E3)
    };
    return a;
};
Main.prototype.addCustomContent = function ()
{
    var a = this.background, b = this.ui;
    a.addChild(Sprite.fromFile("img/main/background.jpg"));
    if (gameConfig.show_copyright) {
        var c = Sprite.fromFile("img/main/produced.png");
        c.x = 990;
        c.y = 75;
        a.addChild(c)
    }
    a.addChild(createLoopAnimation("img/main/background/stars_1.png", 12, 0));
    a.addChild(createLoopAnimation("img/main/background/stars_2.png", 9, 0));
    a.addChild(createLoopAnimation("img/main/background/stars_3.png", 11, 0));
    a.addChild(createLoopAnimation("img/main/background/stars_4.png", 1214, - 8));
    a.addChild(createLoopAnimation("img/main/background/stars_5.png", 1141, - 59));
    a.addChild(createLoopAnimation("img/main/background/stars_6.png", 1208, - 6));
    a.addChild(createLoopAnimation("img/main/background/light.png", 40, 406));
    a.addChild(createLoopAnimation("img/main/background/light.png", 130, 391));
    a.addChild(createLoopAnimation("img/main/background/light.png", 1275, 367));
    a.addChild(createLoopAnimation("img/main/background/light.png", 1262, 508));
    a.addChild(createLoopAnimation("img/main/background/light.png", 1289, 523));
    a.addChild(createWindowAnimation());
    a.addChild(createMoon());
    a.addChild(createMeteor());
    this.blurReels = function ()
    {
        var a = new MovieClip;
        a.addTween((new Tween(this.reelsBlur, Tween.ALPHA_FUNC, 0)).move(1, 200));
        a.addAction(a.stop, 200);
        a.play()
    };
    this.clearReels = function ()
    {
        var a = this.movie = new MovieClip;
        a.addTween((new Tween(this.reelsBlur, Tween.ALPHA_FUNC, 1)).move(-1, 200));
        a.addAction(a.stop, 200);
        a.play()
    };
    var d = b.exitButton = Button.createStandartButton("img/main/buttons/exit");
    d.x = 1166;
    d.y = 469;
    d.enabled = !1;
    d.clickSound = "main.buttons.exit";
    d.overSound = "main.buttons.exit.over";
    d.click = function ()
    {
        this.enabled = !1;
        g.movie.play(2300);
        game.main.clearReels()
    };
    d.onClientUpdate(function (a)
    {
        if (a.diff.state || void 0 != a.diff.showWinnings)
        {
            this.enabled = "bet.idle" == clientData.state && !clientData.showWinnings && "init" != a.diff.state && !clientData.autoplayActive;
        }
    });
    a.addChild(d);
    var e = this.thief = new Thief;
    this.addChildAt(e, 1);
    a = this.reelsBlur = Sprite.fromFile("img/main/reels_blur.png");
    a.x = 238;
    a.y = 94;
    a.alpha = 0;
    this.addChildAt(a, 2);
    a = this.rays = new Rays;
    this.addChildAt(a, 3);
    a = this.car = Sprite.fromFolder("img/main/thief/car", 18);
    a.y = 400;
    this.addChildAt(a, 8);
    this.addChildAt(createLogo(), 9);
    var f = this.accumulatedFreespins = new PIXI.Container;
    this.addChildAt(f, 10);
    f.shining = Sprite.fromFolder("img/main/fs_counter", 10);
    f.shining.x = 245;
    f.shining.y = 19;
    f.addChild(f.shining);
    f.text = new TextField("VALUE_ACCUMULATED_FREESPINS");
    f.text.token("value", 10);
    f.addChild(f.text);
    f.diamond = Sprite.fromFile("img/main/diamond.png");
    f.diamond.x = 277;
    f.diamond.y = 40;
    f.addChild(f.diamond);
    f.onClientUpdate(function (a)
    {
        "init" != a.diff.state && "giftspins.start" != a.diff.state && "giftspins.stop" != a.diff.state && "spin.giftspins.deleted" != a.diff.state && "giftspins.delete" != a.diff.state || this.text.token("value", 
        serverData.accumulated_freespins - serverData.add_freespins)
    });
    a = this.arrest = new PIXI.Container;
    a.front = Sprite.fromFolder("img/main/thief/arrest_front", 38);
    a.front.frame = 30;
    a.addChild(a.front);
    a.side = Sprite.fromFolder("img/main/thief/arrest_side", 38);
    a.side.frame = 30;
    a.addChild(a.side);
    a.text = new TextField;
    a.addChild(a.text);
    a.val = 0;
    this.addChildAt(a, 11);
    var g = this.thiefPath = function ()
    {
        for (var a = new PIXI.Container, b = [], c = a.movie = new MovieClip, e = 0; 40 > e; e++)
        {
            var f = b[e] = Sprite.fromFile("img/main/arrow.png");
            f.x = [0, 60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 760, 760, 700, 640, 580, 520, 
            460, 400, 340, 280, 220, 160, 100, 60, 60, 60, 120, 180, 240, 300, 360, 420, 480, 540, 600, 
            660, 720, 780][e] + 312;
            f.y = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 46, 114, 200, 200, 200, 200, 200, 200, 200, 200, 
            200, 200, 200, 204, 272, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327, 327][e] + 161;
            f.rotation = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][e] * Math.PI / 2;
            a.addChild(f);
            c.addTween((new Tween(f, Tween.ALPHA_FUNC, 0)).move(0, 2500 + 30 * (e + 1)).move(1, 300).move(0, 
            500).move(-1, 500))
        }
        b = Sprite.fromFile("img/main/buttons/exit/over.png");
        b.x = 1166;
        b.y = 469;
        a.addChild(b);
        c.addTween((new Tween(b, Tween.ALPHA_FUNC, 0)).move(0, 3730).move(1, 400).move(-1, 400));
        c.addTween((new Tween(game.main.reels, Tween.ALPHA_FUNC, 0)).move(1, 2300, Tween.JUMP).move(-1, 
        200).move(0, 2300).move(1, 200));
        c.addTween((new Tween(game.main.rays, Tween.ALPHA_FUNC, 0)).move(.4, 2300, Tween.JUMP).move(-.4, 
        200).move(0, 2300).move(.4, 200));
        c.addTween((new Tween(game.main.arrest, Tween.ALPHA_FUNC, 0)).move(1, 2300, Tween.JUMP).move(-1, 
        200).move(0, 2300).move(1, 200));
        c.addAction(function ()
        {
            game.main.miniPaytable.hide();
            game.main.reels.each(function (a, b, c)
            {
                a.interactive = !1
            })
        }, 1);
        c.addAction(c.play, 2300, 2500);
        c.addAction(function ()
        {
            game.main.miniPaytable.hide();
            game.main.reels.each(function (a, b, c)
            {
                a.interactive = !1
            })
        }, 2301);
        c.addAction(function ()
        {
            sound.get("sfx").play("main.pathway")
        }, 2501);
        c.addAction(function ()
        {
            game.main.blurReels()
        }, 4800);
        c.addAction(function ()
        {
            c.stop();
            game.main.reels.each(function (a, b, c)
            {
                a.interactive = !0
            });
            d.enabled = !0
        }, 5E3);
        c.stop(5E3);
        return a
    }();
    this.addChildAt(g, 11);
    b.linesPanel.visible = !1;
    b.bonusBetsPanel = this.createBonusBetsPanel();
    b.bonusBetsPanel.x = 417;
    b.bonusBetsPanel.y = 600;
    b.addChildAt(b.bonusBetsPanel, 0);
    b.addChildAt(Sprite.fromFile("img/main/interface.png"), 0);
    b.addChildAt(new TextField("LABEL_BALANCE"), 1);
    b.addChildAt(new TextField("LABEL_BET"), 1);
    b.addChildAt(new TextField("LABEL_TOTAL_BET"), 1);
    b.addChildAt(new TextField("LABEL_PAID"), 1);
    var h = this.mummyPopup = new ThiefVideoPopup(
    {
        video : {
            x : 47, y : 23, src : "mummy"
        },
        sound : {
            src : "main.video.mummy", autoStop :!0
        },
        frame : {
            src : "img/main/popup_negative.png"
        },
        time : {
            afterVideo : 200, skip : 800, afterPopup : 1E3
        },
        state : "thief.mummy", dontShowNextTime : {
            x : 67, y : 311, text : "DONT_SHOW_NEXT_TIME_NEGATIVE", property : "skip_mummy"
        }
    });
    h.controller.createMovie = function (a)
    {
        a = new MovieClip;
        a.addTween((new Tween(h, Tween.SCALE_ALPHA_FUNC, 0)).move(1, 200).move(0, 600).move(-1, 200));
        a.addAction(a.stop, 200);
        a.addAction(function ()
        {
            this.stop();
            game.main.rays.disable();
            e.windUp(function ()
            {
                e.step = Math.max(0, e.step - 2);
                game.main.rays.applyRaysPosition();
                h.controller.stop()
            });
            sound.get("sfx").play("main.thief.mummy")
        }, 1001);
        a.skip = function ()
        {
            e.step = Math.max(0, e.step - 2);
            game.main.rays.applyRaysPosition();
            h.controller.stop()
        };
        return a;
    };
    h.pivot.x = 287;
    h.pivot.y = 175;
    h.x = 700;
    h.y = 340;
    h.alpha = 0;
    h.scale.x = 0;
    h.scale.y = 0;
    this.addChildAt(h, 14);
    var l = this.copPopup = new ThiefVideoPopup(
    {
        video : {
            x : 47, y : 23, src : "cop"
        },
        sound : {
            src : "main.video.security", autoStop :!0
        },
        frame : {
            src : "img/main/popup_negative.png"
        },
        time : {
            afterVideo : 200, skip : 800, afterPopup : 1E3
        },
        state : "thief.cop", dontShowNextTime : {
            x : 67, y : 311, text : "DONT_SHOW_NEXT_TIME_NEGATIVE", property : "skip_cop"
        }
    });
    l.controller.createMovie = function (a)
    {
        a = new MovieClip;
        a.addTween((new Tween(l, Tween.SCALE_ALPHA_FUNC, 0)).move(1, 200).move(0, 600).move(-1, 200));
        a.addAction(a.stop, 200);
        a.addAction(function ()
        {
            this.stop();
            e.arrest(function ()
            {
                l.controller.stop()
            });
            sound.get("sfx").play("main.thief.security")
        }, 1001);
        a.skip = function ()
        {
            e.arrest()
        };
        return a;
    };
    l.pivot.x = 287;
    l.pivot.y = 175;
    l.x = 700;
    l.y = 340;
    l.alpha = 0;
    l.scale.x = 0;
    l.scale.y = 0;
    this.addChildAt(l, 15);
    var k = this.wildPopup = new ThiefVideoPopup(
    {
        video : {
            x : 43, y : 34, src : "wild"
        },
        sound : {
            src : "main.video.wild", autoStop :!1
        },
        frame : {
            src : "img/main/popup_positive.png"
        },
        time : {
            afterVideo : 200, skip : 2800, afterPopup : 3E3
        },
        state : "thief.wild", dontShowNextTime : {
            x : 87, y : 324, text : "DONT_SHOW_NEXT_TIME_POSITIVE", property : "skip_wild"
        }
    });
    k.controller.createMovie = function (a)
    {
        k.d1.visible = 1 == serverData.add_freespins;
        k.d2.visible = 2 == serverData.add_freespins;
        var b = new MovieClip;
        b.addTween((new Tween(k, Tween.SCALE_ALPHA_FUNC, 0)).move(1, 200).move(0, 2600).move(-1, 200));
        b.addTween((new Tween(k.boxAnimation, Tween.SCALE_FUNC, .75)).move(0, 200).move(.25, 2E3));
        b.addTween((new Tween(k.boxContainer, Tween.ALPHA_FUNC, 0)).move(1, 201, Tween.JUMP));
        b.addAction(b.stop, 200);
        var c = game.main.reels.x + game.main.reels[a.column].x + 130 - 277;
        a = game.main.reels.y + game.main.reels[a.column][a.row].y + 130 - 40;
        b.addAction(function ()
        {
            sound.get("sfx").get("main.video.wild").stop();
            sound.get("music").get("main").volume = 1;
        }, 2E3);
        1 == serverData.add_freespins ? (b.addTween((new SpriteTween(f.shining)).move("0", 3300).move("0-9,0", 
        700)), b.addTween((new Tween(f.diamond, Tween.X_FUNC, 277)).move(c, 3E3, Tween.JUMP).move(-c, 
        300)), b.addTween((new Tween(f.diamond, Tween.Y_FUNC, 40)).move(a, 3E3, Tween.JUMP).move(-a, 300)), 
        b.addAction(function ()
        {
            sound.get("sfx").play("main.diamond")
        }, 3001), b.addAction(function ()
        {
            f.text.token("value", serverData.accumulated_freespins)
        }, 3300), b.addAction(function ()
        {
            this.stop();
            k.controller.stop()
        }, 4001)) : (b.addTween((new SpriteTween(f.shining)).move("0", 3300).move("0-9,0", 700).move("0", 
        300).move("0-9,0", 700)), b.addTween((new Tween(f.diamond, Tween.X_FUNC, 277)).move(c, 3E3, Tween.JUMP).move(-c, 
        300).move(c, 700, Tween.JUMP).move(-c, 300)), b.addTween((new Tween(f.diamond, Tween.Y_FUNC, 40)).move(a, 
        3E3, Tween.JUMP).move(-a, 300).move(a, 700, Tween.JUMP).move(-a, 300)), b.addAction(function ()
        {
            sound.get("sfx").play("main.diamond")
        }, 3001), b.addAction(function ()
        {
            f.text.token("value", serverData.accumulated_freespins - 1)
        }, 3300), b.addAction(function ()
        {
            sound.get("sfx").play("main.diamond")
        }, 4001), b.addAction(function ()
        {
            f.text.token("value", serverData.accumulated_freespins)
        }, 4300), b.addAction(function ()
        {
            this.stop();
            k.controller.stop()
        }, 5001));
        f.diamond.visible = !0;
        b.skip = function ()
        {
            f.text.token("value", serverData.accumulated_freespins);
            f.diamond.visible = !1
        };
        return b;
    };
    k.pivot.x = 287;
    k.pivot.y = 175;
    k.x = 700;
    k.y = 340;
    k.alpha = 0;
    k.scale.x = 0;
    k.scale.y = 0;
    this.addChildAt(k, 16);
    b = k.boxContainer = new PIXI.Container;
    k.content.addChild(b);
    b.mask = new PIXI.Graphics;
    b.mask.beginFill(0);
    b.mask.drawRect(44, 35, 477, 280);
    b.mask.endFill();
    b.addChild(b.mask);
    a = k.boxAnimation = new PIXI.Container;
    a.pivot.x = 313;
    a.pivot.y = 183;
    a.x = 282;
    a.y = 182;
    b.addChild(a);
    a.addChild(Sprite.fromFile("img/main/wild_box.png"));
    k.d1 = Sprite.fromFile("img/main/d1.png");
    k.d1.x = 282;
    k.d1.y = 139;
    a.addChild(k.d1);
    k.d2 = Sprite.fromFile("img/main/d2.png");
    k.d2.x = 259;
    k.d2.y = 138;
    a.addChild(k.d2);
    var m = this.bonusPopup = new ThiefVideoPopup(
    {
        video : {
            x : 43, y : 34, src : "bonus"
        },
        sound : {
            src : "main.video.bonus", autoStop :!0
        },
        frame : {
            src : "img/main/popup_positive.png"
        },
        time : {
            afterVideo : 200, skip : 800, afterPopup : 1E3
        },
        state : "thief.bonus", dontShowNextTime : {
            x : 87, y : 324, text : "DONT_SHOW_NEXT_TIME_POSITIVE", property : "skip_bonus"
        }
    });
    m.controller.createMovie = function (a)
    {
        a = new MovieClip;
        a.addTween((new Tween(m, Tween.SCALE_ALPHA_FUNC, 0)).move(1, 200).move(0, 600).move(-1, 200));
        a.addAction(a.stop, 200);
        a.addAction(function ()
        {
            this.stop();
            m.controller.stop()
        }, 1600);
        a.skip = function () {};
        return a;
    };
    m.pivot.x = 287;
    m.pivot.y = 175;
    m.x = 700;
    m.y = 340;
    m.alpha = 0;
    m.scale.x = 0;
    m.scale.y = 0;
    this.addChildAt(m, 17);
    if (SystemLoader.isSafari) for (b = ["wild", "mummy", "cop", "bonus"], a = 0;
    a < b.length;
    a++)
    {
        var c = ResourceLoader.videos[systemLoader.gamePath("res/video/" + ResourceLoader.VIDEO_FORMAT + "/" + b[a] + "." + ResourceLoader.VIDEO_FORMAT)], 
        q = PIXI.Texture.fromVideo(c), q = new PIXI.Sprite(q);
        Stage.MAIN.root.addChildAt(q, 0);
        c.start(function () {}, function () {});
        $("head").append(c)
    }
};
Main.prototype.createBonusBetsPanel = function ()
{
    var a = new PIXI.Container, b = new PIXI.Container;
    a.addChild(b);
    b.mask = new PIXI.Graphics;
    b.mask.beginFill(0);
    b.mask.drawRect(0, 0, 566, 75);
    b.mask.endFill();
    a.addChild(b.mask);
    b.addChild(Sprite.fromFile("img/main/panel.png"));
    var c = new TextField("MAIN_FREESPINS_BET");
    c.token("value", currencyFormatter.format(0));
    c.onClientUpdate(function (a)
    {
        this.token("value", 0 < clientData.freespinsBet ? currencyFormatter.format(21 * clientData.freespinsBet) : "--.--")
    });
    b.addChild(c);
    var d = Button.createStandartButton("img/main/buttons/open_panel");
    d.x = 260;
    d.y = 53;
    d.click = function ()
    {
        sound.get("sfx").play("main.bet.panel");
        d.enabled = !1;
        g.play(0)
    };
    a.addChild(d);
    c = Sprite.fromFile("img/main/buttons/open_panel/over.png");
    c.alpha = 0;
    d.states[Button.UP].addChild(c);
    var e = new MovieClip;
    e.addTween((new Tween(c, Tween.ALPHA_FUNC, 0)).move(1, 250).move(-1, 250).move(1, 250).move(-1, 250));
    e.addAction(e.stop, 1E3);
    var f = Button.createStandartButton("img/main/buttons/close_panel");
    f.x = 260;
    f.y = 53;
    f.visible = !1;
    f.click = function ()
    {
        f.enabled = !1;
        g.play(300)
    };
    a.addChild(f);
    var g = new MovieClip;
    g.addTween((new Tween(b, Tween.Y_FUNC, 45)).move(-45, 300).move(45, 300));
    g.addAction(function ()
    {
        g.stop();
        d.visible = !1;
        f.visible = !0;
        f.enabled = !0
    }, 300);
    g.addAction(function ()
    {
        g.stop(0);
        d.visible = !0;
        d.enabled = !0;
        f.visible = !1
    }, 600);
    g.stop(0);
    b.onClientUpdate(function (a)
    {
        void 0 != a.diff.freespinsBet && (0 == a.diff.freespinsBet && 0 == g.time ? ("init" != a.diff.state && sound.get("sfx").play("main.bet.panel"), 
        d.enabled = !1, g.play(0)) : e.play(0))
    });
    return a;
};
Tooltip.prototype._BACK = 858681;
Tooltip.prototype._FRAME = 11647684;
Tooltip.prototype.performDraw = function ()
{
    var a = this._text.getRect();
    this.x = Math.floor((this._button.width - a.width) / 2 - 10) + this._dx;
    this.y =- a.height - 30 + this._dy;
    this._viewWidth = a.width + 20;
    this._viewHeight = a.height + 30;
    this._text.x = Math.floor((a.width + 20) / 2);
    this._text.y = 10;
    var b = this._substrate;
    b.beginFill(this._BACK);
    b.lineStyle(2, this._FRAME);
    b.arc(7, 7, 7, Math.PI, 1.5 * Math.PI);
    b.arc(a.width - 7 + 20, 7, 7, 1.5 * Math.PI, 2 * Math.PI);
    b.arc(a.width - 7 + 20, a.height - 7 + 20, 7, 0, .5 * Math.PI);
    b.lineTo(Math.floor((a.width + 20) / 2 + 5), a.height + 20);
    b.lineTo(Math.floor((a.width + 20) / 2), a.height + 30);
    b.lineTo(Math.floor((a.width + 20) / 2 - 5), a.height + 20);
    b.arc(7, a.height - 7 + 20, 7, .5 * Math.PI, Math.PI);
    b.endFill()
};
InitController.prototype.onStart = function ()
{
    0 < serverData.bonus_round ? systemLoader.postloader.check("bonus", function ()
    {
        sound.get("music").get("main").loop("main.bonus.background");
        game.bonus.initialized || game.bonus.init();
        this.stop()
    }
    .bind(this)) : serverData.freespinsActive ? systemLoader.postloader.check("freespins", function ()
    {
        sound.get("music").get("main").loop("main.freespins.background");
        game.freespins.initialized || game.freespins.init();
        this.stop()
    }
    .bind(this)) : (sound.get("music").get("main").loop("main.background"), this.stop())
};
InitController.prototype.onStop = function ()
{
    systemLoader.preloader.visible = !1;
    game.visible = !0;
    0 < serverData.bonus_round ? (game.main.visible = !1, game.bonus.visible = !0) : serverData.freespinsActive && (game.main.visible = !1, 
    game.freespins.visible = !0)
};
IdleController.prototype.getWinDuration = function (a)
{
    if (0 < a.layout[3]) {
        switch (a.comb) {
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
                return 2400;
            case 13:
                return 2800 ;
        }
    }
    return 2E3;
};
Payline.prototype.init = function ()
{
    this.sprites.activeToShow = Sprite.fromFolder("img/main/paynumbers/active_to_show/" + this.id, 10);
    this.sprites.activeToShow.x = 4;
    this.sprites.activeToShow.y = 3;
    this.indicator.addChild(this.sprites.activeToShow);
    this.sprites.activeToWin = Sprite.fromFolder("img/main/paynumbers/active_to_win/" + this.id, 10);
    this.sprites.activeToWin.x =- 7;
    this.sprites.activeToWin.y =- 7;
    this.indicator.addChild(this.sprites.activeToWin);
    this.indicator.hitArea = new PIXI.Rectangle(12, 12, 23, 21);
    this.indicator.x = [215, 212, 218, 1142, 1134, 216, 1138, 1135, 218, 1138, 217, 1142, 1135, 212, 1135, 
    216, 1138, 211, 220, 1141, 219][this.id - 1];
    this.indicator.y = [295, 163, 479, 139, 506, 269, 322, 451, 452, 269, 348, 164, 478, 190, 427, 322, 
    296, 138, 534, 190, 505][this.id - 1];
    this.sprites.lineNormal = Sprite.fromFile("img/main/paylines/normal_" + this.id + ".png");
    this.addChildAt(this.sprites.lineNormal, 0);
    this.sprites.lineGlow = Sprite.fromFile("img/main/paylines/glow_" + this.id + ".png");
    this.addChildAt(this.sprites.lineGlow, 0);
    this.sprites.lineNormal.x = this.sprites.lineGlow.x = [2, 1, 8, 37, 34, 5, 39, 40, 7, 39, 5, 37, 39, 
    1, 37, 6, 36, 0, 8, 39, 9][this.id - 1] + 237;
    this.sprites.lineNormal.y = this.sprites.lineGlow.y = [190, 59, 375, 35, 0, 39, 219, 97, 96, 166, 
    65, 60, 1, 85, 209, 25, 193, 34, 195, 87, 85][this.id - 1] + 112;
    this.movie = new MovieClip;
    this.movie.addTween((new Tween(this.sprites.activeToShow, Tween.ALPHA_FUNC, 1)).move(-1, 1200, Tween.JUMP));
    this.movie.addTween((new SpriteTween(this.sprites.activeToShow)).move("0-9,9-0", 1200));
    this.movie.addTween((new Tween(this.sprites.activeToWin, Tween.ALPHA_FUNC, 0)).move(1, 1200, Tween.JUMP));
    this.movie.addTween((new SpriteTween(this.sprites.activeToWin)).move("0", 1200).move("0-9,9,9,9,9,9,9,9,9,9,9,9-0", 
    1800));
    this.movie.addTween((new Tween(this.sprites.lineNormal, Tween.ALPHA_FUNC, 0)).move(1, 600).move(-1, 
    600).move(1, 600).move(0, 600).move(-1, 200));
    this.movie.addTween((new Tween(this.sprites.lineGlow, Tween.ALPHA_FUNC, 0)).move(0, 1800).move(1, 
    300).move(-1, 300));
    this.movie.addAction(this.movie.stop, 600);
    this.movie.addAction(this.movie.stop, 1200);
    this.movie.addAction(this.movie.stop, 2400);
    this.movie.addAction(this.movie.stop, 3E3);
    this.movie.stop(0)
};
Payline.prototype.show = function ()
{
    sound.play("main.lines.over");
    this.movie.play(0);
    this.state = "show";
};
Payline.prototype.active = function ()
{
    "active" != this.state && (this.movie.play(1200 > this.movie.time ? 600 : 2400), this.state = "active");
};
Payline.prototype.win = function ()
{
    this.movie.play(1200);
    this.state = "win";
};
Paytable.prototype.PAGE_COUNT = 5;
Paytable.prototype.showCollectionIndicator = !1;
Paytable.prototype.createBackground = function ()
{
    var a = new PIXI.Container;
    a.addChild(Sprite.fromFile("img/paytable/background.jpg"));
    if (gameConfig.show_copyright) {
        var b = Sprite.fromFile("img/paytable/produced.png");
        b.x = 1022;
        b.y = 31;
        a.addChild(b)
    }
    return a;
};
Paytable.prototype.addCustomContent = function ()
{
    var a = this.pages[0], b = Sprite.fromFile("img/paytable/pages/p1.png");
    b.x = 244;
    b.y = 82;
    a.addChild(b);
    a.addChild(new TextField("PAYTABLE_PAGE1_TEXT1"));
    a.addChild(new TextField("PAYTABLE_PAGE1_TEXT2"));
    a.addChild(new TextField("PAYTABLE_PAGE1_TEXT3"));
    a.addChild(new TextField("PAYTABLE_PAGE1_MALF"));
    gameConfig.show_version && (b = new TextField("PAYTABLE_PAGE1_VERSION"), b.token("value", systemLoader.version), 
    a.addChild(b));
    gameConfig.show_rtp && (b = new TextField("PAYTABLE_PAGE1_RTP"), b.token("value", gameConfig.rtp), 
    a.addChild(b));
    this.payoutsContainer = a;
    this.addPayout(1, [5, 4, 3], "coef", "PAYOUTS_BONUS", 720, 395);
    this.addPayout(3, [5, 4, 3], "coef", "PAYOUTS", 740, 126);
    this.addPayout(4, [5, 4, 3], "coef", "PAYOUTS", 387, 102);
    this.addPayout(5, [5, 4, 3], "coef", "PAYOUTS", 899, 102);
    this.addPayout(6, [5, 4, 3], "coef", "PAYOUTS", 899, 255);
    this.addPayout(7, [5, 4, 3], "coef", "PAYOUTS", 387, 255);
    this.addPayout(8, [5, 4, 3], "coef", "PAYOUTS", 387, 410);
    this.addPayout(9, [5, 4, 3], "coef", "PAYOUTS", 899, 410);
    this.addPayout(11, [5, 4, 3], "coef", "PAYOUTS", 387, 564);
    this.addPayout(13, [5, 4, 3], "coef", "PAYOUTS", 899, 564);
    a = this.pages[1];
    b = Sprite.fromFile("img/paytable/pages/p2.png");
    b.x = 234;
    b.y = 87;
    a.addChild(b);
    for (b = 0; 12 > b; b++) {
        a.addChild(new TextField("PAYTABLE_PAGE2_TEXT" + (b + 1)));
    }
    a = this.pages[2];
    b = Sprite.fromFile("img/paytable/pages/p3_1.png");
    b.x = 260;
    b.y = 160;
    a.addChild(b);
    b = Sprite.fromFile("img/paytable/pages/p3_2.png");
    b.x = 230;
    b.y = 570;
    a.addChild(b);
    b = Sprite.fromFile("img/paytable/pages/p3_3.png");
    b.x = 615;
    b.y = 320;
    a.addChild(b);
    this.payoutsContainer = a;
    this.addPayout(2, [5, 4, 3], "coef", "PAYOUTS", 670, 410);
    for (b = 0; 8 > b; b++) {
        a.addChild(new TextField("PAYTABLE_PAGE3_TEXT" + (b + 1)));
    }
    a = this.pages[3];
    b = Sprite.fromFile("img/paytable/pages/p4.png");
    b.x = 331;
    b.y = 350;
    a.addChild(b);
    for (b = 0; 6 > b; b++) {
        a.addChild(new TextField("PAYTABLE_PAGE4_TEXT" + (b + 1)));
    }
    a = this.pages[4];
    b = Sprite.fromFile("img/paytable/pages/p5.png");
    b.x = 205;
    b.y = 50;
    a.addChild(b);
    b = Sprite.fromFile("img/paytable/pages/p5_1.png");
    b.x = 657;
    b.y = 360;
    a.addChild(b);
    var c = Sprite.fromFile("img/paytable/pages/p5_2.png");
    c.x = 453;
    c.y = 154;
    a.addChild(c);
    var d = Sprite.fromFile("img/paytable/pages/p5_3.png");
    d.x = 989;
    d.y = 332;
    a.addChild(d);
    var e = Sprite.fromFile("img/paytable/pages/p5_4.png");
    e.x = 397;
    e.y = 290;
    a.addChild(e);
    var f = Sprite.fromFile("img/paytable/pages/p5_5.png");
    f.x = 637;
    f.y = 112;
    a.addChild(f);
    var g = Sprite.fromFile("img/paytable/pages/p5_6.png");
    g.x = 534;
    g.y = 286;
    a.addChild(g);
    var h = Sprite.fromFile("img/paytable/pages/p5_7.png");
    h.x = 862;
    h.y = 316;
    a.addChild(h);
    var l = Sprite.fromFile("img/paytable/pages/p5_8.png");
    l.x = 997;
    l.y = 161;
    a.addChild(l);
    var k = Sprite.fromFile("img/paytable/pages/p5_9.png");
    k.x = 854;
    k.y = 144;
    a.addChild(k);
    a.addChild(new TextField("PAYTABLE_PAGE5_TEXT1"));
    var m = new TextField("PAYTABLE_PAGE5_TEXT2");
    a.addChild(m);
    var q = new TextField("PAYTABLE_PAGE5_TEXT3");
    q.token("value", currencyFormatter.format(clientData.allBonusWins));
    a.addChild(q);
    var p = new TextField("PAYTABLE_PAGE5_TEXT4");
    p.visible = !1;
    a.addChild(p);
    var n = new TextField("PAYTABLE_PAGE5_TEXT5");
    a.addChild(n);
    var t = new TextField("PAYTABLE_PAGE5_COUNT1");
    t.x = b.x + 103;
    t.y = b.y + 138;
    t.visible = !1;
    a.addChild(t);
    var v = new TextField("PAYTABLE_PAGE5_COUNT2");
    v.x = c.x + 99;
    v.y = c.y + 111;
    v.visible = !1;
    a.addChild(v);
    var w = new TextField("PAYTABLE_PAGE5_COUNT3");
    w.x = d.x + 71;
    w.y = d.y + 77;
    w.visible = !1;
    a.addChild(w);
    var y = new TextField("PAYTABLE_PAGE5_COUNT4");
    y.x = e.x + 73;
    y.y = e.y + 92;
    y.visible = !1;
    a.addChild(y);
    var z = new TextField("PAYTABLE_PAGE5_COUNT5");
    z.x = f.x + 118;
    z.y = f.y + 218;
    z.visible = !1;
    a.addChild(z);
    var A = new TextField("PAYTABLE_PAGE5_COUNT6");
    A.x = g.x + 60;
    A.y = g.y + 177;
    A.visible = !1;
    a.addChild(A);
    var B = new TextField("PAYTABLE_PAGE5_COUNT7");
    B.x = h.x + 62;
    B.y = h.y + 131;
    B.visible = !1;
    a.addChild(B);
    var C = new TextField("PAYTABLE_PAGE5_COUNT8");
    C.x = l.x + 72;
    C.y = l.y + 146;
    C.visible = !1;
    a.addChild(C);
    var D = new TextField("PAYTABLE_PAGE5_COUNT1");
    D.x = k.x + 72;
    D.y = k.y + 146;
    D.visible = !1;
    a.addChild(D);
    var x = [b, c, d, e, f, g, h, l, k], u = [t, v, w, y, z, A, B, C, D];
    a.update = function ()
    {
        for (var a = 0; a < x.length; a++) {
            x[a].visible = clientData.bonusGamesFinished > a;
        }
        p.visible = 9 > clientData.bonusGamesFinished;
        n.visible = 8 < clientData.bonusGamesFinished;
        q.token("value", 0 < clientData.allBonusWins ? currencyFormatter.format(clientData.allBonusWins) : "");
        m.visible = 0 < clientData.allBonusWins;
        if (8 < clientData.bonusGamesFinished)
        {
            for (a = 0; a < u.length; a++)
            {
                clientData.bonusGamesFinished % 9 > a ? u[a].token("value", (clientData.bonusGamesFinished - clientData.bonusGamesFinished % 9)  / 9 + 1) : u[a].token("value", 
                (clientData.bonusGamesFinished - clientData.bonusGamesFinished % 9)  / 9), u[a].visible = !0;
            }
        }
    };
    this.leftButton._click = this.leftButton.click;
    this.leftButton.click = function ()
    {
        this.leftButton._click();
        this.iconsMovie.stop(5E3);
        this.showCollectionIndicator = !1
    }
    .bind(this);
    this.rightButton._click = this.rightButton.click;
    this.rightButton.click = function ()
    {
        this.rightButton._click();
        this.iconsMovie.stop(5E3);
        this.showCollectionIndicator = !1
    }
    .bind(this);
    this.backButton._click = this.backButton.click;
    this.backButton.click = function ()
    {
        this.backButton._click();
        this.iconsMovie.stop(5E3);
        this.showCollectionIndicator = !1
    }
    .bind(this);
    sound.get("music").get("paytable").loop("paytable.background")
};
Paytable.prototype.update = function ()
{
    this.pages[4].update();
    this.showCollectionIndicator && this.iconsMovie.play(0)
};
Paytable.prototype.createBackButton = function ()
{
    var a = Button.createStandartButton("img/paytable/buttons/back");
    a.x = 626;
    a.y = 675;
    a.clickSound = "paytable.buttons.back";
    a.setTooltip("TOOLTIP_PAYTABLE_BACK", 0, 0, this.stage);
    return a;
};
Paytable.prototype.createLeftButton = function ()
{
    var a = Button.createStandartButton("img/paytable/buttons/left");
    a.x = 574;
    a.y = 678;
    a.clickSound = "paytable.buttons.arrow";
    a.setTooltip("TOOLTIP_PAYTABLE_PREV", 0, 0, this.stage);
    return a;
};
Paytable.prototype.createRightButton = function ()
{
    var a = Button.createStandartButton("img/paytable/buttons/right");
    a.x = 782;
    a.y = 678;
    a.clickSound = "paytable.buttons.arrow";
    a.setTooltip("TOOLTIP_PAYTABLE_NEXT", 0, 0, this.stage);
    return a;
};
Paytable.prototype.createPrintButton = function ()
{
    var a = Button.createStandartButton("img/paytable/buttons/print");
    a.x = 215;
    a.y = 677;
    a.visible = !1;
    a.setTooltip("TOOLTIP_PAYTABLE_PRINT", 0, 0, this.stage);
    return a;
};
Paytable.prototype.createPageIcons = function ()
{
    for (var a = [], b = 0; b < this.PAGE_COUNT; b++)
    {
        if (4 == b)
        {
            var c = new PIXI.Container, d = a[4] = Sprite.fromFiles(["img/paytable/buttons/active.png", 
            "img/paytable/buttons/disable.png"]);
            c.addChild(d);
            this.addChild(c)
        }
        else
        {
            d = a[b] = Sprite.fromFiles(["img/paytable/buttons/active.png", "img/paytable/buttons/disable.png"]), 
            this.addChild(d);
        }
        d.frame = 0 == b ? 0 : 1;
        d.x = 641 + 25 * b;
        d.y = 741
    }
    var e = this.iconsMovie = new MovieClip(this.stage), b = new PIXI.filters.ColorMatrixFilter;
    c.filters = [b];
    var f = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
    b.matrix = f;
    e.addTween((new Tween(c, function (a, b)
    {
        f[0] = b;
        f[6] = b;
        f[12] = b;
    }, 1)).move(1, 625).move(-1, 625).move(1, 625).move(-1, 625).move(1, 625).move(-1, 625).move(1, 625).move(-1, 
    625));
    e.addAction(function ()
    {
        e.stop();
        this.showCollectionIndicator = !1
    }
    .bind(this), 5E3);
    return a;
};
function Rays()
{
    PIXI.Container.call(this);
    this.x = 217;
    this.y = 53;
    this._normal = Sprite.fromFolder("img/main/thief/rays", 42);
    this.addChild(this._normal);
    this._movie = new MovieClip;
    this._movie.addTween((new SpriteTween(this._normal)).move("0-41,16-0,0", 4E3));
    this._movie.addTween((new Tween(this, Tween.ALPHA_FUNC, .4)).move(-.4, 4E3, Tween.JUMP));
    this._movie.addAction(this._movie.play, 2800, 1133);
    this._movie.addAction(this._movie.stop, 4E3);
    this._movie.stop(4E3)
}
Rays.prototype = Object.create(PIXI.Container.prototype);
Rays.prototype.constructor = Rays;
Rays.prototype.applyRaysPosition = function (a, b)
{
    void 0 === a && (a = game.main.thief.step);
    void 0 === b && (b = !0);
    if (0 < a)
    {
        var c = game.main.thief.getPosition(a);
        this.x = 217 + 180 * (c.column - 1);
        this.y = 53 + 166 * (c.row - 1);
        this.visible = !0;
        this._movie.play(0);
        b && sound.get("sfx").play("main.rays.on")
    }
    else {
        this.visible = !1;
    }
};
Rays.prototype.disable = function ()
{
    this._movie.play(2801);
    sound.get("sfx").play("main.rays.off")
};
Freespins.prototype.PAYTABLE_PAGE_NUMBER = 3;
Freespins.prototype.createReels = function ()
{
    var a = new Reels;
    a.x = 230;
    a.y = 94;
    a.columns = 5;
    a.rows = 3;
    a.gap = 13;
    a.topMargin =- 14;
    a.bottomMargin =- 20;
    a.init();
    return a;
};
Freespins.prototype.createPayline = function (a)
{
    return new FreespinsPayline(a);
};
Freespins.prototype.createSpinButton = function ()
{
    var a = Button.createStandartButton("img/freespins/buttons/spin");
    a.x = 1034;
    a.y = 665;
    a.overSound = "main.freespins.over";
    a.setTooltip("TOOLTIP_SPIN", - 10, 16);
    return a;
};
Freespins.prototype.createSpinStopButton = function ()
{
    var a = Button.createStandartButton("img/freespins/buttons/spin");
    a.x = 1034;
    a.y = 665;
    a.spinSound = "main.freespins.stop.click";
    a.overSound = "main.freespins.over";
    a.setTooltip("TOOLTIP_SPIN", - 10, 16);
    return a;
};
Freespins.prototype.createPaytableButton = function ()
{
    var a = Button.createStandartButton("img/freespins/buttons/paytable");
    a.x = 160;
    a.y = 688;
    a.spinSound = "main.freespins.paytable.click";
    a.overSound = "main.freespins.over";
    a.setTooltip("TOOLTIP_PAYTABLE", 15, 13);
    return a;
};
Freespins.prototype.createIntroPopup = function ()
{
    var a = new PIXI.Container;
    a.x = 700;
    a.y = 365;
    a.pivot.x = 307;
    a.pivot.y = 190;
    a.alpha = 0;
    a.scale.x = 0;
    a.scale.y = 0;
    a.addChild(Sprite.fromFile("img/freespins/popup_intro.png"));
    a.addChild(new TextField("FREESPINS_INTRO_TEXT_1"));
    a.freespins_value = new TextField("FREESPINS_INTRO_TEXT_2");
    a.addChild(a.freespins_value);
    a.addChild(new TextField("FREESPINS_INTRO_CHECKBOX"));
    var b = Sprite.fromFiles(["img/freespins/checkbox_off.png", "img/freespins/checkbox_on.png"]);
    b.x = 131;
    b.y = 302;
    b.buttonMode = !0;
    b.interactive = !0;
    b.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        userConfig.skip_freespins_intro = 1 == this.frame;
        sound.play("main.checkbox.click")
    };
    a.addChild(b);
    return a;
};
Freespins.prototype.createSummaryPopup = function ()
{
    var a = new PIXI.Container;
    a.x = 700;
    a.y = 365;
    a.pivot.x = 318;
    a.pivot.y = 192;
    a.alpha = 0;
    a.scale.x = 0;
    a.scale.y = 0;
    var b = new PIXI.Container;
    a.addChild(b);
    b.addChild(Sprite.fromFile("img/freespins/popup_summary.png"));
    b.addChild(new TextField("FREESPINS_SUMMARY_TEXT_1"));
    b.addChild(new TextField("FREESPINS_SUMMARY_TEXT_2"));
    b.money = new TextField("FREESPINS_SUMMARY_TEXT_3");
    b.addChild(b.money);
    var c = new PIXI.Container;
    a.addChild(c);
    c.addChild(Sprite.fromFile("img/freespins/popup_intro.png"));
    c.addChild(new TextField("FREESPINS_SUMMARY_LOSE"));
    a.setPaid = function (a)
    {
        b.money.token("value", currencyFormatter.format(a));
        b.visible = 0 < a;
        c.visible = 0 == a;
    };
    return a;
};
Freespins.prototype.addCustomContent = function ()
{
    var a = this.background, b = this.ui;
    a.addChild(Sprite.fromFile("img/freespins/background.png"));
    if (gameConfig.show_copyright) {
        var c = Sprite.fromFile("img/freespins/produced.png");
        c.x = 920;
        c.y = 78;
        a.addChild(c)
    }
    c = this.blur = Sprite.fromFile("img/freespins/dark.png");
    c.x = 260;
    c.y = 104;
    a.addChild(c);
    c = Sprite.fromFolder("img/freespins/smoke", 25);
    c.x = 1242;
    c.y = 416;
    a.addChild(c);
    var d = Sprite.fromFolder("img/freespins/particles", 50);
    d.x =- 4;
    d.y = 650;
    d.scale.y =- 1;
    a.addChild(d);
    var e = Sprite.fromFolder("img/freespins/particles", 50);
    e.x = 1400;
    e.y = 650;
    e.scale.x =- 1;
    e.scale.y =- 1;
    a.addChild(e);
    var f = Sprite.fromFolder("img/freespins/particles", 50);
    f.x = 280;
    f.y = 100;
    a.addChild(f);
    var g = Sprite.fromFolder("img/freespins/particles", 50);
    g.x = 480;
    g.y = 100;
    a.addChild(g);
    var h = Sprite.fromFolder("img/freespins/particles", 50);
    h.x = 680;
    h.y = 100;
    a.addChild(h);
    var l = Sprite.fromFolder("img/freespins/particles", 50);
    l.x = 880;
    l.y = 100;
    a.addChild(l);
    var k = new MovieClip;
    k.addTween((new SpriteTween(c)).move("0-24,0-24", 3333));
    k.addTween((new SpriteTween(d)).move("0-49", 3333));
    k.addTween((new SpriteTween(e)).move("0-49", 3333));
    k.addTween((new SpriteTween(f)).move("0-49", 3333));
    k.addTween((new SpriteTween(g)).move("0-49", 3333));
    k.addTween((new SpriteTween(h)).move("0-49", 3333));
    k.addTween((new SpriteTween(l)).move("0-49", 3333));
    k.addAction(k.play, 3333, 0);
    k.play(0);
    b.addChild(new TextField("LABEL_FREESPINS_BALANCE"));
    b.addChild(new TextField("LABEL_FREESPINS_TOTAL_BET"));
    b.addChild(new TextField("LABEL_FREESPINS_PAID"));
    b.addChild(new TextField("LABEL_FREESPINS_TOTAL_PAID"));
    this.addChildAt(createFreespinsLogo(), 6);
    this.addChildAt(createFreespinsThief(), 6);
    b = this.messageBox = new MessageBox(630, 25);
    b.x = 350;
    b.y = 600;
    var m = {};
    b.onClientUpdate(function (a)
    {
        if ("freespins.start" == clientData.state || a.diff.state && "spin.start" == clientData.state) {
            m.value = clientData.freespinsNumber, this.show("INFO_FREE", 2E4, m);
        }
        "freespins.stop" == clientData.state && this.show("ACTION_FREE_END", 5E3)
    });
    this.addChildAt(b, 6);
    b = Sprite.fromFile("img/freespins/counter.png");
    b.x = 274;
    b.y = 34;
    a.addChild(b);
    a.addChild(new TextField("LABEL_FREESPINS_COUNTER"));
    b = new TextField("VALUE_FREESPINS_COUNTER");
    b.token("value", clientData.freespinsNumber);
    b.onClientUpdate(function (a)
    {
        this.token("value", clientData.freespinsNumber)
    });
    a.addChild(b);
    a = this.popupBlackout = new PIXI.Graphics;
    a.beginFill();
    a.fillAlpha = .5;
    a.fillColor = 0;
    a.drawRect(0, 0, 1400, 800);
    a.endFill();
    a.alpha = 0;
    a.hitArea = PIXI.Rectangle.EMPTY;
    this.addChild(a);
    this.introPopup = this.createIntroPopup();
    this.addChild(this.introPopup);
    this.summaryPopup = this.createSummaryPopup();
    this.addChild(this.summaryPopup);
    this.animationContainer.mask = new PIXI.Graphics;
    this.animationContainer.mask.beginFill(0);
    this.animationContainer.mask.drawRect(0, 14, 900, 480);
    this.animationContainer.mask.endFill();
    this.animationContainer.addChild(this.animationContainer.mask)
};
function createFreespinsLogo()
{
    var a = new PIXI.Container;
    a.x = 447;
    a.y = 0;
    a.addChild(Sprite.fromFile("img/freespins/logo/logo.png"));
    var b = Sprite.fromFolder("img/freespins/logo/part_1", 20);
    b.x = 35;
    b.y = 22;
    a.addChild(b);
    var c = Sprite.fromFolder("img/freespins/logo/part_2", 6);
    c.x = 282;
    c.y = 13;
    a.addChild(c);
    var d = new MovieClip;
    d.addTween((new SpriteTween(b)).move("0-19", 1300));
    d.addTween((new Tween(c, Tween.ALPHA_FUNC, 0)).move(1, 1300, Tween.JUMP).move(-1, 400, Tween.JUMP));
    d.addTween((new SpriteTween(c)).move("0", 1300).move("0-5", 400));
    d.addAction(d.play, 2E4, 0);
    d.play(0);
    return a
}
function createFreespinsThief()
{
    var a = Sprite.fromFolder("img/freespins/thief", 98);
    a.x = 1075;
    a.y = 227;
    var b = a.movie = new MovieClip;
    b.addTween((new SpriteTween(a)).move("0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9-97", 6420));
    b.addAction(b.play, 2100, 0);
    b.addAction(b.play, 3360, 0);
    b.addAction(b.play, 5220, 0);
    b.addAction(b.play, 6420, 0);
    var c =- 1;
    a.onClientUpdate(function (a)
    {
        clientData.freespinsActive && "spin.stop" == a.diff.state && (c = 0 == serverData.roundPaid ? 0 : serverData.roundPaid < 15 * clientData.getTotalBet() ? 1 : 2);
    });
    b.addAction(function ()
    {
        switch (c)
        {
            case - 1:
                b.play(0);
                break;
            case 0:
                b.play(1200);
                c =- 1;
                break;
            case 1:
                var a = Math.floor(2 * Math.random());
                b.play(0 == a ? 2100 : 3360);
                sound.get("sfx").play(0 == a ? "main.freespins.win1" : "main.freespins.win2");
                c =- 1;
                break;
            case 2:
                b.play(5220), sound.get("sfx").play("main.freespins.big.win"), c =- 1
        }
    }, 1200);
    b.play(0);
    return a;
};
function FreespinsStartController()
{
    StateController.call(this, "freespins.start")
}
FreespinsStartController.prototype = Object.create(StateController.prototype);
FreespinsStartController.prototype.constructor = FreespinsStartController;
FreespinsStartController.prototype.onStart = function ()
{
    game.current.reels.each(function (a, b, c)
    {
        a.normal()
    });
    systemLoader.postloader.check("freespins", function ()
    {
        game.freespins.initialized || game.freespins.init();
        game.freespins.introPopup.freespins_value.token("number", clientData.freespinsNumber);
        game.freespins.introPopup.freespins_value.token("bet", currencyFormatter.format(21 * clientData.freespinsBet));
        var a = this, b = new PIXI.filters.ColorMatrixFilter;
        game.filters = [b];
        var c = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
        b.matrix = c;
        var d = new MovieClip;
        d.addTween((new Tween(game, function (a, b)
        {
            c[0] = b;
            c[6] = b;
            c[12] = b;
        }, 1)).move(-1, 300).move(0, 400).move(1, 300));
        d.addTween((new Tween(game.freespins.popupBlackout, Tween.ALPHA_FUNC, 0)).move(0, 1E3).move(1, 
        200).move(0, 7E3).move(-1, 200));
        d.addTween((new Tween(game.freespins.introPopup, Tween.SCALE_FUNC, 0)).move(0, 1E3).move(1, 200).move(0, 
        7E3).move(-1, 200));
        d.addTween((new Tween(game.freespins.introPopup, Tween.ALPHA_FUNC, 1)).move(-1, 8400, Tween.JUMP));
        d.addTween((new Tween(game.freespins.reels, Tween.ALPHA_FUNC, 0)).move(0, 10200).move(1, 400));
        d.addTween((new Tween(game.freespins.blur, Tween.ALPHA_FUNC, 0)).move(0, 10200).move(1, 400));
        d.addAction(function ()
        {
            game.main.visible = !1;
            game.freespins.visible = !0;
            for (var a = 1; a <= slotConfig.columns; a++) {
                game.freespins.reels[a].stop(2);
            }
            clientData.paid = 0;
            sound.get("music").get("main").loop("main.freespins.background");
            sound.get("music").get("main").get("main.background").stop()
        }, 500);
        d.addAction(function ()
        {
            sound.get("sfx").play("main.freespin.popup")
        }, 1001);
        d.addAction(function ()
        {
            game.skipManager.set(function ()
            {
                this.play(8200);
                sound.get("sfx").get("main.freespin.popup").stop()
            }
            .bind(this), KeyboardListener.SKIP_POPUP_HOTKEY)
        }, 1201);
        d.addAction(function ()
        {
            game.skipManager.reset()
        }, 8200);
        userConfig.skip_freespins_intro && d.addAction(d.play, 1E3, 10200);
        d.addAction(function ()
        {
            d.stop();
            a.stop();
            game.filters = null;
        }, 11600);
        d.play()
    }
    .bind(this))
};
(new FreespinsStartController).activate();
function FreespinsStopController()
{
    StateController.call(this, "freespins.stop")
}
FreespinsStopController.prototype = Object.create(StateController.prototype);
FreespinsStopController.prototype.constructor = FreespinsStopController;
FreespinsStopController.prototype.onStart = function ()
{
    for (var a = 1; a <= slotConfig.columns; a++) {
        game.main.reels[a].stop(2);
    }
    game.main.accumulatedFreespins.text.token("value", 10);
    game.freespins.summaryPopup.setPaid(clientData.freespinsPaid);
    var b = this, a = new PIXI.filters.ColorMatrixFilter;
    game.filters = [a];
    var c = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
    a.matrix = c;
    var d = new MovieClip;
    d.addTween((new Tween(game, function (a, b)
    {
        c[0] = b;
        c[6] = b;
        c[12] = b;
    }, 1)).move(0, 7400).move(-1, 300).move(0, 400).move(1, 300));
    d.addTween((new Tween(game.freespins.popupBlackout, Tween.ALPHA_FUNC, 0)).move(1, 200).move(0, 7E3).move(-1, 
    200).move(0, 1E3));
    d.addTween((new Tween(game.freespins.summaryPopup, Tween.SCALE_FUNC, 0)).move(1, 200).move(0, 7E3).move(-1, 
    200).move(0, 1E3));
    d.addTween((new Tween(game.freespins.summaryPopup, Tween.ALPHA_FUNC, 1)).move(-1, 8400, Tween.JUMP));
    d.addAction(function ()
    {
        game.skipManager.set(this.play.bind(this, 7200), KeyboardListener.SKIP_POPUP_HOTKEY)
    }, 201);
    d.addAction(function ()
    {
        game.skipManager.reset()
    }, 7200);
    d.addAction(function ()
    {
        b.stop();
        game.main.visible = !0;
        game.freespins.visible = !1;
        for (var a = 1; a <= slotConfig.columns; a++) {
            game.main.reels[a].stop(2);
        }
    }, 7900);
    d.addAction(function ()
    {
        d.stop();
        game.filters = null;
        sound.get("music").get("main").get("main.freespins.background").stop();
        sound.get("music").get("main").loop("main.background");
        sound.get("sfx").get("main.freespin.popup.win").stop();
        sound.get("sfx").get("main.freespin.popup").stop()
    }, 8400);
    d.play(0);
    sound.get("sfx").play(0 < clientData.freespinsPaid ? "main.freespin.popup.win" : "main.freespin.popup")
};
(new FreespinsStopController).activate();
function FreespinsPayline(a)
{
    Payline.call(this, a)
}
FreespinsPayline.prototype = Object.create(Payline.prototype);
FreespinsPayline.prototype.constructor = FreespinsPayline;
FreespinsPayline.prototype.init = function ()
{
    this.sprites.activeToWin = Sprite.fromFolder("img/freespins/paynumbers/active_to_win/" + this.id, 
    10);
    this.sprites.activeToWin.x =- 6;
    this.sprites.activeToWin.y =- 8;
    this.indicator.addChild(this.sprites.activeToWin);
    this.indicator.x = [188, 187, 187, 1101, 1102, 187, 1102, 1103, 187, 1102, 188, 1101, 1103, 187, 1103, 
    188, 1102, 187, 187, 1101, 187][this.id - 1];
    this.indicator.y = [291, 160, 475, 135, 511, 265, 318, 460, 448, 266, 344, 161, 486, 187, 433, 318, 
    293, 135, 530, 188, 502][this.id - 1];
    this.sprites.lineNormal = Sprite.fromFile("img/main/paylines/normal_" + this.id + ".png");
    this.addChildAt(this.sprites.lineNormal, 0);
    this.sprites.lineGlow = Sprite.fromFile("img/main/paylines/glow_" + this.id + ".png");
    this.addChildAt(this.sprites.lineGlow, 0);
    this.sprites.lineNormal.x = this.sprites.lineGlow.x = [210, 210, 210, 225, 230, 215, 230, 235, 215, 
    230, 215, 230, 235, 215, 233, 215, 227, 215, 215, 230, 215][this.id - 1];
    this.sprites.lineNormal.y = this.sprites.lineGlow.y = [297, 168, 482, 142, 116, 147, 326, 216, 205, 
    274, 172, 168, 119, 193, 327, 131, 301, 142, 303, 195, 197][this.id - 1];
    this.movie = new MovieClip;
    this.movie.addTween((new SpriteTween(this.sprites.activeToWin)).move("0-9,9,9,9,9,9,9,9,9,9,9,9-0", 
    1800));
    this.movie.addTween((new Tween(this.sprites.lineNormal, Tween.ALPHA_FUNC, 0)).move(1, 600).move(0, 
    600).move(-1, 600));
    this.movie.addTween((new Tween(this.sprites.lineGlow, Tween.ALPHA_FUNC, 0)).move(0, 600).move(1, 300).move(-1, 
    300));
    this.movie.addAction(this.movie.stop, 1199);
    this.movie.addAction(this.movie.stop, 1800);
    this.movie.stop(0)
};
FreespinsPayline.prototype.show = function () {};
FreespinsPayline.prototype.active = function ()
{
    "active" != this.state && (this.movie.play(1200), this.state = "active");
};
FreespinsPayline.prototype.win = function ()
{
    this.movie.play(0);
    this.state = "win";
};
ServerData.prototype.defaultData.thief_pos = 0;
ServerData.prototype.defaultData.thief_action = [];
ServerData.prototype.defaultData.thief_hold = 0;
ServerData.prototype.defaultData.add_freespins = 0;
ServerData.prototype.defaultData.accumulated_freespins = 10;
ServerData.prototype.defaultData.bonusBet = 0;
ServerData.prototype.defaultData.bonus_round =- 1;
ServerData.prototype.defaultData.bonus_pick =- 1;
ServerData.prototype.defaultData.bonusKeys = 7;
ServerData.prototype.defaultData.superprizeWin = 0;
ServerData.prototype.defaultData.bonusRooms = [];
ServerData.prototype.defaultData.bonusRoomType =- 1;
ServerData.prototype.defaultData.currentRoom =- 1;
ServerData.prototype.defaultData.bonusPaid = 0;
ServerData.prototype.defaultData.allBonusWins = 0;
ServerData.prototype.defaultData.bonusGamesFinished = 0;
ServerData.prototype.defaultData.freespinsBet = 0;
ServerData.prototype.defaultData.lastSpinBet = 0;
ServerData.prototype.hasBonusWins = function ()
{
    return 0 < this.freespinsAwarded || 6 == this.thief_action[this.thief_action.length - 1];
};
ServerData.prototype.startBonus = function ()
{
    var a = connection.createMessage("bonus"), b = $("<action/>");
    b.attr("round", 0);
    a.append(b);
    0 <= clientData.giftspins && (b = $("<gift2-spins/>"), b.attr("id", clientData.giftspins), a.append(b));
    connection.send(a);
    this.bonusRooms = [];
    this.superprizeWin = this.bonus_round = 0;
    this.currentRoom = 1;
};
ServerData.prototype.pickBonus = function ()
{
    this.bonus_pick = clientData.bonusPick;
    var a = connection.createMessage("bonus"), b = $("<action/>");
    b.attr("round", this.bonus_round + 1);
    b.attr("type", 300 + this.bonus_pick);
    a.append(b);
    0 <= clientData.giftspins && (b = $("<gift2-spins/>"), b.attr("id", clientData.giftspins), a.append(b));
    connection.send(a)
};
ServerData.prototype.restoreProgress = function ()
{
    this.thief_action = [];
    this.thief_pos = Number(this.giftspinsLastProgress.attr("thief_pos"));
    this.thief_hold = Number(this.giftspinsLastProgress.attr("thief_hold"));
    this.add_freespins = 0;
    this.accumulated_freespins = Number(this.giftspinsLastProgress.attr("accum_bonus_games")) + 10;
};
ServerData.prototype.sendBonusShiftMessage = function (a)
{
    var b = connection.createMessage("shifter"), c = $('<game game="bonus"/>');
    a = $('<shift value="' + a.join(",") + '"/>');
    c.append(a);
    b.append(c);
    connection.send(b)
};
ServerData.prototype.sendSpecialShiftMessage = function (a)
{
    var b = connection.createMessage("shifter"), c = $('<game game="thief_steps"/>');
    a = a.join(",").split(",");
    for (var d = 0; d < a.length; d++) {
        var e = $('<shift value="' + a[d] + '"/>');
        c.append(e)
    }
    b.append(c);
    connection.send(b)
};
serverData.addParser("start", function (a)
{
    this.thief_pos = Number(a.find("game_type").attr("thief_pos"));
    this.thief_hold = Number(a.find("game_type").attr("thief_hold"));
    this.accumulated_freespins = Number(a.find("game_type").attr("accum_bonus_games")) + 10;
    this.allBonusWins = Number(a.find("game_type").attr("bonus_total_winnings"));
    this.bonusGamesFinished = Number(a.find("game_type").attr("bonus_games_complete"));
});
serverData.addParser("reconnect", function (a)
{
    var b = a.find("game");
    this.allBonusWins = Number(b.attr("bonus_total_winnings"));
    this.bonusGamesFinished = Number(b.attr("bonus_games_complete"));
    var c = a.find("spin_cmd");
    0 < c.length ? (this.thief_pos = Number(c.find("game").attr("thief_pos")), this.thief_action = (this.thief_action = c.find("game").attr("thief_action")) ? this.thief_action.split(",").map(Number) : [], 
    this.thief_hold = Number(c.find("game").attr("thief_hold")) - 1, this.accumulated_freespins = Number(c.find("game").attr("accum_bonus_games")) + 10, 
    this.add_freespins = Number(c.find("game").attr("add_bonus_games")), this.freespinsBet = Number(c.find("game").attr("freegame_bet")) || 0, 
    this.lastSpinBet = Number(c.find("game").attr("lastspin_bet")) || 0) : (this.thief_pos = Number(a.find("game").attr("thief_pos")), 
    this.thief_action = (this.thief_action = a.find("game").attr("thief_action")) ? this.thief_action.split(",").map(Number) : [], 
    this.thief_hold = Number(a.find("game").attr("thief_hold")), this.accumulated_freespins = Number(a.find("game").attr("accum_bonus_games")) + 10, 
    this.add_freespins = Number(a.find("game").attr("add_bonus_games") || 0), this.freespinsBet = Number(a.find("game").attr("freegame_bet")) || 0, 
    this.lastSpinBet = Number(a.find("game").attr("lastspin_bet")) || 0);
    this.bonusBet = Number(c.find("game").attr("cash-bet-game"));
    a = a.find("game_cmd");
    if (0 < a.length)
    {
        var d = b.find("bonus"), e = d.find("room");
        this.bonus_round = Number(d.attr("round"));
        0 < this.bonus_round && (this.thief_pos = Number(b.attr("thief_pos")), this.thief_action = (this.thief_action = b.attr("thief_action")) ? this.thief_action.split(",").map(Number) : [], 
        this.thief_hold = Number(b.attr("thief_hold")), this.accumulated_freespins = Number(b.attr("accum_bonus_games")) + 10, 
        this.add_freespins = Number(c.find("game").attr("add_bonus_games")));
        this.bonusKeys = Number(d.attr("keys"));
        this.bonusCops = Number(d.attr("cops"));
        this.bonusPaid = Number(d.attr("win"));
        for (b = 0; b < e.length; b++)
        {
            c = !1;
            for (d = 0; d < this.bonusRooms.length; d++)
            {
                this.bonusRooms[d].id == Number($(e[b]).attr("id")) && (c = !0, this.bonusRooms[d].status = Number($(e[b]).attr("status")), 
                $(e[b]).attr("type") && (this.bonusRooms[d].type = Number($(e[b]).attr("type")), this.bonusRoomType = this.bonusRooms[d].type, 
                1 == this.bonusRooms[d].type && (this.roundPaid = this.superprizeWin = Number($(e[b]).attr("win")))), 
                $(e[b]).attr("win") && (this.bonusRooms[d].win = Number($(e[b]).attr("win")), this.roundPaid = this.bonusRooms[d].win));
            }
            c || (c = 
            {
                id : Number($(e[b]).attr("id")), column : Number($(e[b]).attr("column")), row : Number($(e[b]).attr("row")), 
                width : Number($(e[b]).attr("width")), status : Number($(e[b]).attr("status")), random : Number($(e[b]).attr("random")), 
                win : Number($(e[b]).attr("win") ||- 1), type : Number($(e[b]).attr("type") ||- 1)
            },
            this.bonusRooms.push(c), 1 == c.type && (this.superprizeWin = c.win))
        }
        a = a.find("bonus>room");
        for (b = 0; b < a.length; b++) {
            $(a[b]).attr("win") && (this.roundPaid = Number($(a[b]).attr("win")));
        }
    }
});
serverData.addParser("bet", function (a)
{
    this.bonusBet = Number(a.find("game").attr("cash-bet-game"));
    this.freespinsBet = Number(a.find("game").attr("freegame_bet")) || 0;
    this.lastSpinBet = Number(a.find("game").attr("lastspin_bet")) || 0;
    0 < Number(a.find("game").attr("cash-bet")) ? (this.thief_pos = Number(a.find("game").attr("thief_pos")), 
    this.thief_action = (this.thief_action = a.find("game").attr("thief_action")) ? this.thief_action.split(",").map(Number) : [], 
    this.thief_hold = Number(a.find("game").attr("thief_hold")), this.accumulated_freespins = Number(a.find("game").attr("accum_bonus_games")) + 10, 
    this.add_freespins = Number(a.find("game").attr("add_bonus_games"))) : (this.thief_pos = 0, this.thief_action = [], 
    this.add_freespins = this.thief_hold = 0);
});
serverData.addParser("bonus", function (a)
{
    a = a.find("bonus");
    var b = a.find("room");
    this.bonus_round = Number(a.attr("round")) || 0;
    this.bonusKeys = Number(a.attr("keys"));
    this.bonusCops = Number(a.attr("cops"));
    this.bonusPaid = Number(a.attr("win"));
    for (var c = this.roundPaid = 0; c < b.length; c++)
    {
        for (var d = !1, e = 0; e < this.bonusRooms.length; e++)
        {
            this.bonusRooms[e].id == Number($(b[c]).attr("id")) && (d = !0, this.bonusRooms[e].status = Number($(b[c]).attr("status")), 
            $(b[c]).attr("type") && (this.bonusRooms[e].type = Number($(b[c]).attr("type")), this.bonusRoomType = this.bonusRooms[e].type, 
            1 == this.bonusRooms[e].type && (this.roundPaid = this.superprizeWin = Number($(b[c]).attr("win")))), 
            $(b[c]).attr("win") && (this.bonusRooms[e].win = Number($(b[c]).attr("win")), this.roundPaid = this.bonusRooms[e].win));
        }
        d || (d = 
        {
            id : Number($(b[c]).attr("id")), column : Number($(b[c]).attr("column")), row : Number($(b[c]).attr("row")), 
            width : Number($(b[c]).attr("width")), status : Number($(b[c]).attr("status")), random : Number($(b[c]).attr("random")), 
            type : Number($(b[c]).attr("type") || - 1)
        },
        this.bonusRooms.push(d))
    }
    if (0 == this.bonusKeys || 0 < this.superprizeWin)
    {
        this.allBonusWins = Number(a.attr("bonus_total_winnings")), this.bonusGamesFinished = Number(a.attr("bonus_games_complete"));
    }
});
serverData.addErrorParser("bet", function (a)
{
    this.thief_action = [];
    this.add_freespins = 0;
});
serverData.addParser("gift2-activate", function (a)
{
    this.thief_pos = Number(a.find("game_type").attr("thief_pos"));
    this.thief_action = [];
    this.thief_hold = Number(a.find("game_type").attr("thief_hold"));
    this.accumulated_freespins = Number(a.find("game_type").attr("accum_bonus_games")) + 10;
    this.add_freespins = 0;
});
ClientData.prototype.defaultData.thief_action_number = 0;
ClientData.prototype.defaultData.bonusBet = 0;
ClientData.prototype.defaultData.bonusPaid = 0;
ClientData.prototype.defaultData.bonusSuperprizePaid = 0;
ClientData.prototype.defaultData.bonusKeys = 7;
ClientData.prototype.defaultData.allBonusWins = 0;
ClientData.prototype.defaultData.bonusGamesFinished = 0;
ClientData.prototype.defaultData.bonusRound =- 1;
ClientData.prototype.defaultData.freespinsBet = 0;
ClientData.prototype.getFreespinsBet = function ()
{
    return serverData.freespinsBet * this.lines;
};
function hasThiefActions()
{
    return 0 < serverData.thief_action.length
}
clientData.removeTransition("bet.win", "bet.freewin");
clientData.addTransition({
    from : "init", to : "thief.start", type : "auto", guard : hasThiefActions, priority :- 1.5
});
clientData.addTransition(
{
    from : "init", to : "bonus.result", type : "auto",
    guard : function ()
    {
        return 0 < serverData.bonus_round && (0 < serverData.superprizeWin || 0 == serverData.bonusKeys);
    }
});
clientData.addTransition(
{
    from : "init", to : "bonus.pick", type : "auto",
    guard : function ()
    {
        return 0 < serverData.bonus_round;
    }
});
clientData.addTransition({
    from : "spin.stop", to : "thief.start", type : "auto", guard : hasThiefActions, priority :- .5
});
clientData.addTransition({
    from : "bet.win", to : "thief.start", type : "auto", guard : hasThiefActions
});
clientData.addTransition(
{
    from : "thief.start", to : "thief.move", type : "auto",
    guard : function ()
    {
        return 1 == serverData.thief_action[clientData.thief_action_number] || 7 == serverData.thief_action[clientData.thief_action_number] || 8 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.start", to : "thief.release", type : "auto",
    guard : function ()
    {
        return 3 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.start", to : "thief.wild", type : "auto",
    guard : function ()
    {
        return 5 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.start", to : "thief.bonus", type : "auto",
    guard : function ()
    {
        return 6 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.release", to : "thief.move", type : "auto",
    guard : function ()
    {
        return 1 == serverData.thief_action[clientData.thief_action_number] || 7 == serverData.thief_action[clientData.thief_action_number] || 8 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.release", to : "thief.wild", type : "auto",
    guard : function ()
    {
        return 5 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.release", to : "thief.bonus", type : "auto",
    guard : function ()
    {
        return 6 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.move", to : "thief.move", type : "auto",
    guard : function ()
    {
        return 1 == serverData.thief_action[clientData.thief_action_number] || 7 == serverData.thief_action[clientData.thief_action_number] || 8 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.move", to : "thief.cop", type : "auto",
    guard : function ()
    {
        return 2 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.move", to : "thief.mummy", type : "auto",
    guard : function ()
    {
        return 4 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.move", to : "thief.wild", type : "auto",
    guard : function ()
    {
        return 5 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.move", to : "thief.bonus", type : "auto",
    guard : function ()
    {
        return 6 == serverData.thief_action[clientData.thief_action_number];
    }
});
clientData.addTransition(
{
    from : "thief.move", to : "freespins.start", type : "auto",
    guard : function ()
    {
        return 0 < serverData.freespinsAwarded;
    },
    priority :- 1
});
clientData.addTransition({
    from : "thief.move", to : "thief.stop", type : "auto", priority :- 2
});
clientData.addTransition({
    from : "thief.wild", to : "thief.stop", type : "auto"
});
clientData.addTransition({
    from : "thief.cop", to : "thief.stop", type : "auto"
});
clientData.addTransition({
    from : "thief.mummy", to : "thief.stop", type : "auto"
});
clientData.addTransition({
    from : "thief.release", to : "thief.stop", type : "auto", priority :- 2
});
clientData.addTransition(
{
    from : "freespins.stop", to : "thief.stop", type : "server", action : serverData.stopFreespins, mixed :!0, 
    priority : 1
});
clientData.addTransition({
    from : "thief.stop", to : "bet.idle", type : "auto"
});
clientData.addTransition({
    from : "thief.bonus", to : "bonus.start", type : "auto"
});
clientData.addTransition(
{
    from : "bonus.start", to : "bonus.intro", type : "server", mixed :!0, action : serverData.startBonus
});
clientData.addTransition({
    from : "bonus.intro", to : "bonus.pick", type : "auto"
});
clientData.addTransition({
    from : "bonus.pick", to : "bonus.wait", type : "action", action : "pick"
});
clientData.addTransition(
{
    from : "bonus.wait", to : "bonus.result", type : "server", mixed :!0, action : serverData.pickBonus
});
clientData.addTransition(
{
    from : "bonus.result", to : "bonus.pick", type : "auto",
    guard : function ()
    {
        return 0 < serverData.bonusKeys && 0 == serverData.superprizeWin;
    }
});
clientData.addTransition(
{
    from : "bonus.result", to : "bonus.superprize", type : "auto",
    guard : function ()
    {
        return 0 < serverData.superprizeWin;
    }
});
clientData.addTransition(
{
    from : "bonus.result", to : "bonus.win_summary", type : "auto",
    guard : function ()
    {
        return 0 >= serverData.bonusKeys && 0 == serverData.superprizeWin && 0 < serverData.bonusPaid;
    }
});
clientData.addTransition(
{
    from : "bonus.result", to : "bonus.loose_summary", type : "auto",
    guard : function ()
    {
        return 0 >= serverData.bonusKeys && 0 == serverData.superprizeWin && 0 == serverData.bonusPaid;
    }
});
clientData.addTransition({
    from : "bonus.win_summary", to : "bonus.stop", type : "auto"
});
clientData.addTransition({
    from : "bonus.superprize", to : "bonus.stop", type : "auto"
});
clientData.addTransition({
    from : "bonus.loose_summary", to : "bonus.stop", type : "auto"
});
clientData.addTransition({
    from : "bonus.stop", to : "thief.stop", type : "auto"
});
clientData.setTransitionCallback(/^init$/, /.+.*/, function ()
{
    this.allBonusWins = serverData.allBonusWins;
    this.bonusGamesFinished = serverData.bonusGamesFinished;
     - 1 != serverData.bonus_round && 0 != serverData.bonus_round && (this.paid = 0);
    this.bonusBet = serverData.bonusBet;
    this.freespinsBet = serverData.freespinsBet;
    this.freespinsPaid = serverData.freespinsPaid;
});
clientData.setTransitionCallback(/init/, /bonus.pick/, function ()
{
    this.bonusBet = serverData.bonusBet;
    this.bonusPaid = serverData.bonusPaid;
    this.balance = serverData.balance + this.bonusPaid;
    this.bet = serverData.bet;
    this.bonusKeys = serverData.bonusKeys;
    this.bonusCops = serverData.bonusCops;
    this.bonusRound = serverData.bonus_round;
    this.microround = !0
});
clientData.setTransitionCallback(/spin.stop/, /.*.*.*/, function ()
{
    this.bonusBet = serverData.bonusBet;
    this.freespinsBet = serverData.freespinsBet;
});
clientData.setTransitionCallback(/.+/, /thief.start/, function ()
{
    this.thief_action_number = 0;
});
clientData.setTransitionCallback(/thief.(start|move|release)/, /thief.+/, function ()
{
    this.thief_action_number++
});
clientData.setTransitionCallback(/.+/, /freespins.start/, function ()
{
    this.freespinsNumber = serverData.freespinsNumber;
    this.freespinsBet = serverData.freespinsBet;
    this.freespinsPaid = 0;
});
clientData.setTransitionCallback(/.+/, /freespins.stop/, function ()
{
    this.freespinsPaid = serverData.freespinsPaid;
});
clientData.setTransitionCallback(/freespins.stop/, /.+/, function ()
{
    this.freespinsActive = !1;
    this.paid = 0;
    this.bet = serverData.lastSpinBet;
    this.freespinsBet = 0;
});
clientData.setTransitionCallback(/bonus.start/, /.+/, function ()
{
    this.bonusBet = serverData.bonusBet;
    this.bonusPaid = this.bonusSuperprizePaid = 0;
    this.bonusKeys = serverData.bonusKeys;
    this.bonusCops = serverData.bonusCops;
    this.microround = !0;
    this.bonusRound = 0;
});
clientData.setTransitionCallback(/.+/, /bonus.result/, function ()
{
    this.bonusRoomType = serverData.bonusRoomType;
});
clientData.setTransitionCallback(/bonus.result/, /.+/, function ()
{
    this.bonusKeys = serverData.bonusKeys;
    this.bonusCops = serverData.bonusCops;
    this.bonusPaid = serverData.bonusPaid;
    this.bonusSuperprizePaid = serverData.superprizeWin;
    0 < this.bonusSuperprizePaid ? this.bonusPaid -= this.bonusSuperprizePaid : 0 == this.bonusKeys ? this.microround = !1 : this.balance += serverData.roundPaid
});
clientData.setTransitionCallback(/bonus.pick/, /bonus.wait/, function ()
{
    this.bonusKeys--
});
clientData.setTransitionCallback(/^init$/, /bonus.result/, function ()
{
    this.bonusKeys = serverData.bonusKeys;
    this.bonusCops = serverData.bonusCops;
    this.bonusPaid = serverData.bonusPaid - serverData.roundPaid;
    0 < serverData.superprizeWin && this.bonusGamesFinished--
});
clientData.setTransitionCallback(/bonus.superprize/, /.+/, function ()
{
    this.bonusGamesFinished++;
    this.bonusPaid = serverData.bonusPaid;
    this.microround = !1
});
clientData.setTransitionCallback(/bonus.stop/, /.+/, function ()
{
    this.microround = !1;
    this.allBonusWins = serverData.allBonusWins;
    this.paid = 0;
});
function Thief()
{
    PIXI.Container.call(this);
    this.step = 0;
    this.skipMove = !1;
    this._movie = null;
    this.animations = {};
    this.animations.jump = this.createJumpAnimation();
    this.addChild(this.animations.jump);
    this.animations.run = this.createRunAnimation();
    this.addChild(this.animations.run);
    this.animations.run_stairs = this.createRunStairsAnimation();
    this.addChild(this.animations.run_stairs);
    this.animations.wind_up = this.createWindUpAnimation();
    this.addChild(this.animations.wind_up);
    this.animations.wind_up_floor = this.createWindUpFloorAnimation();
    this.addChild(this.animations.wind_up_floor);
    this.animations.wind_up_stairs_floor = this.createWindUpStairsFloorAnimation();
    this.addChild(this.animations.wind_up_stairs_floor);
    this.animations.wind_up_floor_stairs = this.createWindUpFloorStairsAnimation();
    this.addChild(this.animations.wind_up_floor_stairs);
    var a;
    a = Sprite.fromFile("img/main/thief/wall-top-left.png");
    a.x = 154;
    a.y = 19;
    this.addChild(a);
    a = Sprite.fromFile("img/main/thief/wall-bottom-left.png");
    a.x = 230;
    a.y = 461;
    this.addChild(a);
    a = Sprite.fromFile("img/main/thief/wall-centre-right.png");
    a.x = 1121;
    a.y = 298;
    this.addChild(a);
    a = Sprite.fromFile("img/main/thief/columns.png");
    a.x = 400;
    a.y = 95;
    this.addChild(a);
    this.animations.hands = this.createHandsAnimation();
    this.addChild(this.animations.hands);
    this.jumpMovie = this.createJumpMovie();
    this.hideAll()
}
Thief.prototype = Object.create(PIXI.Container.prototype);
Thief.prototype.constructor = Thief;
Thief.prototype.createJumpAnimation = function ()
{
    var a = new PIXI.Container;
    a.jump = Sprite.fromFolder("img/main/thief/jump", 66);
    a.jump.x = 40;
    a.jump.y =- 42;
    a.addChild(a.jump);
    a.look_out = Sprite.fromFolder("img/main/thief/look_out", 4);
    a.look_out.x = 185;
    a.look_out.y = 126;
    a.addChild(a.look_out);
    return a;
};
Thief.prototype.createRunAnimation = function ()
{
    var a = new PIXI.Container;
    a.run_start = Sprite.fromFolder("img/main/thief/run_start", 7);
    a.run_start.x = 52;
    a.run_start.y =- 2;
    a.addChild(a.run_start);
    a.run_finish = Sprite.fromFolder("img/main/thief/run_finish", 7);
    a.addChild(a.run_finish);
    a.transfer = Sprite.fromFile("img/main/thief/transfer.png");
    a.transfer.y =- 2;
    a.addChild(a.transfer);
    a.look_out = Sprite.fromFolder("img/main/thief/look_out", 4);
    a.addChild(a.look_out);
    return a;
};
Thief.prototype.createHandsAnimation = function ()
{
    var a = new PIXI.Container;
    a.hands = Sprite.fromFolder("img/main/thief/hands", 8);
    a.addChild(a.hands);
    return a;
};
Thief.prototype.createRunStairsAnimation = function ()
{
    var a = new PIXI.Container;
    a.look_out = Sprite.fromFolder("img/main/thief/look_out", 4);
    a.addChild(a.look_out);
    a.run_stairs = Sprite.fromFolder("img/main/thief/run_stairs", 12);
    a.run_stairs.x = 9;
    a.run_stairs.y = 4;
    a.addChild(a.run_stairs);
    return a;
};
Thief.prototype.createWindUpAnimation = function ()
{
    var a = new PIXI.Container;
    a.look_out = Sprite.fromFolder("img/main/thief/look_out", 4);
    a.addChild(a.look_out);
    a.wind_up = Sprite.fromFolder("img/main/thief/wind_up", 16);
    a.wind_up.x = 17;
    a.wind_up.y =- 11;
    a.addChild(a.wind_up);
    a.jump = Sprite.fromFolder("img/main/thief/jump", 66);
    a.addChild(a.jump);
    a.transfer = Sprite.fromFile("img/main/thief/transfer.png");
    a.transfer.y =- 2;
    a.transfer.scale.x =- 1;
    a.addChild(a.transfer);
    return a;
};
Thief.prototype.createWindUpFloorAnimation = function ()
{
    var a = new PIXI.Container;
    a.look_out = Sprite.fromFolder("img/main/thief/look_out", 4);
    a.addChild(a.look_out);
    a.wind_up = Sprite.fromFolder("img/main/thief/wind_up", 16);
    a.wind_up.x = 17;
    a.wind_up.y =- 11;
    a.addChild(a.wind_up);
    a.transfer = Sprite.fromFile("img/main/thief/transfer.png");
    a.transfer.y =- 2;
    a.transfer.scale.x =- 1;
    a.addChild(a.transfer);
    a.run_finish = Sprite.fromFolder("img/main/thief/run_finish", 7);
    a.run_finish.scale.x =- 1;
    a.addChild(a.run_finish);
    return a;
};
Thief.prototype.createWindUpStairsFloorAnimation = function ()
{
    var a = new PIXI.Container;
    a.look_out = Sprite.fromFolder("img/main/thief/look_out", 4);
    a.addChild(a.look_out);
    a.wind_up = Sprite.fromFolder("img/main/thief/wind_up", 16);
    a.wind_up.x = 17;
    a.wind_up.y =- 11;
    a.addChild(a.wind_up);
    a.run_stairs = Sprite.fromFile("img/main/thief/run_stairs/11.png");
    a.addChild(a.run_stairs);
    a.transfer = Sprite.fromFile("img/main/thief/transfer.png");
    a.transfer.y =- 168;
    a.addChild(a.transfer);
    a.run_finish = Sprite.fromFolder("img/main/thief/run_finish", 7);
    a.run_finish.x = 340;
    a.run_finish.y =- 166;
    a.addChild(a.run_finish);
    return a;
};
Thief.prototype.createWindUpFloorStairsAnimation = function ()
{
    var a = new PIXI.Container;
    a.look_out = Sprite.fromFolder("img/main/thief/look_out", 4);
    a.addChild(a.look_out);
    a.wind_up = Sprite.fromFolder("img/main/thief/wind_up", 16);
    a.wind_up.x = 17;
    a.wind_up.y =- 11;
    a.addChild(a.wind_up);
    a.run_stairs = Sprite.fromFile("img/main/thief/run_stairs/11.png");
    a.addChild(a.run_stairs);
    a.transfer = Sprite.fromFile("img/main/thief/transfer.png");
    a.transfer.y =- 2;
    a.transfer.scale.x =- 1;
    a.addChild(a.transfer);
    a.run_finish = Sprite.fromFolder("img/main/thief/run_finish", 7);
    a.run_finish.x = 0;
    a.run_finish.y =- 170;
    a.addChild(a.run_finish);
    return a;
};
Thief.prototype.createJumpMovie = function ()
{
    var a = this.animations.jump.jump, b = this.animations.jump.look_out, c = new MovieClip;
    c.addTween((new SpriteTween(a)).move("0-37,37,37,37,37,37,37,37,37,37,37-65", 5E3).move("65", 2E3).move("65-37", 
    2E3));
    c.addTween((new Tween(a, Tween.ALPHA_FUNC, 1)).move(-1, 5E3, Tween.JUMP).move(1, 2E3, Tween.JUMP));
    c.addTween((new SpriteTween(b)).move("0", 5500).move("0-3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3-0", 1500));
    c.addTween((new Tween(b, Tween.ALPHA_FUNC, 0)).move(1, 5500, Tween.JUMP).move(-1, 1500, Tween.JUMP));
    c.addAction(function ()
    {
        "bet.idle" == clientData.state && c.stop()
    }, 2500);
    c.addAction(c.stop, 7E3);
    c.addAction(c.stop, 9E3);
    return c;
};
Thief.prototype.jump = function ()
{
    this.hideAll();
    this.animations.jump.visible = !0;
    this.jumpMovie.play(0);
    sound.get("sfx").play("main.thief.start")
};
Thief.prototype.climbUp = function ()
{
    this.hideAll();
    this.animations.jump.visible = !0;
    this.jumpMovie.play(3E3);
    sound.get("sfx").play("main.thief.window")
};
Thief.prototype.climbOut = function ()
{
    var a = Math.min(Math.max(5E3 - this.jumpMovie.time, 0) + 7E3, 8999);
    this.hideAll();
    this.animations.jump.visible = !0;
    this.jumpMovie.play(a)
};
Thief.prototype.run = function (a)
{
    this.hideAll();
    var b = this._movie = new MovieClip, c = [0, 185, 346, 530, 710, 890, 1215, 1053, 870, 690, 507, 185, 
    346, 530, 710, 892][this.step], d = [0, 126, 126, 126, 126, 126, 292, 292, 292, 292, 292, 460, 460, 
    460, 460, 460][this.step], e = [0, 1, 1, 1, 1, 1, - 1, - 1, - 1, - 1, - 1, 1, 1, 1, 1, 1][this.step];
    switch (this.step)
    {
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
        case 11:
        case 12:
        case 13:
        case 14:
            this.animations.run.visible = this.animations.hands.visible = !0;
            this.animations.run.x = this.animations.hands.x = c;
            this.animations.run.y = this.animations.hands.y = d;
            this.animations.run.scale.x = this.animations.hands.scale.x = e;
            var c = this.animations.run.look_out, e = this.animations.run.run_start, f = this.animations.run.transfer, 
            g = this.animations.run.run_finish, d = this.animations.hands.hands, h = [0, 160, 184, 178, 184, 
            0, 160, 178, 178, 182, 0, 160, 182, 178, 184][this.step];
            g.x = h + 1;
            var l = 0 <= [1, 6, 11].indexOf(this.step) ? "7" : "6";
            b.addTween((new SpriteTween(c)).move("0-3,3,3,3", 500).move("3", 1600).move("3-0", 250));
            b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 500, Tween.JUMP).move(1, 1600, Tween.JUMP).move(-1, 
            250, Tween.JUMP));
            b.addTween((new Tween(c, Tween.X_FUNC, 0)).move(h, 2100, Tween.JUMP));
            b.addTween((new SpriteTween(e)).move("0", 500).move("0-6", 500));
            b.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, 500, Tween.JUMP).move(-1, 500, Tween.JUMP));
            b.addTween((new Tween(f, Tween.ALPHA_FUNC, 0)).move(1, 1E3, Tween.JUMP).move(-1, 100, Tween.JUMP));
            b.addTween((new Tween(f, Tween.X_FUNC, 52)).move(0, 1E3).move(h - 80, 100));
            b.addTween((new SpriteTween(g)).move("0", 1100).move("0-6", 500).move("6", 500));
            b.addTween((new Tween(g, Tween.ALPHA_FUNC, 0)).move(1, 1100, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new SpriteTween(d)).move(l, 1100).move("0-6", 500).move("6", 500));
            b.addTween((new Tween(d, Tween.X_FUNC, 52)).move(h, 1100, Tween.JUMP));
            b.addTween(new Tween(d, Tween.Y_FUNC, 31));
            b.addTween(new Tween(d, Tween.SCALE_X_FUNC, 1));
            b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 214, Tween.JUMP).move(-1, 286, Tween.JUMP).move(1, 
            600, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addAction(b.stop, 2350);
            break;
        case 5:
        case 10:
            this.animations.run_stairs.visible = this.animations.hands.visible = !0;
            this.animations.run_stairs.x = this.animations.hands.x = c;
            this.animations.run_stairs.y = this.animations.hands.y = d;
            this.animations.run_stairs.scale.x = this.animations.hands.scale.x = e;
            c = this.animations.run_stairs.look_out;
            e = this.animations.run_stairs.run_stairs;
            d = this.animations.hands.hands;
            b.addTween((new SpriteTween(c)).move("0-3,3,3,3", 500).move("3", 1E3).move("0-3,3,3,3,3,3-0", 
            800));
            b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 500, Tween.JUMP).move(1, 1E3, Tween.JUMP).move(-1, 
            800, Tween.JUMP));
            b.addTween((new Tween(c, Tween.X_FUNC, 0)).move(325, 1500, Tween.JUMP));
            b.addTween((new Tween(c, Tween.Y_FUNC, 0)).move(166, 1500, Tween.JUMP));
            b.addTween((new Tween(c, Tween.SCALE_X_FUNC, 1)).move(-2, 1500, Tween.JUMP));
            b.addTween((new SpriteTween(e)).move("0", 500).move("0-11", 700));
            b.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, 500, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new Tween(e, Tween.SCALE_X_FUNC, 1)).move(-2, 1300, Tween.JUMP).move(2, 100, Tween.JUMP));
            b.addTween((new Tween(e, Tween.X_FUNC, 9)).move(0, 1200).move(70, 99).move(230, 1).move(-70, 99).move(-230, 
            1).move(70, 100));
            b.addTween((new Tween(e, Tween.Y_FUNC, 5)).move(0, 1200).move(160, 300));
            b.addTween((new SpriteTween(d)).move("6", 1600).move("7", 500));
            b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 214, Tween.JUMP).move(-1, 346, Tween.JUMP).move(1, 
            1140, Tween.JUMP).move(-1, 400, Tween.JUMP));
            b.addTween((new Tween(d, Tween.X_FUNC, 52)).move(221, 1100, Tween.JUMP));
            b.addTween((new Tween(d, Tween.Y_FUNC, 31)).move(166, 1100, Tween.JUMP));
            b.addTween((new Tween(d, Tween.SCALE_X_FUNC, 1)).move(-2, 1500, Tween.JUMP));
            b.addAction(b.stop, 2300);
            break;
        case 15:
            this.animations.run_stairs.visible = this.animations.hands.visible = game.main.car.visible = !0, 
            this.animations.run_stairs.x = this.animations.hands.x = c, this.animations.run_stairs.y = this.animations.hands.y = d, 
            this.animations.run_stairs.scale.x = this.animations.hands.scale.x = e, c = this.animations.run_stairs.look_out, 
            e = this.animations.run_stairs.run_stairs, d = this.animations.hands.hands, c.x = 0, c.y = 0, 
            c.scale.x = 1, e.y = 5, d.x = 52, d.y = 31, d.scale.x = 1, d.frame = 6, b.addTween((new SpriteTween(c)).move("0-3,3,3,3", 
            500)), b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 500, Tween.JUMP)), b.addTween((new SpriteTween(e)).move("0", 
            500).move("0-11", 700)), b.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, 500, Tween.JUMP).move(-1, 
            700, Tween.JUMP)), b.addTween((new Tween(e, Tween.X_FUNC, 9)).move(0, 1200).move(200, 200)), b.addTween((new Tween(d, 
            Tween.ALPHA_FUNC, 0)).move(1, 214, Tween.JUMP).move(-1, 346, Tween.JUMP)), b.addTween((new SpriteTween(game.main.car)).move("0", 
            500).move("0-17", 1100)), b.addTween((new Tween(game.main.car, Tween.X_FUNC, 1400)).move(-400, 
            500).move(0, 1100).move(400, 500)), b.addAction(b.stop, 2350)
    }
    a && b.addEventListenerOnce(GameEvent.COMPLETE, function ()
    {
        this._movie = null;
        a()
    }
    .bind(this));
    b.play()
};
Thief.prototype.windUp = function (a)
{
    this.hideAll();
    var b = this._movie = new MovieClip, c = [0, 185, 346, 530, 710, 890, 1215, 1053, 875, 692, 507, 185, 
    346, 530, 710, 890][this.step], d = [0, 126, 126, 126, 126, 126, 292, 292, 292, 292, 292, 466, 466, 
    466, 466, 466][this.step], e = [0, 1, 1, 1, 1, 1, - 1, - 1, - 1, - 1, - 1, 1, 1, 1, 1, 1][this.step];
    switch (this.step)
    {
        case 1:
            this.animations.wind_up.visible = this.animations.hands.visible = !0;
            this.animations.wind_up.x = this.animations.hands.x = c;
            this.animations.wind_up.y = this.animations.hands.y = d;
            this.animations.wind_up.scale.x = this.animations.hands.scale.x = e;
            var c = this.animations.wind_up.look_out, d = this.animations.wind_up.wind_up, f = this.animations.wind_up.jump, 
            e = this.animations.wind_up.transfer, g = this.animations.hands.hands;
            g.x = 52;
            g.y = 31;
            g.frame = "7";
            g.scale.x = 1;
            e.alpha = 0;
            f.x =- 145;
            f.y =- 168;
            b.addTween((new SpriteTween(c)).move("0-3,3,3,3", 500));
            b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 500, Tween.JUMP).move(1, 800, Tween.JUMP).move(-1, 
            100));
            b.addTween((new SpriteTween(d)).move("0", 500).move("0-5,5,5,5,5,4,3", 800));
            b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 500, Tween.JUMP).move(-1, 800, Tween.JUMP));
            b.addTween((new SpriteTween(f)).move("65", 1400).move("65-37", 2E3));
            b.addTween((new Tween(f, Tween.ALPHA_FUNC, 0)).move(1, 1400, Tween.JUMP));
            b.addTween((new Tween(g, Tween.ALPHA_FUNC, 0)).move(1, 214, Tween.JUMP).move(-1, 286, Tween.JUMP));
            b.addAction(b.stop, 3400);
            break;
        case 2:
            this.animations.wind_up.visible = this.animations.hands.visible = !0;
            this.animations.wind_up.x = this.animations.hands.x = c;
            this.animations.wind_up.y = this.animations.hands.y = d;
            this.animations.wind_up.scale.x = this.animations.hands.scale.x = e;
            c = this.animations.wind_up.look_out;
            d = this.animations.wind_up.wind_up;
            e = this.animations.wind_up.transfer;
            f = this.animations.wind_up.jump;
            g = this.animations.hands.hands;
            c.x = 0;
            g.x = 52;
            g.y = 31;
            g.frame = "6";
            g.scale.x = 1;
            f.x =- 306;
            f.y =- 168;
            b.addTween((new SpriteTween(c)).move("0-3", 300).move("3", 1100));
            b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 300, Tween.JUMP));
            b.addTween((new SpriteTween(d)).move("0", 300).move("0-15", 1E3));
            b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 300, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, 1300, Tween.JUMP).move(-1, 100, Tween.JUMP));
            b.addTween((new Tween(e, Tween.X_FUNC, 140)).move(0, 1300).move(-100, 100));
            b.addTween((new SpriteTween(f)).move("65", 1400).move("65-37", 2E3));
            b.addTween((new Tween(f, Tween.ALPHA_FUNC, 0)).move(1, 1400, Tween.JUMP));
            b.addTween((new Tween(g, Tween.ALPHA_FUNC, 0)).move(1, 225, Tween.JUMP).move(-1, 137, Tween.JUMP));
            b.addAction(b.stop, 3400);
            break;
        case 3:
        case 8:
        case 13:
            this.animations.wind_up_floor.visible = this.animations.hands.visible = !0;
            this.animations.wind_up_floor.x = this.animations.hands.x = c;
            this.animations.wind_up_floor.y = this.animations.hands.y = d;
            this.animations.wind_up_floor.scale.x = this.animations.hands.scale.x = e;
            var h = [0, 0, 0, 310, 0, 0, 0, 0, 310, 0, 0, 0, 0, 310][this.step], l = [0, 0, 0, 345, 0, 0, 
            0, 0, 340, 0, 0, 0, 0, 345][this.step], c = this.animations.wind_up_floor.look_out, d = this.animations.wind_up_floor.wind_up, 
            e = this.animations.wind_up_floor.transfer, f = this.animations.wind_up_floor.run_finish, g = this.animations.hands.hands;
            c.scale.x = 1;
            g.y = 31;
            g.scale.x = 1;
            f.alpha = 0;
            b.addTween((new SpriteTween(c)).move("0-3", 300).move("3", 1200).move("0-3,3,3,3,3,3-0", 800));
            b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 300, Tween.JUMP).move(1, 1200, Tween.JUMP).move(-1, 
            800, Tween.JUMP));
            b.addTween((new Tween(c, Tween.X_FUNC, 0)).move(-l, 1400, Tween.JUMP));
            b.addTween((new SpriteTween(d)).move("0", 300).move("0-15", 1E3));
            b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 300, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, 1300, Tween.JUMP).move(-1, 200, Tween.JUMP));
            b.addTween((new Tween(e, Tween.X_FUNC, 140)).move(0, 1300).move(-h, 200));
            b.addTween((new SpriteTween(g)).move("6,7", 1E3));
            b.addTween((new Tween(g, Tween.ALPHA_FUNC, 0)).move(1, 225, Tween.JUMP).move(-1, 137, Tween.JUMP).move(1, 
            1404, Tween.JUMP).move(-1, 400, Tween.JUMP));
            b.addTween((new Tween(g, Tween.X_FUNC, 52)).move(-l, 1500, Tween.JUMP));
            b.addAction(b.stop, 2300);
            break;
        case 4:
        case 5:
        case 9:
        case 10:
        case 14:
        case 15:
            this.animations.wind_up_floor.visible = this.animations.hands.visible = !0;
            this.animations.wind_up_floor.x = this.animations.hands.x = c;
            this.animations.wind_up_floor.y = this.animations.hands.y = d;
            this.animations.wind_up_floor.scale.x = this.animations.hands.scale.x = e;
            h = [0, 0, 0, 0, 310, 310, 0, 0, 0, 320, 320, 0, 0, 0, 310, 310][this.step];
            l = [0, 0, 0, 0, 365, 360, 0, 0, 0, 363, 364, 0, 0, 0, 365, 360][this.step];
            c = this.animations.wind_up_floor.look_out;
            d = this.animations.wind_up_floor.wind_up;
            e = this.animations.wind_up_floor.transfer;
            f = this.animations.wind_up_floor.run_finish;
            g = this.animations.hands.hands;
            g.y = 31;
            f.x =- l + 162;
            b.addTween((new SpriteTween(c)).move("0-3", 300).move("3", 1700).move("3-0", 500));
            b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 300, Tween.JUMP).move(1, 1700, Tween.JUMP).move(0, 
            400).move(-1, 100));
            b.addTween((new Tween(c, Tween.X_FUNC, 0)).move(-l + 162, 2E3, Tween.JUMP));
            b.addTween((new Tween(c, Tween.SCALE_X_FUNC, 1)).move(-2, 2E3, Tween.JUMP));
            b.addTween((new SpriteTween(d)).move("0", 300).move("0-15", 1E3));
            b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 300, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, 1300, Tween.JUMP).move(-1, 200, Tween.JUMP));
            b.addTween((new Tween(e, Tween.X_FUNC, 140)).move(0, 1300).move(-h, 200));
            b.addTween((new SpriteTween(f)).move("0", 1500).move("0-6", 500));
            b.addTween((new Tween(f, Tween.ALPHA_FUNC, 0)).move(1, 1500, Tween.JUMP).move(-1, 500, Tween.JUMP));
            b.addTween((new SpriteTween(g)).move("6", 1500).move("0-6", 500));
            b.addTween((new Tween(g, Tween.ALPHA_FUNC, 0)).move(1, 225, Tween.JUMP).move(-1, 137, Tween.JUMP).move(1, 
            1138, Tween.JUMP).move(-1, 625, Tween.JUMP));
            b.addTween((new Tween(g, Tween.X_FUNC, 52)).move(-l + 60, 1500, Tween.JUMP));
            b.addTween((new Tween(g, Tween.SCALE_X_FUNC, 1)).move(-2, 1500, Tween.JUMP));
            b.addAction(b.stop, 2500);
            break;
        case 6:
        case 11:
            this.animations.wind_up_stairs_floor.visible = this.animations.hands.visible = !0;
            this.animations.wind_up_stairs_floor.x = this.animations.hands.x = c;
            this.animations.wind_up_stairs_floor.y = this.animations.hands.y = d;
            this.animations.wind_up_stairs_floor.scale.x = this.animations.hands.scale.x = e;
            c = this.animations.wind_up_stairs_floor.look_out;
            d = this.animations.wind_up_stairs_floor.wind_up;
            h = this.animations.wind_up_stairs_floor.run_stairs;
            e = this.animations.wind_up_stairs_floor.transfer;
            f = this.animations.wind_up_stairs_floor.run_finish;
            g = this.animations.hands.hands;
            g.scale.x = 1;
            b.addTween((new SpriteTween(c)).move("0-3,3,3,3", 500).move("3", 2200).move("3-0", 300));
            b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 500, Tween.JUMP).move(1, 2200, Tween.JUMP).move(-1, 
            300, Tween.JUMP));
            b.addTween((new Tween(c, Tween.X_FUNC, 0)).move(340, 2700, Tween.JUMP));
            b.addTween((new Tween(c, Tween.Y_FUNC, 0)).move(-168, 2700, Tween.JUMP));
            b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 500, Tween.JUMP).move(-1, 800, Tween.JUMP));
            b.addTween((new SpriteTween(d)).move("0", 500).move("0-5,5,5,5,4,3,2", 800));
            b.addTween((new Tween(h, Tween.ALPHA_FUNC, 0)).move(1, 1300, Tween.JUMP).move(-1, 300, Tween.JUMP));
            b.addTween((new Tween(h, Tween.SCALE_X_FUNC, 1)).move(-2, 1400, Tween.JUMP).move(2, 100, Tween.JUMP));
            b.addTween((new Tween(h, Tween.X_FUNC, 30)).move(0, 1300).move(70, 99).move(230, 1).move(-70, 
            99).move(-230, 1).move(70, 100));
            b.addTween((new Tween(h, Tween.Y_FUNC, 0)).move(0, 1300).move(-160, 300));
            b.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, 1600, Tween.JUMP).move(-1, 100, Tween.JUMP));
            b.addTween((new Tween(e, Tween.X_FUNC, 120)).move(0, 1600).move(150, 100));
            b.addTween((new Tween(f, Tween.ALPHA_FUNC, 0)).move(1, 1700, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new SpriteTween(f)).move("0", 1700).move("0-6", 500));
            b.addTween((new SpriteTween(g)).move("7", 1700).move("0-6", 500));
            b.addTween((new Tween(g, Tween.ALPHA_FUNC, 0)).move(1, 214, Tween.JUMP).move(-1, 286, Tween.JUMP).move(1, 
            1200, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new Tween(g, Tween.X_FUNC, 52)).move(340, 1500, Tween.JUMP));
            b.addTween((new Tween(g, Tween.Y_FUNC, 31)).move(-168, 1500, Tween.JUMP));
            b.addAction(b.stop, 3E3);
            break;
        case 7:
        case 12:
            this.animations.wind_up_floor_stairs.visible = this.animations.hands.visible = !0;
            this.animations.wind_up_floor_stairs.x = this.animations.hands.x = c;
            this.animations.wind_up_floor_stairs.y = this.animations.hands.y = d;
            this.animations.wind_up_floor_stairs.scale.x = this.animations.hands.scale.x = e;
            c = this.animations.wind_up_floor_stairs.look_out;
            d = this.animations.wind_up_floor_stairs.wind_up;
            h = this.animations.wind_up_floor_stairs.run_stairs;
            e = this.animations.wind_up_floor_stairs.transfer;
            f = this.animations.wind_up_floor_stairs.run_finish;
            g = this.animations.hands.hands;
            c.x = 0;
            g.x = 52;
            g.scale.x = 1;
            b.addTween((new SpriteTween(c)).move("0-3,3,3,3", 500).move("3", 2400).move("3-0", 300));
            b.addTween((new Tween(c, Tween.ALPHA_FUNC, 1)).move(-1, 500, Tween.JUMP).move(1, 2400, Tween.JUMP).move(-1, 
            300, Tween.JUMP));
            b.addTween((new Tween(c, Tween.Y_FUNC, 0)).move(-172, 2900, Tween.JUMP));
            b.addTween((new Tween(d, Tween.ALPHA_FUNC, 0)).move(1, 500, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new SpriteTween(d)).move("0", 500).move("0-15", 1E3));
            b.addTween((new Tween(h, Tween.ALPHA_FUNC, 0)).move(1, 1600, Tween.JUMP).move(-1, 300, Tween.JUMP));
            b.addTween((new Tween(h, Tween.SCALE_X_FUNC, 1)).move(-2, 1700, Tween.JUMP).move(2, 100, Tween.JUMP));
            b.addTween((new Tween(h, Tween.X_FUNC, - 140)).move(0, 1600).move(70, 99).move(230, 1).move(-70, 
            99).move(-230, 1).move(70, 100));
            b.addTween((new Tween(h, Tween.Y_FUNC, 0)).move(0, 1600).move(-160, 300));
            b.addTween((new Tween(e, Tween.ALPHA_FUNC, 0)).move(1, 1500, Tween.JUMP).move(-1, 100, Tween.JUMP));
            b.addTween((new Tween(e, Tween.X_FUNC, 140)).move(0, 1500).move(-70, 100));
            b.addTween((new Tween(f, Tween.ALPHA_FUNC, 0)).move(1, 1900, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new SpriteTween(f)).move("0", 1900).move("0-6", 500));
            b.addTween((new SpriteTween(g)).move("6", 1900).move("0-6", 500));
            b.addTween((new Tween(g, Tween.ALPHA_FUNC, 0)).move(1, 214, Tween.JUMP).move(-1, 286, Tween.JUMP).move(1, 
            1400, Tween.JUMP).move(-1, 1E3, Tween.JUMP));
            b.addTween((new Tween(g, Tween.Y_FUNC, 31)).move(-172, 1900, Tween.JUMP));
            b.addAction(b.stop, 3200);
            break;
        default:
            throw Error("Thief.windUp: wrong thief.step: " + this.step);
    }
    a && b.addEventListenerOnce(GameEvent.COMPLETE, function ()
    {
        this._movie = null;
        a()
    }
    .bind(this));
    b.play()
};
Thief.prototype.arrest = function (a)
{
    this.hideAll();
    var b = game.main.arrest;
    b.visible = !0;
    b.x = [0, 247, 397, 582, 761, 943, 1153, 943, 761, 579, 397, 247, 397, 579, 761, 943][this.step];
    b.y = [0, 165, 170, 170, 170, 170, 329, 334, 334, 334, 334, 503, 508, 508, 508, 508][this.step];
    b.scale.x = [0, 1, 1, 1, 1, 1, - 1, 1, 1, 1, 1, 1, 1, 1, 1, 1][this.step];
    b.text.setId(0 <= [1, 11].indexOf(this.step) ? "SPINS_TO_RELEASE_LEFT_SIDE" : 6 == this.step ? "SPINS_TO_RELEASE_RIGHT_SIDE" : "SPINS_TO_RELEASE_FRONT");
    b.text.scale.x = b.scale.x;
    b.text.token("value", 3);
    b.val = 3;
    b.front.visible = b.side.visible = !1;
    var c = 0 <= [1, 6, 11].indexOf(this.step) ? b.side : b.front;
    c.visible = !0;
    var d = this._movie = new MovieClip;
    d.addTween((new SpriteTween(c)).move("0-29", 1E3));
    d.addTween((new Tween(b.text, Tween.ALPHA_FUNC, 0)).move(0, 800).move(1, 100));
    d.addAction(d.stop, 1E3);
    a && d.addEventListenerOnce(GameEvent.COMPLETE, function ()
    {
        this._movie = null;
        a()
    }
    .bind(this));
    userConfig.skip_animations ? (c.visible = !0, c.frame = 29, b.text.alpha = 1) : d.play();
};
Thief.prototype.restoreArrest = function ()
{
    this.hideAll();
    var a = game.main.arrest;
    a.val = serverData.thief_hold;
    0 < serverData.thief_hold ? (a.visible = !0, a.text.alpha = 0 < serverData.thief_hold ? 1 : 0, a.x = [0, 
    247, 397, 582, 761, 943, 1153, 943, 761, 579, 397, 247, 397, 579, 761, 943][this.step], a.y = [0, 
    165, 170, 170, 170, 170, 329, 334, 334, 334, 334, 503, 508, 508, 508, 508][this.step], a.scale.x = [0, 
    1, 1, 1, 1, 1, - 1, 1, 1, 1, 1, 1, 1, 1, 1, 1][this.step], a.text.setId(0 <= [1, 11].indexOf(this.step) ? "SPINS_TO_RELEASE_LEFT_SIDE" : 6 == this.step ? "SPINS_TO_RELEASE_RIGHT_SIDE" : "SPINS_TO_RELEASE_FRONT"), 
    a.text.scale.x = a.scale.x, a.text.token("value", serverData.thief_hold), a.front.visible = a.side.visible = !1, 
    a = 0 <= [1, 6, 11].indexOf(this.step) ? a.side : a.front, a.visible = !0, a.frame = 29) : a.visible = !1;
};
Thief.prototype.release = function (a)
{
    this.hideAll();
    var b = game.main.arrest;
    b.visible = !0;
    b.x = [0, 247, 397, 582, 761, 943, 1153, 943, 761, 579, 397, 247, 397, 579, 761, 943][this.step];
    b.y = [0, 165, 170, 170, 170, 170, 329, 334, 334, 334, 334, 503, 508, 508, 508, 508][this.step];
    b.scale.x = [0, 1, 1, 1, 1, 1, - 1, 1, 1, 1, 1, 1, 1, 1, 1, 1][this.step];
    b.text.scale.x = b.scale.x;
    b.front.visible = b.side.visible = !1;
    b = 0 <= [1, 6, 11].indexOf(this.step) ? b.side : b.front;
    b.visible = !0;
    var c = this._movie = new MovieClip;
    c.addTween((new SpriteTween(b)).move("29-37", 300));
    c.addAction(c.stop, 301);
    a && c.addEventListenerOnce(GameEvent.COMPLETE, function ()
    {
        this._movie = null;
        a()
    }
    .bind(this));
    userConfig.skip_animations ? (b.visible = !1, a()) : c.play()
};
Thief.prototype.hideAll = function ()
{
    this._movie && (this._movie.stop(), this._movie = null);
    this.animations.jump.visible = this.animations.hands.visible = this.animations.run.visible = this.animations.run_stairs.visible = this.animations.wind_up.visible = this.animations.wind_up_floor.visible = this.animations.wind_up_stairs_floor.visible = this.animations.wind_up_floor_stairs.visible = !1;
    game.main.arrest && (game.main.arrest.visible = !1);
    game.main.car && (game.main.car.visible = !1)
};
Thief.prototype.getPosition = function (a)
{
    void 0 === a && (a = this.step);
    var b = {};
    b.column = [0, 1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5][a];
    b.row = [0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3][a];
    return b;
};
clientData.addEventListener(GameEvent.UPDATE, function (a)
{
    if ("init" == a.diff.state || "giftspins.start" == a.diff.state || "giftspins.stop" == a.diff.state || "spin.giftspins.deleted" == a.diff.state || "giftspins.delete" == a.diff.state)
    {
        game.main.thief.step = serverData.thief_pos, game.main.thief.restoreArrest(), game.main.rays.applyRaysPosition(game.main.thief.step, 
        !1), "bet.idle" == clientData.state && 0 == serverData.thief_pos && game.main.thief.jump();
    }
    "init" == a.diff.state && game.main.thiefPath.movie.stop(5E3);
    "init" != a.diff.state || "bet.idle" != clientData.state || clientData.freespinsActive || game.main.thiefPath.movie.play(0);
    a.diff.state && "spin.start" == clientData.state && (sound.get("sfx").get("main.pathway").stop(), 
    game.main.thiefPath.movie.stop(5E3), game.main.reelsBlur.alpha = 1, 0 == game.main.thief.step && game.main.thief.climbUp());
    "spin.start" == a.diff.state && "spin.stop" == clientData.state && 0 < game.main.arrest.val && (game.main.arrest.val--, 
    game.main.arrest.text.token("value", game.main.arrest.val), game.main.arrest.text.alpha = 0 < game.main.arrest.val ? 1 : 0);
    a.diff.state && "spin.warning" == clientData.state && 0 == game.main.thief.step && game.main.thief.climbOut();
    "freespins.stop" == a.diff.state && (game.main.thief.step = 0, game.main.thief.jump());
});
function ThiefVideoPopup(a)
{
    PIXI.Container.call(this);
    this.content = new PIXI.Container;
    this.addChild(this.content);
    var b = systemLoader.gamePath("res/video/" + ResourceLoader.VIDEO_FORMAT + "/" + a.video.src + "." + ResourceLoader.VIDEO_FORMAT), 
    b = SystemLoader.isEdge || SystemLoader.isIE11 ? PIXI.Texture.fromVideoUrl(b) : PIXI.Texture.fromVideo(ResourceLoader.videos[b]), 
    c = new PIXI.Sprite(b);
    c.x = a.video.x;
    c.y = a.video.y;
    this.source = b.baseTexture.source;
    this.content.addChild(c);
    this.addChild(Sprite.fromFile(a.frame.src));
    this.addChild(new TextField(a.dontShowNextTime.text));
    this.checkbox = Sprite.fromFiles(["img/main/buttons/checkbox/off.png", "img/main/buttons/checkbox/on.png"]);
    this.checkbox.x = a.dontShowNextTime.x;
    this.checkbox.y = a.dontShowNextTime.y;
    this.checkbox.buttonMode = !0;
    this.checkbox.interactive = !0;
    this.checkbox.hitArea = new PIXI.Rectangle(-10, - 10, 320, 40);
    this.checkbox.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        userConfig[a.dontShowNextTime.property] = 1 == this.frame;
        sound.play("main.checkbox.click")
    };
    this.addChild(this.checkbox);
    this.controller = new ThiefVideoController(this, a);
    this.controller.activate()
}
ThiefVideoPopup.prototype = Object.create(PIXI.Container.prototype);
ThiefVideoPopup.prototype.constructor = ThiefVideoPopup;
function ThiefStartController()
{
    StateController.call(this, "thief.start")
}
ThiefStartController.prototype = Object.create(StateController.prototype);
ThiefStartController.prototype.constructor = ThiefStartController;
ThiefStartController.prototype.onStart = function ()
{
    if (0 < serverData.thief_pos || 1 < serverData.thief_action.length)
    {
        userConfig.skip_animations || game.main.clearReels(), game.main.thief.skipMove = !1, game.skipManager.set(function () 
        {
            game.main.thief.skipMove = !0 
        },
        KeyboardListener.SKIP_HOTKEY);
    }
    this.stop()
};
(new ThiefStartController).activate();
function ThiefStopController()
{
    StateController.call(this, "thief.stop")
}
ThiefStopController.prototype = Object.create(StateController.prototype);
ThiefStopController.prototype.constructor = ThiefStopController;
ThiefStopController.prototype.onStart = function ()
{
    if (0 < serverData.thief_pos || 1 < serverData.thief_action.length) {
        userConfig.skip_animations || game.main.blurReels(), game.skipManager.reset();
    }
    this.stop()
};
(new ThiefStopController).activate();
function ThiefMoveController()
{
    StateController.call(this, "thief.move");
    this._finalStep = this._steps =- 1
}
ThiefMoveController.prototype = Object.create(StateController.prototype);
ThiefMoveController.prototype.constructor = ThiefMoveController;
ThiefMoveController.prototype.onStart = function ()
{
    this._steps = 1 == serverData.thief_action[clientData.thief_action_number - 1] ? 1 : 7 == serverData.thief_action[clientData.thief_action_number - 1] ? 2 : 3;
    this._finalStep = Math.min(game.main.thief.step + this._steps, 16);
    if (0 == game.main.thief.step || game.main.thief.skipMove || userConfig.skip_animations) {
        this.stop();
    }
    else
    {
        var a = game.main.thief.getPosition();
        game.main.reels.each(function (b, c, d)
        {
            a.row == d && a.column == c ? (game.main.animationContainer[c].addChild(b), b.special()) : b.blackout()
        });
        game.main.messageBox.show("ACTION_MAIN_MOVE", 3E3);
        sound.get("sfx").play("main.symbols.13.long")
    }
};
ThiefMoveController.prototype.onEnterFrame = function ()
{
    game.main.thief.skipMove ? this.stop() : (this.hasElapsedTimeStamp(700) && game.main.rays.disable(), 
    this.hasElapsedTimeStamp(1834) && this._run())
};
ThiefMoveController.prototype._run = function ()
{
    game.main.thief.run(function ()
    {
        game.main.thief.skipMove || (game.main.thief.step++, game.main.thief.step < this._finalStep ? this._run() : this.stop())
    }
    .bind(this));
    sound.get("sfx").play(5 == game.main.thief.step || 10 == game.main.thief.step ? "main.thief.stairs" : 15 == game.main.thief.step ? "main.thief.exit" : "main.thief.run")
};
ThiefMoveController.prototype.onStop = function ()
{
    game.main.thief.hideAll();
    game.main.thief.step = this._finalStep;
    game.main.rays.applyRaysPosition();
    game.main.reels.each(function (a, b, c)
    {
        game.main.reels[b].container.addChild(a)
    });
    sound.get("sfx").get("main.thief.stairs").stop();
    sound.get("sfx").get("main.thief.run").stop();
    sound.get("sfx").get("main.thief.exit").stop()
};
(new ThiefMoveController).activate();
function ThiefVideoController(a, b)
{
    StateController.call(this, b.state);
    this.popup = a;
    this.config = b;
    this.movie = null
}
ThiefVideoController.prototype = Object.create(StateController.prototype);
ThiefVideoController.prototype.constructor = ThiefVideoController;
ThiefVideoController.prototype.onStart = function ()
{
    var a = game.main.thief.getPosition();
    userConfig.skip_animations || game.main.reels.each(function (b, c, d)
    {
        a.row == d && a.column == c ? b.special() : b.blackout()
    });
    this.movie = this.createMovie(a);
    this.movie.addAction(game.skipManager.reset.bind(game.skipManager), this.config.time.skip);
    userConfig.skip_animations && (this.movie.skip(), this.stop())
};
ThiefVideoController.prototype.onEnterFrame = function (a)
{
    this.hasElapsedTimeStamp(1) && (userConfig[this.config.dontShowNextTime.property] ? this.movie.play(this.config.time.afterPopup) : (this.popup.checkbox.frame = 0, 
    this.popup.source.start(this._onVideoStarted.bind(this), this._onVideoEnded.bind(this)), sound.get("sfx").play(this.config.sound.src), 
    sound.get("music").get("main").volume = .2));
};
ThiefVideoController.prototype._onVideoStarted = function ()
{
    game.skipManager.set(this._onVideoSkipped.bind(this), KeyboardListener.SKIP_HOTKEY);
    this.movie.play(0)
};
ThiefVideoController.prototype._onVideoSkipped = function ()
{
    this.popup.source.pause();
    sound.get("sfx").get(this.config.sound.src).stop();
    sound.get("music").get("main").volume = 1;
    this.movie.play(this.config.time.skip);
    game.skipManager.reset()
};
ThiefVideoController.prototype._onVideoEnded = function ()
{
    this.config.sound.autoStop && (sound.get("sfx").get(this.config.sound.src).stop(), sound.get("music").get("main").volume = 1);
    this.movie && this.movie.play(200)
};
function ThiefReleaseController()
{
    StateController.call(this, "thief.release")
}
ThiefReleaseController.prototype = Object.create(StateController.prototype);
ThiefReleaseController.prototype.constructor = ThiefReleaseController;
ThiefReleaseController.prototype.onStart = function ()
{
    game.main.arrest.visible ? (game.main.reels.each(function (a, b, c)
    {
        a.blackout()
    }), game.main.thief.release(function ()
    {
        this.stop()
    }
    .bind(this))) : this.stop()
};
(new ThiefReleaseController).activate();
function Interior(a)
{
    PIXI.Container.call(this);
    this.room = a;
    void 0 !== a.type && this.fill()
}
Interior.prototype = Object.create(PIXI.Container.prototype);
Interior.prototype.constructor = Interior;
Interior.prototype.fill = function ()
{
    0 == this.room.type ? (this.wallpaper = Sprite.fromFile("img/bonus/wallpapers/start.png"), this.addChild(this.wallpaper), 
    this.addDoors(2), this.addThief(2), this.front = Sprite.fromFile("img/bonus/wallpapers/start_front.png"), 
    this.front.y = 224, this.addChild(this.front), this.room.bonus.superprizeRoom.x = this.room.x, this.room.bonus.superprizeRoom.y = this.room.y + 127, 
    this.room.bonus.superprizeRoom.visible = !0, this.room.bonus.visible = !0) : (this.addWallpapers(this.room.size), 
    this.addBackObjects(this.room.size, this.room.type), this.addDoors(this.room.size), this.addThief(this.room.size), 
    this.addFrontObjects(this.room.size, this.room.type), this.addIcons(this.room.size));
};
Interior.prototype.addWallpapers = function (a)
{
    this.wallpaperNumber = this.room.random % 4;
    this.wallpaper = 1 == a ? Sprite.fromFile("img/bonus/wallpapers/" + this.wallpaperNumber + "_small.png") : Sprite.fromFile("img/bonus/wallpapers/" + this.wallpaperNumber + "_big.png");
    this.addChild(this.wallpaper)
};
Interior.prototype.addDoors = function (a)
{
    var b = this.doors = new PIXI.Container;
    this.addChild(b);
    1 == a ? (b.leftDoor = Sprite.fromFile("img/bonus/doors/door_side/00.png"), b.leftDoor.x = 136, b.leftDoor.y = 43, 
    b.leftDoor.scale.x =- 1, b.addChild(b.leftDoor), b.rightDoor = Sprite.fromFile("img/bonus/doors/door_side/00.png"), 
    b.rightDoor.x = 255) : (b.leftDoor = Sprite.fromFile("img/bonus/doors/door_side/00.png"), b.leftDoor.x = 136, 
    b.leftDoor.y = 43, b.leftDoor.scale.x =- 1, b.addChild(b.leftDoor), b.leftMiddleDoor = Sprite.fromFile("img/bonus/doors/door_front/00.png"), 
    b.leftMiddleDoor.x = 139, b.leftMiddleDoor.y = 51, b.addChild(b.leftMiddleDoor), b.rightMiddleDoor = Sprite.fromFile("img/bonus/doors/door_front/00.png"), 
    b.rightMiddleDoor.x = 661, b.rightMiddleDoor.y = 51, b.rightMiddleDoor.scale.x =- 1, b.addChild(b.rightMiddleDoor), 
    b.rightDoor = Sprite.fromFile("img/bonus/doors/door_side/00.png"), b.rightDoor.x = 659);
    b.rightDoor.y = 43;
    b.addChild(b.rightDoor)
};
Interior.prototype.addThief = function (a)
{
    var b = this.thief = new PIXI.Container;
    this.addChild(b);
    b.thiefGo = Sprite.fromFolder("img/bonus/robber/robber_go", 12);
    b.thiefGo.x = 1 == a ? 138 : 343;
    b.thiefGo.y = 68;
    b.thiefGo.visible = !1;
    b.addChild(b.thiefGo);
    b.thiefLoose = Sprite.fromFolder("img/bonus/robber/robber_loose", 61);
    b.thiefLoose.x = 1 == a ? 135 : 325;
    b.thiefLoose.y = 99;
    b.thiefLoose.visible = !1;
    b.addChild(b.thiefLoose);
    b.thiefSteals = Sprite.fromFolder("img/bonus/robber/robber_steals", 45);
    b.thiefSteals.x = 1 == a ? 37 : 243;
    b.thiefSteals.y = 86;
    b.thiefSteals.visible = !1;
    b.addChild(b.thiefSteals)
};
Interior.prototype.addIcons = function (a)
{
    var b = this.icons = new PIXI.Container;
    this.addChild(b);
    b.iconDecreaseKey = Sprite.fromFile("img/bonus/interface/icons/key_minus.png");
    b.iconDecreaseKey.visible = !1;
    b.iconDecreaseKey.x = 1 == a ? 195 : 400;
    b.iconDecreaseKey.y = 80;
    b.iconDecreaseKey.pivot.x = b.iconDecreaseKey.width / 2;
    b.iconDecreaseKey.pivot.y = b.iconDecreaseKey.height / 2;
    b.addChild(b.iconDecreaseKey);
    b.iconIncreaseKey = Sprite.fromFile("img/bonus/interface/icons/key_plus.png");
    b.iconIncreaseKey.visible = !1;
    b.iconIncreaseKey.x = 1 == a ? 195 : 400;
    b.iconIncreaseKey.y = 80;
    b.iconIncreaseKey.pivot.x = b.iconIncreaseKey.width / 2;
    b.iconIncreaseKey.pivot.y = b.iconIncreaseKey.height / 2;
    b.addChild(b.iconIncreaseKey);
    b.winContainer = new PIXI.Container;
    b.winContainer.visible = !1;
    b.winContainer.x = 1 == a ? 195 : 400;
    b.winContainer.y = 60;
    b.iconWin = Sprite.fromFile("img/bonus/interface/icons/coin_little.png");
    b.winContainer.addChild(b.iconWin);
    b.valueWin = new TextField("BONUS_ROOM_ICON_WIN");
    b.valueWin.y = 20;
    b.winContainer.addChild(b.valueWin);
    b.addChild(b.winContainer)
};
Interior.prototype.addBackObjects = function (a, b)
{
    var c = this.backObjects = new PIXI.Container;
    this.addChild(c);
    if (3 == b || 4 == b)
    {
        1 == a ? (this.pictureNumber = (this.room.random - this.wallpaperNumber) / 4 % 8, c.picture = Sprite.fromFile("img/bonus/pictures/" + this.pictureNumber + ".png"), 
        c.picture.x = 116, c.picture.y = 100 - c.picture.height / 2, c.addChild(c.picture)) : (this.pictureNumber = (this.room.random - this.wallpaperNumber) / 4 % 56, 
        this.picture1Number = this.pictureNumber % 7, this.picture2Number = (this.pictureNumber - this.picture1Number) / 7, 
        this.picture1Number >= this.picture2Number && this.picture1Number++, c.picture1 = Sprite.fromFile("img/bonus/pictures/" + this.picture1Number + ".png"), 
        c.picture1.x = 280, c.picture1.y = 100 - c.picture1.height / 2, c.addChild(c.picture1), c.picture2 = Sprite.fromFile("img/bonus/pictures/" + this.picture2Number + ".png"), 
        c.picture2.x = 441, c.picture2.y = 110 - c.picture2.height / 2, c.addChild(c.picture2));
        var d = Sprite.fromFile("img/bonus/objects/Box.png");
        d.x = 1 == a ? 164 : 368;
        d.y = 145;
        var e = Sprite.fromFile("img/bonus/objects/Korona.png");
        e.x = 1 == a ? 166 : 371;
        e.y = 140;
        var f = Sprite.fromFile("img/bonus/objects/Shlem.png");
        f.x = 1 == a ? 167 : 371;
        f.y = 124;
        var g = Sprite.fromFile("img/bonus/objects/Vase.png");
        g.x = 1 == a ? 170 : 375;
        g.y = 132;
        c.exhibits = [d, e, f, g];
        c.plinth = Sprite.fromFile("img/bonus/objects/Plinth.png");
        c.plinth.x = 1 == a ? 163 : 368;
        c.plinth.y = 193;
        c.addChild(c.plinth);
        c.randomExhibit = c.exhibits[1 == a ? ((this.room.random - this.wallpaperNumber) / 4 - this.pictureNumber) / 8 % 4 : ((this.room.random - this.wallpaperNumber) / 4 - this.pictureNumber) / 56 % 4];
        c.addChild(c.randomExhibit);
        c.randomExhibit.alpha = 0
    }
    if (2 == b)
    {
        d = new PIXI.Container;
        e = Sprite.fromFile("img/bonus/objects/back/chair.png");
        e.x = 85;
        e.scale.x =- 1;
        d.addChild(e);
        e = new PIXI.Container;
        f = Sprite.fromFile("img/bonus/objects/back/box_1.png");
        f.x =- 10;
        f.y = 5;
        e.addChild(f);
        f = new PIXI.Container;
        g = Sprite.fromFile("img/bonus/objects/back/box_2.png");
        g.y = 10;
        f.addChild(g);
        var g = new PIXI.Container, h = Sprite.fromFile("img/bonus/objects/back/box_3.png");
        h.scale.x =- 1;
        h.x = 90;
        h.y =- 10;
        g.addChild(h);
        var h = new PIXI.Container, l = Sprite.fromFile("img/bonus/objects/back/box_4.png");
        l.y = 10;
        h.addChild(l);
        var l = new PIXI.Container, k = Sprite.fromFile("img/bonus/objects/back/metla.png");
        k.y =- 67;
        k.x =- 5;
        var m = Sprite.fromFile("img/bonus/objects/back/vedro.png");
        m.x = 33;
        m.y = 46;
        l.addChild(k);
        l.addChild(m);
        k = new PIXI.Container;
        m = Sprite.fromFile("img/bonus/objects/back/metla.png");
        m.x = 10;
        m.y =- 67;
        k.addChild(m);
        var m = new PIXI.Container, q = Sprite.fromFile("img/bonus/objects/back/b_g.png");
        q.x = 5;
        q.y = 53;
        var p = Sprite.fromFile("img/bonus/objects/back/b_r.png");
        p.x = 28;
        p.y = 52;
        m.addChild(p);
        m.addChild(q);
        q = new PIXI.Container;
        p = Sprite.fromFile("img/bonus/objects/back/b_g.png");
        p.x = 5;
        p.y = 53;
        var n = Sprite.fromFile("img/bonus/objects/back/b_y.png");
        n.x = 28;
        n.y = 57;
        q.addChild(n);
        q.addChild(p);
        p = new PIXI.Container;
        n = Sprite.fromFile("img/bonus/objects/back/b_r.png");
        n.x = 5;
        n.y = 53;
        var t = Sprite.fromFile("img/bonus/objects/back/b_y.png");
        t.x = 31;
        t.y = 57;
        p.addChild(t);
        p.addChild(n);
        n = new PIXI.Container;
        t = Sprite.fromFile("img/bonus/objects/back/b_g.png");
        t.x = 30;
        t.y = 51;
        var v = Sprite.fromFile("img/bonus/objects/back/b_r.png");
        v.x = 5;
        v.y = 53;
        var w = Sprite.fromFile("img/bonus/objects/back/b_y.png");
        w.x = 30;
        w.y = 62;
        n.addChild(t);
        n.addChild(v);
        n.addChild(w);
        t = new PIXI.Container;
        c.randomObjects = [d, e, f, g, h, l, k, m, q, p, n, t];
        c.vordrobe = 1 == a ? Sprite.fromFile("img/bonus/objects/Vordrobes_1.png") : Sprite.fromFile("img/bonus/objects/Vordrobes_2.png");
        c.addChild(c.vordrobe);
        if (1 == a)
        {
            this.objectsNumber = (this.room.random - this.wallpaperNumber)  / 4 % 11, this.seqDoorNumber = ((this.room.random - this.wallpaperNumber)  / 4 - this.objectsNumber)  / 11 % 2, 
            c.randomObject = c.randomObjects[this.objectsNumber], c.addChild(c.randomObject), 0 == this.seqDoorNumber ? (c.randomObject.x = 230, 
            c.randomObject.y = 175, c.vordrobe.x = 60, c.vordrobe.y = 28) : (c.randomObject.x = 161, c.randomObject.y = 175, 
            c.randomObject.scale.x =- 1, c.vordrobe.x = 331, c.vordrobe.y = 28, c.vordrobe.scale.x =- 1);
        }
        else
        {
            this.objectsNumber = (this.room.random - this.wallpaperNumber) / 4 % 132;
            this.objectsNumber1 = this.objectsNumber % 11;
            this.objectsNumber2 = (this.objectsNumber - this.objectsNumber1) / 11;
            this.objectsNumber1 == this.objectsNumber2 && this.objectsNumber2++;
            7 <= this.objectsNumber1 && 7 <= this.objectsNumber2 && 11 != this.objectsNumber2 && (this.objectsNumber1 = 0);
            1 == this.objectsNumber2 && (this.objectsNumber2 = 4 == this.objectsNumber1 ? 3 : 4);
            c.randomObject1 = c.randomObjects[this.objectsNumber1];
            c.addChild(c.randomObject1);
            c.randomObject2 = c.randomObjects[this.objectsNumber2];
            c.addChild(c.randomObject2);
            this.seqDoorNumber = ((this.room.random - this.wallpaperNumber) / 4 - this.objectsNumber) / 132 % 4 + 2;
            if (2 == this.seqDoorNumber || 3 == this.seqDoorNumber)
            {
                c.randomObject1.x = 450, c.randomObject1.y = 175, c.randomObject2.x = 640, c.randomObject2.y = 175, 
                c.vordrobe.x = 240, c.vordrobe.y = 30;
            }
            if (4 == this.seqDoorNumber || 5 == this.seqDoorNumber)
            {
                c.randomObject1.x = 350, c.randomObject1.y = 175, c.randomObject1.scale.x =- 1, c.randomObject2.x = 160, 
                c.randomObject2.y = 175, c.randomObject2.scale.x =- 1, c.vordrobe.x = 560, c.vordrobe.y = 30, 
                c.vordrobe.scale.x =- 1;
            }
        }
    }
    1 == b && (c.console = Sprite.fromFile("img/bonus/objects/console.png"), c.console.x = 1 == a ?- 205 : 0, 
    c.addChild(c.console));
};
Interior.prototype.addFrontObjects = function (a, b)
{
    var c = this.front = new PIXI.Container;
    this.addChild(c);
    var d = Sprite.fromFile("img/bonus/objects/front/boxes_front_1.png");
    d.scale.x =- 1;
    d.x = d.width;
    d.y = this.wallpaper.height - d.height;
    var e = Sprite.fromFile("img/bonus/objects/front/boxes_front_2.png");
    e.y = this.wallpaper.height - e.height;
    var f = Sprite.fromFile("img/bonus/objects/front/ni_left.png");
    f.y = this.wallpaper.height - f.height;
    var g = Sprite.fromFile("img/bonus/objects/front/ni_right.png");
    g.scale.x =- 1;
    g.x = g.width;
    g.y = this.wallpaper.height - g.height;
    var h = Sprite.fromFile("img/bonus/objects/front/Pipes.png");
    h.y = this.wallpaper.height - h.height;
    var l = Sprite.fromFile("img/bonus/objects/front/vedro_front.png");
    l.y = this.wallpaper.height - l.height;
    c.randomObjects = [d, e, f, g, h, l];
    2 == b && (1 == a ? (d = (this.room.random - this.wallpaperNumber) / 4 % 6, c.addChild(c.randomObjects[d]), 
    4 > d ? e = ((this.room.random - this.wallpaperNumber) / 4 - d) / 6 % 2 + 4 : (e = ((this.room.random - this.wallpaperNumber) / 4 - d) / 6 % 6, 
    e == d && (e = 0 == e ? e + 1 : e - 1))) : (d = (this.room.random - this.wallpaperNumber) / 4 % 6, 
    c.addChild(c.randomObjects[d]), e = ((this.room.random - this.wallpaperNumber) / 4 - d) / 6 % 6, e == d && (e = 0 == e ? e + 1 : e - 1)), 
    c.addChild(c.randomObjects[e]), 0 == e || 3 == e ? (c.randomObjects[e].x = this.wallpaper.width - c.randomObjects[e].width, 
    c.randomObjects[e].scale.x = 1) : (c.randomObjects[e].x = this.wallpaper.width, c.randomObjects[e].scale.x =- 1));
};
function Room(a, b)
{
    Button.call(this);
    this.id = a;
    this.bonus = b;
    this.clickSound = "main.bonus.click";
    this.overSound = "main.bonus.over";
    this.onClientUpdate(this.performOnClientUpdate)
}
Room.prototype = Object.create(Button.prototype);
Room.prototype.constructor = Room;
Room.prototype.init = function ()
{
    this.serverId = serverData.bonusRooms[this.id].id;
    this.size = serverData.bonusRooms[this.id].width;
    this.random = serverData.bonusRooms[this.id].random;
    this.type = serverData.bonusRooms[this.id].type;
    this.column = serverData.bonusRooms[this.id].column;
    this.row = serverData.bonusRooms[this.id].row;
    this.win = serverData.bonusRooms[this.id].win;
    this.status = serverData.bonusRooms[this.id].status;
    this.x = 1 == this.size && 1 == this.column % 2 ? 236 + 156 * this.column - 1 : 236 + 156 * this.column;
    this.y = 31 + 128 * this.row;
    this.interior = new Interior(this);
    this.interior.scale.x = this.interior.scale.y = .38;
    this.addChild(this.interior);
    1 == this.size ? (this.frame = Sprite.fromFile("img/bonus/interface/small_on.png"), this.frameAnim = Sprite.fromFile("img/bonus/interface/small_on.png"), 
    this.closed = Sprite.fromFile("img/bonus/interface/small_off.png")) : (this.frame = Sprite.fromFile("img/bonus/interface/big_on.png"), 
    this.frameAnim = Sprite.fromFile("img/bonus/interface/big_on.png"), this.closed = Sprite.fromFile("img/bonus/interface/big_off.png"));
    this.closed.x = 1 == this.size ?- 1 :- 2;
    this.closed.y = 1 == this.size ?- 3 :- 2;
    this.frame.x =- 6;
    this.frame.y = 1 == this.size ?- 6 :- 5;
    this.frameAnim.x =- 6;
    this.frameAnim.y = 1 == this.size ?- 6 :- 5;
    this.addChild(this.closed);
    this.addChild(this.frame);
    this.addChild(this.frameAnim);
    var a = this.idleMovie = new MovieClip;
    a.addTween((new Tween(this.frameAnim, Tween.ALPHA_FUNC, .5)).move(-.5, 300).move(.5, 900));
    a.addAction(a.play, 1200, 0);
    this.pickButton = new PIXI.Container;
    this.pickButton.x = this.closed.x;
    this.pickButton.y = this.closed.y;
    this.addChild(this.pickButton);
    this.pickButton.arrowStatic = Sprite.fromFile("img/bonus/interface/arrow/static.png");
    this.pickButton.arrowStatic.x = (this.closed.width - this.pickButton.arrowStatic.width) / 2;
    this.pickButton.arrowStatic.y = (this.closed.height - this.pickButton.arrowStatic.height) / 2;
    this.pickButton.addChild(this.pickButton.arrowStatic);
    this.pickButton.arrowHit = Sprite.fromFile("img/bonus/interface/arrow/hit.png");
    this.pickButton.arrowHit.visible = !1;
    this.pickButton.arrowHit.x = (this.closed.width - this.pickButton.arrowHit.width) / 2;
    this.pickButton.arrowHit.y = (this.closed.height - this.pickButton.arrowHit.height) / 2;
    this.pickButton.addChild(this.pickButton.arrowHit);
    this.pickButton.arrowAnimate = Sprite.fromFolder("img/bonus/interface/arrow/animate", 9);
    this.pickButton.arrowAnimate.visible = !1;
    this.pickButton.arrowAnimate.x = (this.closed.width - this.pickButton.arrowAnimate.width) / 2;
    this.pickButton.arrowAnimate.y = (this.closed.height - this.pickButton.arrowAnimate.height) / 2;
    this.pickButton.addChild(this.pickButton.arrowAnimate);
    a = this.pickButton.animateMovie = new MovieClip;
    a.addTween((new SpriteTween(this.pickButton.arrowAnimate)).move("0-8", 600));
    a.addAction(a.play, 600, 0);
    this.iconDecreaseKey = Sprite.fromFile("img/bonus/interface/icons/key_minus.png");
    this.iconDecreaseKey.visible = !1;
    this.iconDecreaseKey.x = this.closed.x + this.closed.width / 2;
    this.iconDecreaseKey.y = this.closed.y + this.closed.height / 2;
    this.iconDecreaseKey.pivot.x = this.iconDecreaseKey.width / 2;
    this.iconDecreaseKey.pivot.y = this.iconDecreaseKey.height / 2;
    this.addChild(this.iconDecreaseKey);
    this.iconKey = Sprite.fromFile("img/bonus/interface/icons/key_little.png");
    this.iconKey.visible = !1;
    this.iconKey.x = this.closed.x + (this.closed.width - this.iconKey.width) / 2;
    this.iconKey.y = this.closed.y + (this.closed.height - this.iconKey.height) / 2;
    this.addChild(this.iconKey);
    this.iconHands = Sprite.fromFile("img/bonus/interface/icons/hands_little.png");
    this.iconHands.visible = !1;
    this.iconHands.x = this.closed.x + (this.closed.width - this.iconHands.width) / 2;
    this.iconHands.y = this.closed.y + (this.closed.height - this.iconHands.height) / 2;
    this.addChild(this.iconHands);
    this.iconWin = Sprite.fromFile("img/bonus/interface/icons/coin_little.png");
    this.iconWin.visible = !1;
    this.iconWin.x = this.closed.x + (this.closed.width - this.iconWin.width) / 2;
    this.iconWin.y = this.closed.y + (this.closed.height - this.iconWin.height) / 2 - 10;
    this.addChild(this.iconWin);
    this.valueWin = new TextField("BONUS_ICON_WIN");
    this.valueWin.visible = !1;
    this.valueWin.x = this.closed.x + this.closed.width / 2;
    this.valueWin.y = this.iconWin.y + 20;
    this.addChild(this.valueWin);
    this.hitArea = new PIXI.Rectangle(this.closed.x, this.closed.y, this.closed.width, this.closed.height);
    this.updateStatus()
};
Room.prototype.updateStatus = function ()
{
    this.status = serverData.bonusRooms[this.id].status;
    this.closed.visible = this.frame.visible = this.frameAnim.visible = this.interior.visible = this.pickButton.visible = !1;
    switch (this.status)
    {
        case 0:
            this.closed.visible = !0;
            this.enabled = !1;
            break;
        case 1:
            this.closed.visible = !0;
            this.pickButton.visible = "bonus.pick" == clientData.state;
            this.enabled = "bonus.pick" == clientData.state;
            break;
        case 2:
            this.frame.visible = !0;
            this.interior.visible = !0;
            this.type = serverData.bonusRooms[this.id].type;
            switch (this.type)
            {
                case 2:
                    this.interior.icons.iconDecreaseKey.visible = !0;
                    break;
                case 3:
                    this.interior.icons.iconIncreaseKey.visible = !0;
                    break;
                case 4:
                    this.win = serverData.bonusRooms[this.id].win, this.interior.icons.valueWin.token("value", 
                    currencyFormatter.format(this.win)), this.interior.icons.iconWin.pivot.x = this.interior.icons.iconWin.width / 2, 
                    this.interior.icons.winContainer.pivot.y = (this.interior.icons.valueWin.height + this.interior.icons.iconWin.height) / 2, 
                    this.interior.icons.winContainer.visible = !0, this.interior.icons.winContainer.scale.x = 1.5, 
                    this.interior.icons.winContainer.scale.y = 1.5
            }
            this.enabled = !1;
            break;
        case 3:
            this.frame.visible = !0, this.frame.filters = [this.bonus.filter], this.interior.visible = !0, 
            this.interior.filters = [this.bonus.filter], this.showIcon(), this.enabled = !1;
    }
};
Room.prototype.showIcon = function ()
{
    switch (this.type)
    {
        case 2:
            this.iconHands.visible = !0;
            break;
        case 3:
            this.iconKey.visible = !0;
            break;
        case 4:
            this.iconWin.visible = !0, this.valueWin.visible = !0, void 0 !== this.win && this.valueWin.token("value", 
            currencyFormatter.format(this.win))
    }
};
Room.prototype.mouseover = function (a)
{
    Button.prototype.mouseover.call(this, a);
    1 == this.status && "bonus.pick" == clientData.state && (this.frame.visible = !0, this.pickButton.arrowStatic.visible = !1, 
    this.pickButton.arrowAnimate.visible = !0, this.pickButton.animateMovie.play(0), this.frameAnim.visible = !1)
};
Room.prototype.mouseout = function (a)
{
    Button.prototype.mouseout.call(this, a);
    1 == this.status && "bonus.pick" == clientData.state && (this.frame.visible = !1, this.pickButton.animateMovie.stop(0), 
    this.pickButton.arrowAnimate.visible = !1, this.pickButton.arrowStatic.visible = !0, this.frameAnim.visible = !0)
};
Room.prototype.click = function (a)
{
    1 == this.status && "bonus.pick" == clientData.state && (this.bonus.pick(this.serverId), this.frame.visible = !0, 
    this.pickButton.arrowStatic.visible = !1, this.pickButton.arrowHit.visible = !0)
};
Room.prototype.performOnClientUpdate = function (a)
{
    "bonus.start" == a.diff.state && this.init();
    if (a.diff.state)
    {
        switch (clientData.state) 
        {
            case "bonus.pick":
                "init" == a.diff.state && this.init();
                this.updateStatus();
                1 == this.status ? (this.frameAnim.visible = !0, this.idleMovie.play(0)) : 2 == this.status && (this.interior.thief.visible = !0, 
                this.interior.thief.thiefGo.visible = !0);
                break;
            case "bonus.wait":
                this.updateStatus();
                this.idleMovie.stop(500);
                this.enabled = !1;
                break;
            case "bonus.result":
                "init" == a.diff.state && this.init(), this.updateStatus(), this.enabled = !1 
        }
    }
};
function BonusStartController()
{
    StateController.call(this, "bonus.start");
    this.movie = null
}
BonusStartController.prototype = Object.create(StateController.prototype);
BonusStartController.prototype.constructor = BonusStartController;
BonusStartController.prototype.onStart = function ()
{
    systemLoader.postloader.check("bonus", function ()
    {
        game.bonus.initialized || game.bonus.init();
        var a = this, b = new PIXI.filters.ColorMatrixFilter;
        game.filters = [b];
        var c = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
        b.matrix = c;
        var d = new MovieClip;
        d.addTween((new Tween(game, function (a, b)
        {
            c[0] = b;
            c[6] = b;
            c[12] = b;
        }, 1)).move(-1, 300).move(0, 200));
        d.addAction(function ()
        {
            sound.get("music").get("main").loop("main.bonus.background");
            sound.get("music").get("main").get("main.background").stop()
        }, 300);
        d.addAction(function ()
        {
            d.stop();
            a.stop()
        }, 500);
        d.play(0)
    }
    .bind(this))
};
(new BonusStartController).activate();
function BonusPickController()
{
    StateController.call(this, "bonus.wait")
}
BonusPickController.prototype = Object.create(StateController.prototype);
BonusPickController.prototype.constructor = BonusPickController;
BonusPickController.prototype.onStart = function ()
{
    for (var a = 0; a < game.bonus.roomsCount; a++)
    {
        if (2 == game.bonus.rooms[a].status) {
            var b = this.currentRoom = game.bonus.rooms[a];
        }
        if (game.bonus.rooms[a].serverId == clientData.bonusPick) {
            var c = this.futureRoom = game.bonus.rooms[a];
        }
    }
    var d = 0, d = 1 == b.size ? b.column < c.column ? 2 : 1 : b.row == c.row ? b.column < c.column ? 6 : 3 : b.column < c.column ? 5 : 4, 
    e = a = 0, f = this.movie = new MovieClip;
    b.interior && b.interior.icons && (b.interior.icons.visible = !1);
    switch (d)
    {
        case 1:
            b.interior.thief.thiefGo.scale.x = - 1;
            b.interior.thief.thiefGo.x += 114;
            a =- 80;
            f.addTween((new Tween(b.interior.doors.leftDoor, Tween.ALPHA_FUNC, 0)).move(1, 800, Tween.JUMP));
            d = Sprite.fromFolder("img/bonus/doors/door_side", 10);
            d.x = 136;
            d.y = 43;
            d.scale.x =- 1;
            b.interior.addChild(d);
            b.interior.swapChildren(b.interior.front, d);
            break;
        case 2:
            a = 80;
            f.addTween((new Tween(b.interior.doors.rightDoor, Tween.ALPHA_FUNC, 0)).move(1, 800, Tween.JUMP));
            d = Sprite.fromFolder("img/bonus/doors/door_side", 10);
            d.x = 255;
            d.y = 43;
            b.interior.addChild(d);
            b.interior.swapChildren(b.interior.front, d);
            break;
        case 3:
            b.interior.thief.thiefGo.scale.x =- 1;
            b.interior.thief.thiefGo.x += 114;
            a =- 250;
            f.addTween((new Tween(b.interior.doors.leftDoor, Tween.ALPHA_FUNC, 0)).move(1, 800, Tween.JUMP));
            d = Sprite.fromFolder("img/bonus/doors/door_side", 10);
            d.x = 136;
            d.y = 43;
            d.scale.x =- 1;
            b.interior.addChild(d);
            b.interior.swapChildren(b.interior.front, d);
            break;
        case 4:
            b.interior.thief.thiefGo.scale.x =- 1;
            b.interior.thief.thiefGo.x += 114;
            a =- 150;
            e =- 10;
            f.addTween((new Tween(b.interior.doors.leftMiddleDoor, Tween.ALPHA_FUNC, 0)).move(1, 800, Tween.JUMP));
            d = Sprite.fromFolder("img/bonus/doors/door_front", 10);
            d.x = 139;
            d.y = 51;
            b.interior.addChild(d);
            b.interior.swapChildren(b.interior.front, d);
            b.interior.swapChildren(b.interior.thief, d);
            break;
        case 5:
            a = 150;
            e =- 10;
            f.addTween((new Tween(b.interior.doors.rightMiddleDoor, Tween.ALPHA_FUNC, 0)).move(1, 800, Tween.JUMP));
            d = Sprite.fromFolder("img/bonus/doors/door_front", 10);
            d.x = 661;
            d.y = 51;
            d.scale.x =- 1;
            b.interior.addChild(d);
            b.interior.swapChildren(b.interior.front, d);
            b.interior.swapChildren(b.interior.thief, d);
            break;
        case 6:
            a = 250;
            f.addTween((new Tween(b.interior.doors.rightDoor, Tween.ALPHA_FUNC, 0)).move(1, 800, Tween.JUMP));
            d = Sprite.fromFolder("img/bonus/doors/door_side", 10);
            d.x = 659;
            d.y = 43;
            b.interior.addChild(d);
            b.interior.swapChildren(b.interior.front, d);
            break;
        default:
            throw Error("BonusPickController.onStart: wrong door number.");
    }
    c.pickButton.visible = !1;
    c.iconDecreaseKey.visible = !0;
    f.addTween((new Tween(c.iconDecreaseKey, Tween.ALPHA_FUNC, 1)).move(-1, 1E3));
    f.addTween((new Tween(c.iconDecreaseKey, Tween.SCALE_FUNC, .5)).move(.5, 1E3));
    f.addTween((new Tween(b.interior.thief.thiefGo, Tween.X_FUNC, b.interior.thief.thiefGo.x)).move(0, 
    600).move(a, 100));
    f.addTween((new Tween(b.interior.thief.thiefGo, Tween.Y_FUNC, b.interior.thief.thiefGo.y)).move(0, 
    600).move(e, 100));
    f.addTween((new SpriteTween(b.interior.thief.thiefGo)).move("0-8", 600).move("9-11", 100));
    f.addTween((new Tween(b.interior.thief.thiefGo, Tween.ALPHA_FUNC, 1)).move(-1, 700, Tween.JUMP));
    f.addTween((new SpriteTween(d)).move("0-9", 667));
    f.addTween((new Tween(d, Tween.ALPHA_FUNC, 1)).move(-1, 800, Tween.JUMP));
    game.bonus.panel.decreaseKey.visible = !0;
    f.addTween((new Tween(game.bonus.panel.decreaseKey, Tween.Y_FUNC, game.bonus.panel.decreaseKey.y)).move(-30, 
    1E3).move(30, 100, Tween.JUMP));
    f.addTween((new Tween(game.bonus.panel.decreaseKey, Tween.ALPHA_FUNC, 1)).move(-1, 1E3));
    game.bonus.panel.keysAnim.visible = !0;
    f.addTween((new Tween(game.bonus.panel.keys, Tween.ALPHA_FUNC, 0)).move(1, 600, Tween.JUMP));
    f.addTween((new Tween(game.bonus.panel.keysAnim, Tween.ALPHA_FUNC, 1)).move(-1, 600, Tween.JUMP));
    f.addTween((new SpriteTween(game.bonus.panel.keysAnim)).move("0-8", 600));
    f.addAction(f.stop, 1200);
    f.addAction(function ()
    {
        f.stop();
        this.stop()
    }
    .bind(this), 1301);
    userConfig.skip_animations ? f.play(1300) : (f.play(0), sound.get("sfx").play("main.bonus.move"), 
    sound.get("sfx").play("main.bonus.key.lose"))
};
BonusPickController.prototype.onEnterFrame = function (a)
{
    this.hasElapsedTimeStamp(1200) && this.stop()
};
BonusPickController.prototype.onStop = function ()
{
    game.bonus.panel.decreaseKey.visible = !1;
    game.bonus.panel.keysAnim.visible = !1;
    this.futureRoom.iconDecreaseKey.visible = !1;
    4 == this.currentRoom.type && this.currentRoom.valueWin.token("value", currencyFormatter.format(this.currentRoom.win))
};
(new BonusPickController).activate();
function BonusResultController()
{
    StateController.call(this, "bonus.result")
}
BonusResultController.prototype = Object.create(StateController.prototype);
BonusResultController.prototype.constructor = BonusResultController;
BonusResultController.prototype.onStart = function ()
{
    for (var a = 0; a < game.bonus.roomsCount; a++)
    {
        if (2 == game.bonus.rooms[a].status) {
            var b = this.currentRoom = game.bonus.rooms[a];
        }
        var c = new PIXI.filters.ColorMatrixFilter;
        b.interior.filters = [c];
        b.interior.fill();
        switch (b.type) 
        {
            case 1:
                var d = this.thiefAnim = b.interior.thief.thiefGo;
                this.skipTime = this.duration = 500;
                break;
            case 2:
                d = this.thiefAnim = b.interior.thief.thiefLoose;
                this.duration = 5100;
                this.skipTime = 4300;
                break;
            case 3:
                d = this.thiefAnim = b.interior.thief.thiefSteals;
                this.duration = 4100;
                this.skipTime = 3300;
                break;
            case 4:
                d = this.thiefAnim = b.interior.thief.thiefSteals, this.duration = 4100, this.skipTime = 3300 
        }
        d.visible = !0;
        b.interior.thief.thiefGo.visible = !0;
        a = 1 == b.size ? 504 : 312;
        game.bonus.setChildIndex(b, game.bonus.children.length - 1);
        var e = this.movie = new MovieClip;
        4 == b.type && (e.addTween((new SpriteTween(d)).move("0", 300).move("0-44", 3E3).move("44", 500)), 
        e.addTween((new Tween(d, Tween.ALPHA_FUNC, 1)).move(0, 3800).move(-1, 150)), e.addTween((new Tween(b.interior.thief.thiefGo, 
        Tween.ALPHA_FUNC, 0)).move(0, 3950).move(1, 150)), e.addTween((new Tween(b.interior.backObjects.randomExhibit, 
        Tween.ALPHA_FUNC, 1)).move(0, 1300).move(-1, 500)), b.interior.icons.winContainer.visible = !0, 
        b.interior.icons.valueWin.token("value", currencyFormatter.format(b.win)), b.interior.icons.iconWin.pivot.x = b.interior.icons.iconWin.width  / 2, 
        b.interior.icons.winContainer.pivot.y = (b.interior.icons.valueWin.height + b.interior.icons.iconWin.height)  / 2, 
        e.addTween((new Tween(b.interior.icons.winContainer, Tween.ALPHA_FUNC, 0)).move(1, 1800, Tween.JUMP)), 
        e.addTween((new Tween(b.interior.icons.winContainer, Tween.SCALE_FUNC, 1)).move(0, 1800).move(.5, 
        1E3)), e.addTween((new Tween(b.interior, Tween.SCALE_FUNC, .38)).move(.62, 300).move(0, 3500).move(-.62, 
        300)), e.addTween((new Tween(b.frame, Tween.X_FUNC, b.frame.x)).move(-10, 300).move(0, 3500).move(10, 
        300)), e.addTween((new Tween(b.frame, Tween.Y_FUNC, b.frame.y)).move(-10, 300).move(0, 3500).move(10, 
        300)), e.addTween((new Tween(b.frame, Tween.SCALE_FUNC, 1)).move(1.64, 300).move(0, 3500).move(-1.64, 
        300)), e.addTween((new Tween(b, Tween.X_FUNC, b.x)).move(a - b.x, 300).move(0, 3500).move(b.x - a, 
        300)), e.addTween((new Tween(b, Tween.Y_FUNC, b.y)).move(188 - b.y, 300).move(0, 3500).move(b.y - 188, 
        300)), e.addTween((new Tween(game.bonus.panel.roundTotalWin, function (a, b) 
        {
            clientData.bonusPaid = Math.round(b);
            clientData.diff() 
        },
        clientData.bonusPaid)).move(0, 1800).move(b.win, 1E3)), e.addAction(function () 
        {
            sound.get("sfx").play("main.total.win.counter", !0) 
        }, 1800), e.addAction(function () 
        {
            clientData.diff();
            sound.get("sfx").get("main.total.win.counter").stop() 
        }, 2800));
        3 == b.type && (e.addTween((new SpriteTween(d)).move("0", 300).move("0-44", 3E3).move("44", 500)), 
        e.addTween((new Tween(d, Tween.ALPHA_FUNC, 1)).move(0, 3800).move(-1, 150)), e.addTween((new Tween(b.interior.thief.thiefGo, 
        Tween.ALPHA_FUNC, 0)).move(0, 3950).move(1, 150)), e.addTween((new Tween(b.interior.backObjects.randomExhibit, 
        Tween.ALPHA_FUNC, 1)).move(0, 1300).move(-1, 500)), b.interior.icons.iconIncreaseKey.visible = !0, 
        e.addTween((new Tween(b.interior.icons.iconIncreaseKey, Tween.ALPHA_FUNC, 0)).move(1, 1800, Tween.JUMP)), 
        e.addTween((new Tween(b.interior.icons.iconIncreaseKey, Tween.SCALE_FUNC, .5)).move(0, 1800).move(.5, 
        1E3)), e.addTween((new Tween(b.interior, Tween.SCALE_FUNC, .38)).move(.62, 300).move(0, 3500).move(-.62, 
        300)), e.addTween((new Tween(b.frame, Tween.X_FUNC, b.frame.x)).move(-10, 300).move(0, 3500).move(10, 
        300)), e.addTween((new Tween(b.frame, Tween.Y_FUNC, b.frame.y)).move(-10, 300).move(0, 3500).move(10, 
        300)), e.addTween((new Tween(b.frame, Tween.SCALE_FUNC, 1)).move(1.64, 300).move(0, 3500).move(-1.64, 
        300)), e.addTween((new Tween(b, Tween.X_FUNC, b.x)).move(a - b.x, 300).move(0, 3500).move(b.x - a, 
        300)), e.addTween((new Tween(b, Tween.Y_FUNC, b.y)).move(188 - b.y, 300).move(0, 3500).move(b.y - 188, 
        300)), game.bonus.panel.increaseKey.visible = !0, e.addTween((new Tween(game.bonus.panel.increaseKey, 
        Tween.Y_FUNC, game.bonus.panel.increaseKey.y)).move(0, 1800).move(-30, 1E3).move(30, 200, Tween.JUMP)), 
        e.addTween((new Tween(game.bonus.panel.increaseKey, Tween.ALPHA_FUNC, 0)).move(1, 1800, Tween.JUMP).move(-1, 
        1E3)), game.bonus.panel.keysAnim.visible = !0, e.addTween((new Tween(game.bonus.panel.keys, Tween.ALPHA_FUNC, 
        1)).move(-1, 1800, Tween.JUMP).move(1, 600, Tween.JUMP)), e.addTween((new Tween(game.bonus.panel.keysAnim, 
        Tween.ALPHA_FUNC, 0)).move(1, 1800, Tween.JUMP).move(-1, 600, Tween.JUMP)), e.addTween((new SpriteTween(game.bonus.panel.keysAnim)).move("0", 
        1800).move("0-8", 600)), e.addAction(function () 
        {
            clientData.bonusKeys = serverData.bonusKeys;
            clientData.diff();
            sound.get("sfx").play("main.bonus.key.add") 
        }, 1800));
        if (2 == b.type) 
        {
            var f;
            switch (b.interior.seqDoorNumber) 
            {
                case 0:
                    e.addTween((new Tween(b.interior.doors.leftDoor, Tween.ALPHA_FUNC, 0)).move(1, 4950, Tween.JUMP));
                    f = Sprite.fromFolder("img/bonus/doors/seq_side", 39);
                    f.x = 379;
                    f.y =- 10;
                    f.scale.x =- 1;
                    b.interior.addChild(f);
                    e.addTween((new SpriteTween(f)).move("0", 300).move("0-38", 2667).move("38", 2283));
                    break;
                case 1:
                    b.interior.thief.thiefLoose.scale.x =- 1;
                    b.interior.thief.thiefLoose.x += 121;
                    e.addTween((new Tween(b.interior.doors.rightDoor, Tween.ALPHA_FUNC, 0)).move(1, 4950, 
                    Tween.JUMP));
                    f = Sprite.fromFolder("img/bonus/doors/seq_side", 39);
                    f.x = 12;
                    f.y =- 10;
                    b.interior.addChild(f);
                    e.addTween((new SpriteTween(f)).move("0", 300).move("0-38", 2667).move("38", 2283));
                    break;
                case 2:
                    e.addTween((new Tween(b.interior.doors.leftDoor, Tween.ALPHA_FUNC, 0)).move(1, 4950, Tween.JUMP));
                    f = Sprite.fromFolder("img/bonus/doors/seq_side", 39);
                    f.x = 379;
                    f.y =- 10;
                    f.scale.x =- 1;
                    b.interior.addChild(f);
                    e.addTween((new SpriteTween(f)).move("0", 300).move("0-38", 2667).move("38", 2283));
                    break;
                case 3:
                    e.addTween((new Tween(b.interior.doors.leftMiddleDoor, Tween.ALPHA_FUNC, 0)).move(1, 4950, 
                    Tween.JUMP));
                    f = Sprite.fromFolder("img/bonus/doors/seq_front", 39);
                    f.x = 12;
                    f.y =- 2;
                    b.interior.addChild(f);
                    e.addTween((new SpriteTween(f)).move("0", 300).move("0-38", 2667).move("38", 2283));
                    break;
                case 4:
                    b.interior.thief.thiefLoose.scale.x =- 1;
                    b.interior.thief.thiefLoose.x += 150;
                    e.addTween((new Tween(b.interior.doors.rightMiddleDoor, Tween.ALPHA_FUNC, 0)).move(1, 
                    4950, Tween.JUMP));
                    f = Sprite.fromFolder("img/bonus/doors/seq_front", 39);
                    f.x = 788;
                    f.y =- 2;
                    f.scale.x =- 1;
                    b.interior.addChild(f);
                    e.addTween((new SpriteTween(f)).move("0", 300).move("0-38", 2667).move("38", 2283));
                    break;
                case 5:
                    b.interior.thief.thiefLoose.scale.x = - 1;
                    b.interior.thief.thiefLoose.x += 150;
                    e.addTween((new Tween(b.interior.doors.rightDoor, Tween.ALPHA_FUNC, 0)).move(1, 4950, 
                    Tween.JUMP));
                    f = Sprite.fromFolder("img/bonus/doors/seq_side", 39);
                    f.x = 421;
                    f.y =- 10;
                    b.interior.addChild(f);
                    e.addTween((new SpriteTween(f)).move("0", 300).move("0-38", 2667).move("38", 2283));
                    break;
                default:
                    throw Error("BonusResultController.onStart: wrong door number.");
            }
            this.doorOpening = f;
            b.interior.swapChildren(f, b.interior.front);
            b.interior.icons.iconDecreaseKey.visible = !0;
            e.addTween((new Tween(b.interior.icons.iconDecreaseKey, Tween.ALPHA_FUNC, 0)).move(1, 1E3, 
            Tween.JUMP));
            e.addTween((new Tween(b.interior.icons.iconDecreaseKey, Tween.SCALE_FUNC, .5)).move(0, 1E3).move(.5, 
            1E3));
            e.addTween((new Tween(b.interior, Tween.SCALE_FUNC, .38)).move(.62, 300).move(0, 4500).move(-.62, 
            300));
            e.addTween((new Tween(b.frame, Tween.X_FUNC, b.frame.x)).move(-10, 300).move(0, 4500).move(10, 
            300));
            e.addTween((new Tween(b.frame, Tween.Y_FUNC, b.frame.y)).move(-10, 300).move(0, 4500).move(10, 
            300));
            e.addTween((new Tween(b.frame, Tween.SCALE_FUNC, 1)).move(1.64, 300).move(0, 4500).move(-1.64, 
            300));
            e.addTween((new Tween(b, Tween.X_FUNC, b.x)).move(a - b.x, 300).move(0, 4500).move(b.x - a, 
            300));
            e.addTween((new Tween(b, Tween.Y_FUNC, b.y)).move(145 - b.y, 300).move(0, 4500).move(b.y - 145, 
            300));
            e.addTween((new Tween(b, function (a, b) 
            {
                c.matrix[0] = b;
                c.matrix[6] = b;
                c.matrix[12] = b;
            },
            .5)).move(0, 4800).move(.5, 300));
            e.addTween((new SpriteTween(b.interior.thief.thiefLoose)).move("0", 300).move("0-60", 4E3).move("60", 
            500));
            e.addTween((new Tween(b.interior.thief.thiefLoose, Tween.ALPHA_FUNC, 1)).move(0, 4800).move(-1, 
            150));
            e.addTween((new Tween(b.interior.thief.thiefGo, Tween.ALPHA_FUNC, 0)).move(0, 4950).move(1, 
            150));
            e.addTween((new Tween(f, Tween.ALPHA_FUNC, 1)).move(-1, 4950, Tween.JUMP));
            game.bonus.panel.decreaseKey.visible = !0;
            game.bonus.panel.decreaseHands.visible = !0;
            e.addTween((new Tween(game.bonus.panel.decreaseKey, Tween.Y_FUNC, game.bonus.panel.decreaseKey.y)).move(0, 
            1E3).move(-30, 1E3).move(30, 200, Tween.JUMP));
            e.addTween((new Tween(game.bonus.panel.decreaseKey, Tween.ALPHA_FUNC, 0)).move(1, 1E3, Tween.JUMP).move(-1, 
            1E3));
            e.addTween((new Tween(game.bonus.panel.decreaseHands, Tween.Y_FUNC, game.bonus.panel.decreaseHands.y)).move(0, 
            1E3).move(-30, 1E3).move(30, 200, Tween.JUMP));
            e.addTween((new Tween(game.bonus.panel.decreaseHands, Tween.ALPHA_FUNC, 0)).move(1, 1E3, Tween.JUMP).move(-1, 
            1E3));
            game.bonus.panel.keysAnim.visible = !0;
            e.addTween((new Tween(game.bonus.panel.keys, Tween.ALPHA_FUNC, 1)).move(-1, 1E3, Tween.JUMP).move(1, 
            600, Tween.JUMP));
            e.addTween((new Tween(game.bonus.panel.keysAnim, Tween.ALPHA_FUNC, 0)).move(1, 1E3, Tween.JUMP).move(-1, 
            600, Tween.JUMP));
            e.addTween((new SpriteTween(game.bonus.panel.keysAnim)).move("0", 1E3).move("0-8", 600));
            game.bonus.panel.handcuffsAnim.visible = !0;
            e.addTween((new Tween(game.bonus.panel.handcuffs, Tween.ALPHA_FUNC, 1)).move(-1, 1E3, Tween.JUMP).move(1, 
            600, Tween.JUMP));
            e.addTween((new Tween(game.bonus.panel.handcuffsAnim, Tween.ALPHA_FUNC, 0)).move(1, 1E3, Tween.JUMP).move(-1, 
            600, Tween.JUMP));
            e.addTween((new SpriteTween(game.bonus.panel.handcuffsAnim)).move("0", 1E3).move("0-8", 600));
            e.addAction(function () 
            {
                0 != clientData.bonusKeys && (clientData.bonusKeys = serverData.bonusKeys);
                clientData.bonusCops = serverData.bonusCops;
                clientData.diff();
                sound.get("sfx").play("main.bonus.key.lose") 
            }, 1E3) 
        }
        1 == b.type && (d.alpha = 0);
        this.clickTime = this.duration;
        game.skipManager.set(function () 
        {
            this.movie.play(this.skipTime);
            this.clickTime = Stage.MAIN.time - this.startTime;
            sound.get("sfx").get("bonus.result").stop() 
        }
        .bind(this), KeyboardListener.SKIP_HOTKEY);
        userConfig.skip_animations ? (e.addAction(function () 
        {
            e.stop();
            this.stop() 
        }
        .bind(this), this.duration + 101), e.play(this.duration + 100)) : (e.addAction(function () 
        {
            e.stop();
            sound.get("sfx").get("bonus.result").stop() 
        },
        this.duration), e.addAction(game.skipManager.reset.bind(game.skipManager), this.skipTime), e.play(0), 
        sound.get("sfx").create("bonus.result"), 1 != b.type && sound.get("sfx").get("bonus.result").play(2 == b.type ? "main.bonus.security" : "main.bonus.steals"));
    }
};
BonusResultController.prototype.onEnterFrame = function (a)
{
    this.hasElapsedTimeStamp(this.clickTime + this.duration - this.skipTime) ? this.stop() : this.hasElapsedTimeStamp(this.duration) && this.stop()
};
BonusResultController.prototype.onStop = function ()
{
    this.thiefAnim && (this.thiefAnim.visible = !1);
    2 == this.currentRoom.type && this.currentRoom.interior.removeChild(this.doorOpening);
    this.currentRoom.interior.filters = null;
    game.bonus.panel.decreaseHands.visible = !1;
    game.bonus.panel.decreaseKey.visible = !1;
    game.bonus.panel.increaseKey.visible = !1;
    game.bonus.panel.keysAnim.visible = !1;
    game.bonus.panel.handcuffsAnim.visible = !1;
    game.skipManager.reset()
};
(new BonusResultController).activate();
function BonusStopController()
{
    StateController.call(this, "bonus.stop");
    this.movie = null
}
BonusStopController.prototype = Object.create(StateController.prototype);
BonusStopController.prototype.constructor = BonusStopController;
BonusStopController.prototype.onStart = function ()
{
    var a = this, b = new PIXI.filters.ColorMatrixFilter;
    game.filters = [b];
    var c = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
    b.matrix = c;
    var d = this.movie = new MovieClip;
    d.addTween((new Tween(game, function (a, b)
    {
        c[0] = b;
        c[6] = b;
        c[12] = b;
    }, 1)).move(-1, 300).move(0, 400).move(1, 300));
    d.addAction(function ()
    {
        game.main.visible = !0;
        game.bonus.visible = !1;
        sound.get("music").get("main").get("main.bonus.background").stop();
        sound.get("music").get("main").loop("main.background")
    }, 500);
    d.addAction(function ()
    {
        d.stop();
        a.stop();
        game.filters = null;
    }, 1E3);
    d.play(0)
};
BonusStopController.prototype.onStop = function ()
{
    0 < clientData.bonusSuperprizePaid && (paytable.showCollectionIndicator = !0)
};
(new BonusStopController).activate();
function BonusPopup(a)
{
    PIXI.Container.call(this);
    this.popup = new PIXI.Container;
    this.popup.x = a.popup.x;
    this.popup.y = a.popup.y;
    this.addChild(this.popup);
    this.content = new PIXI.Container;
    this.addChild(this.content);
    if (null != a.video)
    {
        var b = systemLoader.gamePath("res/video/" + ResourceLoader.VIDEO_FORMAT + "/" + a.video.src + "." + ResourceLoader.VIDEO_FORMAT), 
        b = SystemLoader.isEdge || SystemLoader.isIE11 ? PIXI.Texture.fromVideoUrl(b) : PIXI.Texture.fromVideo(ResourceLoader.videos[b]), 
        c = this.videoSprite = new PIXI.Sprite(b);
        c.x = a.video.x;
        c.y = a.video.y;
        this.source = b.baseTexture.source;
        this.content.addChild(c)
    }
    else {
        this.source = null;
    }
    this.popup.addChild(Sprite.fromFile(a.popup.src));
    this.popup.texts = [];
    for (b = 0; b < a.popup.texts.length; b++)
    {
        this.popup.texts[b] = new TextField(a.popup.texts[b]), this.popup.addChild(this.popup.texts[b]);
    }
    this.addChild(Sprite.fromFile(a.frame.src));
    this.checkboxVideo = Sprite.fromFiles(["img/bonus/buttons/checkbox/off.png", "img/bonus/buttons/checkbox/on.png"]);
    a.dontShowNextTimeVideo && (this.checkboxVideo.x = a.dontShowNextTimeVideo.x, this.checkboxVideo.y = a.dontShowNextTimeVideo.y, 
    this.checkboxVideo.buttonMode = !0, this.checkboxVideo.interactive = !0, this.checkboxVideo.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        userConfig[a.dontShowNextTimeVideo.property] = 1 == this.frame;
        sound.play("main.checkbox.click")
    },
    this.addChild(this.checkboxVideo));
    this.checkboxPopup = Sprite.fromFiles(["img/bonus/buttons/checkbox/off.png", "img/bonus/buttons/checkbox/on.png"]);
    a.dontShowNextTimePopup && (this.addChild(new TextField(a.dontShowNextTimePopup.text)), this.checkboxPopup.x = a.dontShowNextTimePopup.x, 
    this.checkboxPopup.y = a.dontShowNextTimePopup.y, this.checkboxPopup.buttonMode = !0, this.checkboxPopup.interactive = !0, 
    this.checkboxPopup.click = function ()
    {
        this.frame = 0 == this.frame ? 1 : 0;
        userConfig[a.dontShowNextTimePopup.property] = 1 == this.frame;
        sound.play("main.checkbox.click")
    },
    this.addChild(this.checkboxPopup));
    this.controller = new BonusPopupController(this, a);
    this.controller.activate()
}
BonusPopup.prototype = Object.create(PIXI.Container.prototype);
BonusPopup.prototype.constructor = BonusPopup;
function BonusPopupController(a, b)
{
    StateController.call(this, b.state);
    this.popup = a;
    this.config = b;
    this.movie = null
}
BonusPopupController.prototype = Object.create(StateController.prototype);
BonusPopupController.prototype.constructor = BonusPopupController;
BonusPopupController.prototype.onStart = function ()
{
    game.bonus.setChildIndex(this.popup, game.bonus.children.length - 1);
    game.bonus.background.filters = [game.bonus.bgFilter];
    game.bonus.panel.filters = [game.bonus.bgFilter];
    for (var a = 0; a < game.bonus.roomsCount; a++) {
        game.bonus.rooms[a].filters = [game.bonus.bgFilter];
    }
    this.popup.popup.visible = !0;
    this.popup.content.visible = !0;
    this.popup.checkboxPopup.frame = 0;
    var b = this;
    this.movie = this.createMovie();
    this.movie.addAction(function ()
    {
        game.skipManager.set(this.movie.play.bind(this.movie, this.config.time.skip), KeyboardListener.SKIP_HOTKEY)
    }
    .bind(this), this.config.time.afterVideo + 1);
    var c = this.config.dontShowNextTimeVideo && userConfig[this.config.dontShowNextTimeVideo.property] || userConfig.skip_animations, 
    a = this.config.dontShowNextTimePopup && userConfig[this.config.dontShowNextTimePopup.property];
    this.config.video ? (this.movie.addAction(function ()
    {
        c || this.movie.stop()
    }
    .bind(this), this.config.time.afterVideo), c ? a ? "skip_bonus_intro_popup" == this.config.dontShowNextTimePopup.property ? (this.movie.addAction(function ()
    {
        userConfig.skip_bonus_intro_popup && this.play(b.config.time.afterPopup)
    }, 500), this.movie.play(0)) : this.movie.play(this.config.time.afterPopup) : (this.popup.content.visible = !1, 
    this.popup.checkboxVideo.visible = !1, this.popup.checkboxPopup.visible = !0, this.movie.play(this.config.time.afterVideo), 
    sound.get("sfx").play(this.config.sound)) : (this.popup.content.visible = !0, this.popup.popup.visible = !1, 
    this.popup.checkboxPopup.visible = !1, this.popup.source.start(this._onVideoStarted.bind(this), this._onVideoEnded.bind(this)), 
    sound.get("sfx").play(this.config.video.sound))) : a ? this.movie.play(this.config.time.afterPopup) : (this.popup.content.visible = !1, 
    this.popup.checkboxPopup.visible = !0, this.movie.play(0), sound.get("sfx").play(this.config.sound))
};
BonusPopupController.prototype._onVideoStarted = function ()
{
    game.skipManager.set(this._onVideoSkipped.bind(this), KeyboardListener.SKIP_HOTKEY);
    this.movie.play(0)
};
BonusPopupController.prototype._onVideoSkipped = function ()
{
    this.popup.source.pause();
    sound.get("sfx").get(this.config.video.sound).stop();
    this.config.dontShowNextTimePopup && userConfig[this.config.dontShowNextTimePopup.property] ? this.movie.play(this.config.time.skip) : (this.movie.play(this.config.time.afterVideo), 
    this.popup.popup.visible = !0, this.popup.content.visible = !1, this.popup.checkboxVideo.visible = !1, 
    this.popup.checkboxPopup.visible = !0, sound.get("sfx").play(this.config.sound))
};
BonusPopupController.prototype._onVideoEnded = function ()
{
    sound.get("sfx").get(this.config.video.sound).stop();
    this.movie && (this.config.dontShowNextTimePopup && userConfig[this.config.dontShowNextTimePopup.property] ? this.movie.play(this.config.time.skip) : (this.movie.play(this.config.time.afterVideo), 
    this.popup.popup.visible = !0, this.popup.content.visible = !1, sound.get("sfx").play(this.config.sound)), 
    this.popup.checkboxVideo.visible = !1, this.popup.checkboxPopup.visible = !0)
};
BonusPopupController.prototype.onStop = function ()
{
    this.popup.checkboxVideo.visible = !0;
    this.popup.checkboxPopup.visible = !0;
    game.bonus.background.filters = null;
    game.bonus.panel.filters = null;
    game.skipManager.reset();
    for (var a = 0; a < game.bonus.roomsCount; a++) {
        game.bonus.rooms[a].filters = null;
    }
    if ("bonus.superprize" == this.config.state || "bonus.win_summary" == this.config.state || "bonus.loose_summary" == this.config.state)
    {
        for (a = 0; a < game.bonus.rooms.length; a++) {
            game.bonus.rooms[a].removeChildren();
        }
        game.bonus.superprizeRoom.visible = !1
    }
};
ClientData.prototype.defaultData.bonusPick =- 1;
ClientData.prototype.defaultData.bonusKeys =- 1;
ClientData.prototype.defaultData.bonusCops =- 1;
Game.prototype.createBonus = function ()
{
    return new Bonus;
};
function Bonus()
{
    GameModule.call(this)
}
Bonus.prototype = Object.create(GameModule.prototype);
Bonus.prototype.constructor = Bonus;
Bonus.prototype.addCustomContent = function ()
{
    this.background = this.createBackground();
    this.addChild(this.background);
    this.roomsCount = 15;
    this.rooms = Array(this.roomsCount);
    this.addSuperprizeRoom();
    for (var a = 0; a < this.roomsCount; a++) {
        var b = this.rooms[a] = new Room(a, this);
        this.addChild(b)
    }
    this.addPanel();
    this.introPopup = new BonusPopup(
    {
        video : {
            x : 15, y : 0, src : "bonus_intro", sound : "main.video.bonus.start"
        },
        popup : 
        {
            x : 15, y : 0, src : "img/bonus/popups/start.png", texts : ["BONUS_START_POPUP_TEXT_1", "BONUS_START_POPUP_TEXT_2"]
        },
        frame : {
            src : "img/bonus/popups/frame.png"
        },
        time : {
            afterVideo : 700, skip : 7700, afterPopup : 7900
        },
        state : "bonus.intro", sound : "main.bonus.popup", dontShowNextTimeVideo : {
            x : 15, y : 297, text : "DONT_SHOW_NEXT_TIME_BONUS", property : "skip_bonus_intro_video"
        },
        dontShowNextTimePopup : {
            x : 15, y : 297, text : "DONT_SHOW_NEXT_TIME_BONUS", property : "skip_bonus_intro_popup"
        }
    });
    this.introPopup.controller.createMovie = function ()
    {
        var a = new MovieClip, b = game.filters[0];
        a.addTween((new Tween(game, function (a, c)
        {
            b.matrix[0] = c;
            b.matrix[6] = c;
            b.matrix[12] = c;
        }, 0)).move(0, 200).move(1, 300));
        a.addTween((new Tween(this.popup, Tween.SCALE_FUNC, 0)).move(0, 500).move(1, 200).move(0, 7E3).move(-1, 
        200));
        a.addTween((new Tween(this.popup, Tween.ALPHA_FUNC, 1)).move(-1, 7900, Tween.JUMP));
        a.addAction(function ()
        {
            game.main.visible = !1;
            game.bonus.visible = !0
        }, 1);
        a.addAction(function ()
        {
            game.filters = null;
        }, 501);
        a.addAction(function ()
        {
            a.stop();
            this.stop()
        }
        .bind(this), 7901);
        return a;
    };
    this.introPopup.pivot.x = 255;
    this.introPopup.pivot.y = 100;
    this.introPopup.x = 700;
    this.introPopup.y = 340;
    this.introPopup.alpha = 0;
    this.introPopup.scale.x = 0;
    this.introPopup.scale.y = 0;
    this.addChild(this.introPopup);
    game.bonus.superprizePopup = new BonusPopup(
    {
        video : {
            x : 15, y : 0, src : "bonus_superprize", sound : "main.video.bonus.end"
        },
        popup : 
        {
            x : 15, y : 0, src : "img/bonus/popups/win.png", texts : "BONUS_SUPERPRIZE_POPUP_TEXT_1 BONUS_SUPERPRIZE_POPUP_TEXT_2 BONUS_SUPERPRIZE_POPUP_TEXT_3 BONUS_SUPERPRIZE_POPUP_TEXT_4 BONUS_SUPERPRIZE_POPUP_TEXT_5 BONUS_SUPERPRIZE_POPUP_TEXT_6 BONUS_SUPERPRIZE_POPUP_TEXT_7 BONUS_SUPERPRIZE_POPUP_TEXT_8 BONUS_SUPERPRIZE_POPUP_TEXT_9".split(" ")
        },
        sound : "main.bonus.popup.win", frame : {
            src : "img/bonus/popups/frame.png"
        },
        time : {
            afterVideo : 200, skip : 7200, afterPopup : 7400
        },
        state : "bonus.superprize"
    });
    this.superprizePopup.onClientUpdate(function (a)
    {
        a.diff.state && "bonus.superprize" == clientData.state && (a = 1 * clientData.bonusKeys * clientData.bonusBet, 
        this.popup.texts[2].token("value", currencyFormatter.format(clientData.bonusPaid + clientData.bonusSuperprizePaid)), 
        this.popup.texts[4].token("value", currencyFormatter.format(clientData.bonusSuperprizePaid - a)), 
        this.popup.texts[6].token("value", currencyFormatter.format(clientData.bonusPaid)), this.popup.texts[8].token("value", 
        currencyFormatter.format(a)));
    });
    this.superprizePopup.controller.createMovie = function ()
    {
        var a = new MovieClip;
        a.addTween((new Tween(this.popup, Tween.SCALE_FUNC, 0)).move(1, 200).move(0, 7E3).move(-1, 200));
        a.addTween((new Tween(this.popup, Tween.ALPHA_FUNC, 1)).move(-1, 7400, Tween.JUMP));
        a.addTween((new Tween(this.popup.popup.texts[1], Tween.ALPHA_FUNC, 0)).move(0, 500).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[2], Tween.ALPHA_FUNC, 0)).move(0, 500).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[3], Tween.ALPHA_FUNC, 0)).move(0, 1E3).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[4], Tween.ALPHA_FUNC, 0)).move(0, 1E3).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[5], Tween.ALPHA_FUNC, 0)).move(0, 1500).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[6], Tween.ALPHA_FUNC, 0)).move(0, 1500).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[7], Tween.ALPHA_FUNC, 0)).move(0, 2E3).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[8], Tween.ALPHA_FUNC, 0)).move(0, 2E3).move(1, 200));
        a.addTween((new Tween(game.bonus.panel.roundTotalWin, function (a, b)
        {
            clientData.bonusPaid = Math.round(b);
            clientData.diff()
        },
        clientData.bonusPaid)).move(0, 2200).move(clientData.bonusSuperprizePaid, 1E3));
        a.addAction(function ()
        {
            a.stop();
            this.stop()
        }
        .bind(this), 7401);
        return a;
    };
    this.superprizePopup.pivot.x = 255;
    this.superprizePopup.pivot.y = 100;
    this.superprizePopup.x = 700;
    this.superprizePopup.y = 340;
    this.superprizePopup.alpha = 0;
    this.superprizePopup.scale.x = 0;
    this.superprizePopup.scale.y = 0;
    this.addChild(this.superprizePopup);
    this.summaryWinPopup = new BonusPopup(
    {
        popup : 
        {
            x : 15, y : 0, src : "img/bonus/popups/win.png", texts : ["BONUS_WIN_POPUP_TEXT_1", "BONUS_WIN_POPUP_TEXT_2", 
            "BONUS_WIN_POPUP_TEXT_3"]
        },
        sound : "main.bonus.popup.win", frame : {
            src : "img/bonus/popups/frame.png"
        },
        time : {
            afterVideo : 200, skip : 7200, afterPopup : 7400
        },
        state : "bonus.win_summary"
    });
    this.summaryWinPopup.onClientUpdate(function (a)
    {
        a.diff.state && "bonus.win_summary" == clientData.state && this.popup.texts[2].token("value", 
        currencyFormatter.format(clientData.bonusPaid))
    });
    this.summaryWinPopup.controller.createMovie = function ()
    {
        var a = new MovieClip;
        a.addTween((new Tween(this.popup, function (a, b)
        {
            a.scale.x = b;
            a.scale.y = b;
        }, 0)).move(1, 200).move(0, 7E3).move(-1, 200));
        a.addTween((new Tween(this.popup, Tween.ALPHA_FUNC, 1)).move(-1, 7400, Tween.JUMP));
        a.addTween((new Tween(this.popup.popup, Tween.ALPHA_FUNC, 0)).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[1], Tween.ALPHA_FUNC, 0)).move(0, 500).move(1, 200));
        a.addTween((new Tween(this.popup.popup.texts[2], Tween.ALPHA_FUNC, 0)).move(0, 500).move(1, 200));
        a.addAction(function ()
        {
            a.stop();
            this.stop()
        }
        .bind(this), 7401);
        return a;
    };
    this.summaryWinPopup.pivot.x = 255;
    this.summaryWinPopup.pivot.y = 100;
    this.summaryWinPopup.x = 700;
    this.summaryWinPopup.y = 340;
    this.summaryWinPopup.alpha = 0;
    this.summaryWinPopup.scale.x = 0;
    this.summaryWinPopup.scale.y = 0;
    this.addChild(this.summaryWinPopup);
    this.summaryLoosePopup = new BonusPopup(
    {
        popup : 
        {
            x : 15, y : 0, src : "img/bonus/popups/loose.png", texts : ["BONUS_LOOSE_POPUP_TEXT_1", "BONUS_LOOSE_POPUP_TEXT_2", 
            "BONUS_LOOSE_POPUP_TEXT_3"]
        },
        frame : {
            src : "img/bonus/popups/frame.png"
        },
        time : {
            afterVideo : 200, skip : 7200, afterPopup : 7400
        },
        sound : "main.bonus.popup", state : "bonus.loose_summary"
    });
    this.summaryLoosePopup.controller.createMovie = function ()
    {
        var a = new MovieClip;
        a.addTween((new Tween(this.popup, Tween.SCALE_FUNC, 0)).move(1, 200).move(0, 7E3).move(-1, 200));
        a.addTween((new Tween(this.popup, Tween.ALPHA_FUNC, 1)).move(-1, 7400, Tween.JUMP));
        a.addTween((new Tween(this.popup.popup, Tween.ALPHA_FUNC, 0)).move(1, 200));
        a.addAction(function ()
        {
            a.stop();
            this.stop()
        }
        .bind(this), 7401);
        return a;
    };
    this.summaryLoosePopup.pivot.x = 255;
    this.summaryLoosePopup.pivot.y = 100;
    this.summaryLoosePopup.x = 700;
    this.summaryLoosePopup.y = 340;
    this.summaryLoosePopup.alpha = 0;
    this.summaryLoosePopup.scale.x = 0;
    this.summaryLoosePopup.scale.y = 0;
    this.addChild(this.summaryLoosePopup);
    if (SystemLoader.isSafari) for (b = ["bonus_intro", "bonus_superprize"], a = 0;
    a < b.length;
    a++)
    {
        var c = ResourceLoader.videos[systemLoader.gamePath("res/video/" + ResourceLoader.VIDEO_FORMAT + "/" + b[a] + "." + ResourceLoader.VIDEO_FORMAT)], 
        d = PIXI.Texture.fromVideo(c), d = new PIXI.Sprite(d);
        Stage.MAIN.root.addChildAt(d, 0);
        c.start(function () {}, function () {});
        $("head").append(c)
    }
};
Bonus.prototype.createBackground = function ()
{
    var a = new PIXI.Container;
    a.addChild(Sprite.fromFile("img/bonus/background.png"));
    (this.bgFilter = new PIXI.filters.ColorMatrixFilter).matrix = [.4, 0, 0, 0, 0, 0, .4, 0, 0, 0, 0, 
    0, .4, 0, 0, 0, 0, 0, 1, 0];
    var b = Sprite.fromFile("img/bonus/background/radio.png");
    b.x = 1300;
    b.y = 500;
    a.addChild(b);
    var c = new MovieClip;
    c.addTween((new Tween(b, Tween.ALPHA_FUNC, 0)).move(1, 500, Tween.JUMP).move(-1, 500, Tween.JUMP).move(1, 
    500, Tween.JUMP).move(-1, 500, Tween.JUMP).move(1, 500, Tween.JUMP).move(-1, 500, Tween.JUMP).move(1, 
    500, Tween.JUMP).move(-1, 500, Tween.JUMP));
    c.addAction(c.play, 4E3, 0);
    c.play(0);
    return a;
};
Bonus.prototype.addSuperprizeRoom = function ()
{
    var a = this.superprizeRoom = new PIXI.Container;
    this.addChild(a);
    var b = Sprite.fromFile("img/bonus/wallpapers/superprize.png"), c = this.filter = new PIXI.filters.ColorMatrixFilter;
    c.matrix = [0, 0, 0, 0, 0, 0, .2, .2, 0, 0, 0, .25, .3, 0, 0, 0, 0, 0, .5, 0];
    b.filters = [c];
    a.addChild(b);
    b = Sprite.fromFile("img/bonus/interface/gold_frame.png");
    a.addChild(b);
    b = Sprite.fromFile("img/bonus/interface/icons/lock_little.png");
    b.x = 140;
    b.y = 45;
    a.addChild(b)
};
Bonus.prototype.addPanel = function ()
{
    this.panel = new PIXI.Container;
    this.panel.x = 217;
    this.panel.y = 673;
    this.panel.width = 886;
    this.panel.height = 73;
    this.addChild(this.panel);
    var a = this.panel.infoButton = Button.createStandartButton("img/bonus/buttons/info_button");
    a.x = 25;
    a.y = 40;
    a.clickSound = "main.bonus.paytable.click";
    a.overSound = "main.bonus.paytable.over";
    a.click = function ()
    {
        paytable.show(4)
    };
    a.setTooltip("TOOLTIP_PAYTABLE");
    a.addHotkey(KeyboardListener.PAYTABLE_HOTKEY);
    this.panel.addChild(a);
    this.panel.addChild(new TextField("BONUS_LABEL_BALANCE"));
    this.panel.balanceField = new TextField("BONUS_VALUE_BALANCE");
    this.panel.balanceField.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.balance))
    });
    this.panel.addChild(this.panel.balanceField);
    this.panel.addChild(new TextField("BONUS_LABEL_ROUND_BET"));
    this.panel.roundBetField = new TextField("BONUS_VALUE_ROUND_BET");
    this.panel.roundBetField.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.bonusBet))
    });
    this.panel.addChild(this.panel.roundBetField);
    this.panel.addChild(new TextField("BONUS_LABEL_TOTAL_WIN"));
    this.panel.roundTotalWin = new TextField("BONUS_VALUE_TOTAL_WIN");
    this.panel.roundTotalWin.onClientUpdate(function ()
    {
        this.token("value", currencyFormatter.format(clientData.bonusPaid))
    });
    this.panel.addChild(this.panel.roundTotalWin);
    this.panel.keysField = new TextField("BONUS_VALUE_KEYS");
    this.panel.keysField.onClientUpdate(function ()
    {
        this.token("value", clientData.bonusKeys)
    });
    this.panel.addChild(this.panel.keysField);
    this.panel.handcuffsField = new TextField("BONUS_VALUE_HANDCUFFS");
    this.panel.handcuffsField.onClientUpdate(function ()
    {
        this.token("value", clientData.bonusCops)
    });
    this.panel.addChild(this.panel.handcuffsField);
    this.panel.keys = Sprite.fromFile("img/bonus/interface/key/00.png");
    this.panel.keys.x = 734;
    this.panel.keys.y = 0;
    this.panel.addChild(this.panel.keys);
    this.panel.keysAnim = Sprite.fromFolder("img/bonus/interface/key", 9);
    this.panel.keysAnim.visible = !1;
    this.panel.keysAnim.x = 734;
    this.panel.keysAnim.y = 0;
    this.panel.addChild(this.panel.keysAnim);
    this.panel.handcuffs = Sprite.fromFile("img/bonus/interface/hands/00.png");
    this.panel.handcuffs.x = 843;
    this.panel.handcuffs.y = 0;
    this.panel.addChild(this.panel.handcuffs);
    this.panel.handcuffsAnim = Sprite.fromFolder("img/bonus/interface/hands", 9);
    this.panel.handcuffsAnim.visible = !1;
    this.panel.handcuffsAnim.x = 843;
    this.panel.handcuffsAnim.y = 0;
    this.panel.addChild(this.panel.handcuffsAnim);
    this.panel.decreaseKey = new TextField("BONUS_DECREASE_KEY");
    this.panel.decreaseKey.visible = !1;
    this.panel.addChild(this.panel.decreaseKey);
    this.panel.increaseKey = new TextField("BONUS_INCREASE_KEY");
    this.panel.increaseKey.visible = !1;
    this.panel.addChild(this.panel.increaseKey);
    this.panel.decreaseHands = new TextField("BONUS_DECREASE_HANDS");
    this.panel.decreaseHands.visible = !1;
    this.panel.addChild(this.panel.decreaseHands);
    a = this.messageBox = new MessageBox(475, 25);
    a.x = 10;
    a.y = 2;
    a.mask = new PIXI.Graphics;
    a.mask.beginFill();
    a.mask.drawPolygon([0, 0, 491, 0, 466, 25, 0, 25]);
    a.mask.endFill();
    a.addChild(a.mask);
    a.onClientUpdate(function (a)
    {
        a.diff.state && ("bonus.intro" == clientData.state && this.show("INFO_BONUS_" + Math.floor(4 * Math.random() + 1), 
        4E3), "bonus.result" == clientData.state && 3 == clientData.bonusRoomType && this.show("ACTION_BONUS_KEY", 
        4E3), "bonus.result" == clientData.state && 2 == clientData.bonusRoomType && this.show("ACTION_BONUS_COP", 
        5E3), - 1 != ["bonus.superprize", "bonus.win_summary", "bonus.loose_summary"].indexOf(clientData.state) && this.show("ACTION_BONUS_END", 
        2E4))
    });
    a.nextMessage = function ()
    {
        this.show("INFO_BONUS_" + Math.floor(4 * Math.random() + 1), 4E3)
    };
    this.panel.addChildAt(a, 0)
};
Bonus.prototype.pick = function (a)
{
    clientData.bonusPick = a;
    clientData.act("pick");
    for (var b = 0; b < this.roomsCount; b++)
    {
        2 == this.rooms[b].status && this.rooms[b].status++, this.rooms[b].serverId == a && (this.rooms[b].status = 2), 
        this.rooms[b].updateStatus();
    }
};